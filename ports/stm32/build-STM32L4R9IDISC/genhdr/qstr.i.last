# 1 "../Testing_module/JOYSTICK/joystick.c"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "../Testing_module/JOYSTICK/joystick.c"
# 1 "../Testing_module/JOYSTICK/../../../py/obj.h" 1
# 29 "../Testing_module/JOYSTICK/../../../py/obj.h"
# 1 "../../py/mpconfig.h" 1
# 62 "../../py/mpconfig.h"
# 1 "./mpconfigport.h" 1
# 31 "./mpconfigport.h"
# 1 "boards/STM32L4R9IDISC/mpconfigboard.h" 1
# 32 "./mpconfigport.h" 2
# 1 "./mpconfigboard_common.h" 1
# 30 "./mpconfigboard_common.h"
# 1 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal.h" 1
# 30 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal.h"
# 1 "boards/STM32L4R9IDISC/stm32l4xx_hal_conf.h" 1


# 1 "./boards/stm32l4xx_hal_conf_base.h" 1
# 30 "./boards/stm32l4xx_hal_conf_base.h"
# 1 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_dma.h" 1
# 29 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_dma.h"
# 1 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_def.h" 1
# 30 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_def.h"
# 1 "../../lib/stm32lib/CMSIS/STM32L4xx/Include/stm32l4xx.h" 1
# 162 "../../lib/stm32lib/CMSIS/STM32L4xx/Include/stm32l4xx.h"
# 1 "../../lib/stm32lib/CMSIS/STM32L4xx/Include/stm32l4r9xx.h" 1
# 66 "../../lib/stm32lib/CMSIS/STM32L4xx/Include/stm32l4r9xx.h"
typedef enum
{

  NonMaskableInt_IRQn = -14,
  HardFault_IRQn = -13,
  MemoryManagement_IRQn = -12,
  BusFault_IRQn = -11,
  UsageFault_IRQn = -10,
  SVCall_IRQn = -5,
  DebugMonitor_IRQn = -4,
  PendSV_IRQn = -2,
  SysTick_IRQn = -1,

  WWDG_IRQn = 0,
  PVD_PVM_IRQn = 1,
  TAMP_STAMP_IRQn = 2,
  RTC_WKUP_IRQn = 3,
  FLASH_IRQn = 4,
  RCC_IRQn = 5,
  EXTI0_IRQn = 6,
  EXTI1_IRQn = 7,
  EXTI2_IRQn = 8,
  EXTI3_IRQn = 9,
  EXTI4_IRQn = 10,
  DMA1_Channel1_IRQn = 11,
  DMA1_Channel2_IRQn = 12,
  DMA1_Channel3_IRQn = 13,
  DMA1_Channel4_IRQn = 14,
  DMA1_Channel5_IRQn = 15,
  DMA1_Channel6_IRQn = 16,
  DMA1_Channel7_IRQn = 17,
  ADC1_IRQn = 18,
  CAN1_TX_IRQn = 19,
  CAN1_RX0_IRQn = 20,
  CAN1_RX1_IRQn = 21,
  CAN1_SCE_IRQn = 22,
  EXTI9_5_IRQn = 23,
  TIM1_BRK_TIM15_IRQn = 24,
  TIM1_UP_TIM16_IRQn = 25,
  TIM1_TRG_COM_TIM17_IRQn = 26,
  TIM1_CC_IRQn = 27,
  TIM2_IRQn = 28,
  TIM3_IRQn = 29,
  TIM4_IRQn = 30,
  I2C1_EV_IRQn = 31,
  I2C1_ER_IRQn = 32,
  I2C2_EV_IRQn = 33,
  I2C2_ER_IRQn = 34,
  SPI1_IRQn = 35,
  SPI2_IRQn = 36,
  USART1_IRQn = 37,
  USART2_IRQn = 38,
  USART3_IRQn = 39,
  EXTI15_10_IRQn = 40,
  RTC_Alarm_IRQn = 41,
  DFSDM1_FLT3_IRQn = 42,
  TIM8_BRK_IRQn = 43,
  TIM8_UP_IRQn = 44,
  TIM8_TRG_COM_IRQn = 45,
  TIM8_CC_IRQn = 46,
  FMC_IRQn = 48,
  SDMMC1_IRQn = 49,
  TIM5_IRQn = 50,
  SPI3_IRQn = 51,
  UART4_IRQn = 52,
  UART5_IRQn = 53,
  TIM6_DAC_IRQn = 54,
  TIM7_IRQn = 55,
  DMA2_Channel1_IRQn = 56,
  DMA2_Channel2_IRQn = 57,
  DMA2_Channel3_IRQn = 58,
  DMA2_Channel4_IRQn = 59,
  DMA2_Channel5_IRQn = 60,
  DFSDM1_FLT0_IRQn = 61,
  DFSDM1_FLT1_IRQn = 62,
  DFSDM1_FLT2_IRQn = 63,
  COMP_IRQn = 64,
  LPTIM1_IRQn = 65,
  LPTIM2_IRQn = 66,
  OTG_FS_IRQn = 67,
  DMA2_Channel6_IRQn = 68,
  DMA2_Channel7_IRQn = 69,
  LPUART1_IRQn = 70,
  OCTOSPI1_IRQn = 71,
  I2C3_EV_IRQn = 72,
  I2C3_ER_IRQn = 73,
  SAI1_IRQn = 74,
  SAI2_IRQn = 75,
  OCTOSPI2_IRQn = 76,
  TSC_IRQn = 77,
  DSI_IRQn = 78,
  RNG_IRQn = 80,
  FPU_IRQn = 81,
  CRS_IRQn = 82,
  I2C4_EV_IRQn = 83,
  I2C4_ER_IRQn = 84,
  DCMI_IRQn = 85,
  DMA2D_IRQn = 90,
  LTDC_IRQn = 91,
  LTDC_ER_IRQn = 92,
  GFXMMU_IRQn = 93,
  DMAMUX1_OVR_IRQn = 94
} IRQn_Type;





# 1 "../../lib/cmsis/inc/core_cm4.h" 1
# 34 "../../lib/cmsis/inc/core_cm4.h"
# 1 "/usr/lib/gcc/arm-none-eabi/4.9.3/include/stdint.h" 1 3 4
# 9 "/usr/lib/gcc/arm-none-eabi/4.9.3/include/stdint.h" 3 4
# 1 "/usr/include/newlib/stdint.h" 1 3 4
# 12 "/usr/include/newlib/stdint.h" 3 4
# 1 "/usr/include/newlib/machine/_default_types.h" 1 3 4







# 1 "/usr/include/newlib/sys/features.h" 1 3 4
# 9 "/usr/include/newlib/machine/_default_types.h" 2 3 4
# 27 "/usr/include/newlib/machine/_default_types.h" 3 4
typedef signed char __int8_t;

typedef unsigned char __uint8_t;
# 41 "/usr/include/newlib/machine/_default_types.h" 3 4
typedef short int __int16_t;

typedef short unsigned int __uint16_t;
# 63 "/usr/include/newlib/machine/_default_types.h" 3 4
typedef long int __int32_t;

typedef long unsigned int __uint32_t;
# 89 "/usr/include/newlib/machine/_default_types.h" 3 4
typedef long long int __int64_t;

typedef long long unsigned int __uint64_t;
# 120 "/usr/include/newlib/machine/_default_types.h" 3 4
typedef signed char __int_least8_t;

typedef unsigned char __uint_least8_t;
# 146 "/usr/include/newlib/machine/_default_types.h" 3 4
typedef short int __int_least16_t;

typedef short unsigned int __uint_least16_t;
# 168 "/usr/include/newlib/machine/_default_types.h" 3 4
typedef long int __int_least32_t;

typedef long unsigned int __uint_least32_t;
# 186 "/usr/include/newlib/machine/_default_types.h" 3 4
typedef long long int __int_least64_t;

typedef long long unsigned int __uint_least64_t;
# 200 "/usr/include/newlib/machine/_default_types.h" 3 4
typedef int __intptr_t;

typedef unsigned int __uintptr_t;
# 13 "/usr/include/newlib/stdint.h" 2 3 4
# 1 "/usr/include/newlib/sys/_intsup.h" 1 3 4
# 49 "/usr/include/newlib/sys/_intsup.h" 3 4
       
       
       
       
       
       
# 193 "/usr/include/newlib/sys/_intsup.h" 3 4
       
       
       
       
       
       
# 14 "/usr/include/newlib/stdint.h" 2 3 4
# 1 "/usr/include/newlib/sys/_stdint.h" 1 3 4
# 19 "/usr/include/newlib/sys/_stdint.h" 3 4
typedef __int8_t int8_t ;
typedef __uint8_t uint8_t ;




typedef __int16_t int16_t ;
typedef __uint16_t uint16_t ;




typedef __int32_t int32_t ;
typedef __uint32_t uint32_t ;




typedef __int64_t int64_t ;
typedef __uint64_t uint64_t ;



typedef __intptr_t intptr_t;
typedef __uintptr_t uintptr_t;
# 15 "/usr/include/newlib/stdint.h" 2 3 4






typedef __int_least8_t int_least8_t;
typedef __uint_least8_t uint_least8_t;




typedef __int_least16_t int_least16_t;
typedef __uint_least16_t uint_least16_t;




typedef __int_least32_t int_least32_t;
typedef __uint_least32_t uint_least32_t;




typedef __int_least64_t int_least64_t;
typedef __uint_least64_t uint_least64_t;
# 51 "/usr/include/newlib/stdint.h" 3 4
  typedef int int_fast8_t;
  typedef unsigned int uint_fast8_t;
# 61 "/usr/include/newlib/stdint.h" 3 4
  typedef int int_fast16_t;
  typedef unsigned int uint_fast16_t;
# 71 "/usr/include/newlib/stdint.h" 3 4
  typedef int int_fast32_t;
  typedef unsigned int uint_fast32_t;
# 81 "/usr/include/newlib/stdint.h" 3 4
  typedef long long int int_fast64_t;
  typedef long long unsigned int uint_fast64_t;
# 130 "/usr/include/newlib/stdint.h" 3 4
  typedef long long int intmax_t;
# 139 "/usr/include/newlib/stdint.h" 3 4
  typedef long long unsigned int uintmax_t;
# 10 "/usr/lib/gcc/arm-none-eabi/4.9.3/include/stdint.h" 2 3 4
# 35 "../../lib/cmsis/inc/core_cm4.h" 2
# 63 "../../lib/cmsis/inc/core_cm4.h"
# 1 "../../lib/cmsis/inc/cmsis_version.h" 1
# 64 "../../lib/cmsis/inc/core_cm4.h" 2
# 162 "../../lib/cmsis/inc/core_cm4.h"
# 1 "../../lib/cmsis/inc/cmsis_compiler.h" 1
# 54 "../../lib/cmsis/inc/cmsis_compiler.h"
# 1 "../../lib/cmsis/inc/cmsis_gcc.h" 1
# 29 "../../lib/cmsis/inc/cmsis_gcc.h"
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wsign-conversion"
#pragma GCC diagnostic ignored "-Wconversion"
#pragma GCC diagnostic ignored "-Wunused-parameter"
# 71 "../../lib/cmsis/inc/cmsis_gcc.h"
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wpacked"
#pragma GCC diagnostic ignored "-Wattributes"
  struct __attribute__((packed)) T_UINT32 { uint32_t v; };
#pragma GCC diagnostic pop



#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wpacked"
#pragma GCC diagnostic ignored "-Wattributes"
  struct __attribute__((packed, aligned(1))) T_UINT16_WRITE { uint16_t v; };
#pragma GCC diagnostic pop



#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wpacked"
#pragma GCC diagnostic ignored "-Wattributes"
  struct __attribute__((packed, aligned(1))) T_UINT16_READ { uint16_t v; };
#pragma GCC diagnostic pop



#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wpacked"
#pragma GCC diagnostic ignored "-Wattributes"
  struct __attribute__((packed, aligned(1))) T_UINT32_WRITE { uint32_t v; };
#pragma GCC diagnostic pop



#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wpacked"
#pragma GCC diagnostic ignored "-Wattributes"
  struct __attribute__((packed, aligned(1))) T_UINT32_READ { uint32_t v; };
#pragma GCC diagnostic pop
# 129 "../../lib/cmsis/inc/cmsis_gcc.h"
__attribute__((always_inline)) static inline void __enable_irq(void)
{
  __asm volatile ("cpsie i" : : : "memory");
}







__attribute__((always_inline)) static inline void __disable_irq(void)
{
  __asm volatile ("cpsid i" : : : "memory");
}







__attribute__((always_inline)) static inline uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __asm volatile ("MRS %0, control" : "=r" (result) );
  return(result);
}
# 181 "../../lib/cmsis/inc/cmsis_gcc.h"
__attribute__((always_inline)) static inline void __set_CONTROL(uint32_t control)
{
  __asm volatile ("MSR control, %0" : : "r" (control) : "memory");
}
# 205 "../../lib/cmsis/inc/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __get_IPSR(void)
{
  uint32_t result;

  __asm volatile ("MRS %0, ipsr" : "=r" (result) );
  return(result);
}







__attribute__((always_inline)) static inline uint32_t __get_APSR(void)
{
  uint32_t result;

  __asm volatile ("MRS %0, apsr" : "=r" (result) );
  return(result);
}







__attribute__((always_inline)) static inline uint32_t __get_xPSR(void)
{
  uint32_t result;

  __asm volatile ("MRS %0, xpsr" : "=r" (result) );
  return(result);
}







__attribute__((always_inline)) static inline uint32_t __get_PSP(void)
{
  uint32_t result;

  __asm volatile ("MRS %0, psp" : "=r" (result) );
  return(result);
}
# 277 "../../lib/cmsis/inc/cmsis_gcc.h"
__attribute__((always_inline)) static inline void __set_PSP(uint32_t topOfProcStack)
{
  __asm volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
}
# 301 "../../lib/cmsis/inc/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __get_MSP(void)
{
  uint32_t result;

  __asm volatile ("MRS %0, msp" : "=r" (result) );
  return(result);
}
# 331 "../../lib/cmsis/inc/cmsis_gcc.h"
__attribute__((always_inline)) static inline void __set_MSP(uint32_t topOfMainStack)
{
  __asm volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
}
# 382 "../../lib/cmsis/inc/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __asm volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  return(result);
}
# 412 "../../lib/cmsis/inc/cmsis_gcc.h"
__attribute__((always_inline)) static inline void __set_PRIMASK(uint32_t priMask)
{
  __asm volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
}
# 439 "../../lib/cmsis/inc/cmsis_gcc.h"
__attribute__((always_inline)) static inline void __enable_fault_irq(void)
{
  __asm volatile ("cpsie f" : : : "memory");
}







__attribute__((always_inline)) static inline void __disable_fault_irq(void)
{
  __asm volatile ("cpsid f" : : : "memory");
}







__attribute__((always_inline)) static inline uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __asm volatile ("MRS %0, basepri" : "=r" (result) );
  return(result);
}
# 491 "../../lib/cmsis/inc/cmsis_gcc.h"
__attribute__((always_inline)) static inline void __set_BASEPRI(uint32_t basePri)
{
  __asm volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
}
# 516 "../../lib/cmsis/inc/cmsis_gcc.h"
__attribute__((always_inline)) static inline void __set_BASEPRI_MAX(uint32_t basePri)
{
  __asm volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
}







__attribute__((always_inline)) static inline uint32_t __get_FAULTMASK(void)
{
  uint32_t result;

  __asm volatile ("MRS %0, faultmask" : "=r" (result) );
  return(result);
}
# 557 "../../lib/cmsis/inc/cmsis_gcc.h"
__attribute__((always_inline)) static inline void __set_FAULTMASK(uint32_t faultMask)
{
  __asm volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
}
# 766 "../../lib/cmsis/inc/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __get_FPSCR(void)
{
# 776 "../../lib/cmsis/inc/cmsis_gcc.h"
  uint32_t result;

  __asm volatile ("VMRS %0, fpscr" : "=r" (result) );
  return(result);




}







__attribute__((always_inline)) static inline void __set_FPSCR(uint32_t fpscr)
{
# 802 "../../lib/cmsis/inc/cmsis_gcc.h"
  __asm volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");




}
# 866 "../../lib/cmsis/inc/cmsis_gcc.h"
__attribute__((always_inline)) static inline void __ISB(void)
{
  __asm volatile ("isb 0xF":::"memory");
}







__attribute__((always_inline)) static inline void __DSB(void)
{
  __asm volatile ("dsb 0xF":::"memory");
}







__attribute__((always_inline)) static inline void __DMB(void)
{
  __asm volatile ("dmb 0xF":::"memory");
}
# 900 "../../lib/cmsis/inc/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __REV(uint32_t value)
{

  return __builtin_bswap32(value);






}
# 919 "../../lib/cmsis/inc/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __REV16(uint32_t value)
{
  uint32_t result;

  __asm volatile ("rev16 %0, %1" : "=r" (result) : "r" (value) );
  return result;
}
# 934 "../../lib/cmsis/inc/cmsis_gcc.h"
__attribute__((always_inline)) static inline int16_t __REVSH(int16_t value)
{

  return (int16_t)__builtin_bswap16(value);






}
# 954 "../../lib/cmsis/inc/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __ROR(uint32_t op1, uint32_t op2)
{
  op2 %= 32U;
  if (op2 == 0U)
  {
    return op1;
  }
  return (op1 >> op2) | (op1 << (32U - op2));
}
# 981 "../../lib/cmsis/inc/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __RBIT(uint32_t value)
{
  uint32_t result;




   __asm volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
# 1001 "../../lib/cmsis/inc/cmsis_gcc.h"
  return result;
}
# 1011 "../../lib/cmsis/inc/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint8_t __CLZ(uint32_t value)
{
# 1022 "../../lib/cmsis/inc/cmsis_gcc.h"
  if (value == 0U)
  {
    return 32U;
  }
  return __builtin_clz(value);
}
# 1040 "../../lib/cmsis/inc/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint8_t __LDREXB(volatile uint8_t *addr)
{
    uint32_t result;


   __asm volatile ("ldrexb %0, %1" : "=r" (result) : "Q" (*addr) );






   return ((uint8_t) result);
}
# 1062 "../../lib/cmsis/inc/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint16_t __LDREXH(volatile uint16_t *addr)
{
    uint32_t result;


   __asm volatile ("ldrexh %0, %1" : "=r" (result) : "Q" (*addr) );






   return ((uint16_t) result);
}
# 1084 "../../lib/cmsis/inc/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __asm volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
   return(result);
}
# 1101 "../../lib/cmsis/inc/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __STREXB(uint8_t value, volatile uint8_t *addr)
{
   uint32_t result;

   __asm volatile ("strexb %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
   return(result);
}
# 1118 "../../lib/cmsis/inc/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __STREXH(uint16_t value, volatile uint16_t *addr)
{
   uint32_t result;

   __asm volatile ("strexh %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
   return(result);
}
# 1135 "../../lib/cmsis/inc/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __asm volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
   return(result);
}






__attribute__((always_inline)) static inline void __CLREX(void)
{
  __asm volatile ("clrex" ::: "memory");
}
# 1201 "../../lib/cmsis/inc/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __RRX(uint32_t value)
{
  uint32_t result;

  __asm volatile ("rrx %0, %1" : "=r" (result) : "r" (value) );
  return(result);
}
# 1216 "../../lib/cmsis/inc/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint8_t __LDRBT(volatile uint8_t *ptr)
{
    uint32_t result;


   __asm volatile ("ldrbt %0, %1" : "=r" (result) : "Q" (*ptr) );






   return ((uint8_t) result);
}
# 1238 "../../lib/cmsis/inc/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint16_t __LDRHT(volatile uint16_t *ptr)
{
    uint32_t result;


   __asm volatile ("ldrht %0, %1" : "=r" (result) : "Q" (*ptr) );






   return ((uint16_t) result);
}
# 1260 "../../lib/cmsis/inc/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __LDRT(volatile uint32_t *ptr)
{
    uint32_t result;

   __asm volatile ("ldrt %0, %1" : "=r" (result) : "Q" (*ptr) );
   return(result);
}
# 1275 "../../lib/cmsis/inc/cmsis_gcc.h"
__attribute__((always_inline)) static inline void __STRBT(uint8_t value, volatile uint8_t *ptr)
{
   __asm volatile ("strbt %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
}
# 1287 "../../lib/cmsis/inc/cmsis_gcc.h"
__attribute__((always_inline)) static inline void __STRHT(uint16_t value, volatile uint16_t *ptr)
{
   __asm volatile ("strht %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
}
# 1299 "../../lib/cmsis/inc/cmsis_gcc.h"
__attribute__((always_inline)) static inline void __STRT(uint32_t value, volatile uint32_t *ptr)
{
   __asm volatile ("strt %1, %0" : "=Q" (*ptr) : "r" (value) );
}
# 1554 "../../lib/cmsis/inc/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __SADD8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("sadd8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __QADD8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("qadd8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SHADD8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("shadd8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UADD8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uadd8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UQADD8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uqadd8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UHADD8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uhadd8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}


__attribute__((always_inline)) static inline uint32_t __SSUB8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("ssub8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __QSUB8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("qsub8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SHSUB8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("shsub8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __USUB8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("usub8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UQSUB8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uqsub8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UHSUB8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uhsub8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}


__attribute__((always_inline)) static inline uint32_t __SADD16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __QADD16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SHADD16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UADD16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UQADD16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uqadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UHADD16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uhadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SSUB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("ssub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __QSUB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SHSUB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("shsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __USUB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("usub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UQSUB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uqsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UHSUB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uhsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SASX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("sasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __QASX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("qasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SHASX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("shasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UASX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UQASX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uqasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UHASX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uhasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SSAX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("ssax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __QSAX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("qsax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SHSAX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("shsax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __USAX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("usax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UQSAX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uqsax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UHSAX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uhsax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __USAD8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("usad8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __USADA8(uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __asm volatile ("usada8 %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
  return(result);
}
# 1874 "../../lib/cmsis/inc/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __UXTB16(uint32_t op1)
{
  uint32_t result;

  __asm volatile ("uxtb16 %0, %1" : "=r" (result) : "r" (op1));
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UXTAB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SXTB16(uint32_t op1)
{
  uint32_t result;

  __asm volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SXTAB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SMUAD (uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("smuad %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SMUADX (uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("smuadx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SMLAD (uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __asm volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SMLADX (uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __asm volatile ("smladx %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
  return(result);
}

__attribute__((always_inline)) static inline uint64_t __SMLALD (uint32_t op1, uint32_t op2, uint64_t acc)
{
  union llreg_u{
    uint32_t w32[2];
    uint64_t w64;
  } llr;
  llr.w64 = acc;


  __asm volatile ("smlald %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );




  return(llr.w64);
}

__attribute__((always_inline)) static inline uint64_t __SMLALDX (uint32_t op1, uint32_t op2, uint64_t acc)
{
  union llreg_u{
    uint32_t w32[2];
    uint64_t w64;
  } llr;
  llr.w64 = acc;


  __asm volatile ("smlaldx %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );




  return(llr.w64);
}

__attribute__((always_inline)) static inline uint32_t __SMUSD (uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("smusd %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SMUSDX (uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("smusdx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SMLSD (uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __asm volatile ("smlsd %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SMLSDX (uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __asm volatile ("smlsdx %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
  return(result);
}

__attribute__((always_inline)) static inline uint64_t __SMLSLD (uint32_t op1, uint32_t op2, uint64_t acc)
{
  union llreg_u{
    uint32_t w32[2];
    uint64_t w64;
  } llr;
  llr.w64 = acc;


  __asm volatile ("smlsld %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );




  return(llr.w64);
}

__attribute__((always_inline)) static inline uint64_t __SMLSLDX (uint32_t op1, uint32_t op2, uint64_t acc)
{
  union llreg_u{
    uint32_t w32[2];
    uint64_t w64;
  } llr;
  llr.w64 = acc;


  __asm volatile ("smlsldx %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );




  return(llr.w64);
}

__attribute__((always_inline)) static inline uint32_t __SEL (uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("sel %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline int32_t __QADD( int32_t op1, int32_t op2)
{
  int32_t result;

  __asm volatile ("qadd %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline int32_t __QSUB( int32_t op1, int32_t op2)
{
  int32_t result;

  __asm volatile ("qsub %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}
# 2087 "../../lib/cmsis/inc/cmsis_gcc.h"
__attribute__((always_inline)) static inline int32_t __SMMLA (int32_t op1, int32_t op2, int32_t op3)
{
 int32_t result;

 __asm volatile ("smmla %0, %1, %2, %3" : "=r" (result): "r" (op1), "r" (op2), "r" (op3) );
 return(result);
}





#pragma GCC diagnostic pop
# 55 "../../lib/cmsis/inc/cmsis_compiler.h" 2
# 163 "../../lib/cmsis/inc/core_cm4.h" 2
# 259 "../../lib/cmsis/inc/core_cm4.h"
typedef union
{
  struct
  {
    uint32_t _reserved0:16;
    uint32_t GE:4;
    uint32_t _reserved1:7;
    uint32_t Q:1;
    uint32_t V:1;
    uint32_t C:1;
    uint32_t Z:1;
    uint32_t N:1;
  } b;
  uint32_t w;
} APSR_Type;
# 298 "../../lib/cmsis/inc/core_cm4.h"
typedef union
{
  struct
  {
    uint32_t ISR:9;
    uint32_t _reserved0:23;
  } b;
  uint32_t w;
} IPSR_Type;
# 316 "../../lib/cmsis/inc/core_cm4.h"
typedef union
{
  struct
  {
    uint32_t ISR:9;
    uint32_t _reserved0:1;
    uint32_t ICI_IT_1:6;
    uint32_t GE:4;
    uint32_t _reserved1:4;
    uint32_t T:1;
    uint32_t ICI_IT_2:2;
    uint32_t Q:1;
    uint32_t V:1;
    uint32_t C:1;
    uint32_t Z:1;
    uint32_t N:1;
  } b;
  uint32_t w;
} xPSR_Type;
# 371 "../../lib/cmsis/inc/core_cm4.h"
typedef union
{
  struct
  {
    uint32_t nPRIV:1;
    uint32_t SPSEL:1;
    uint32_t FPCA:1;
    uint32_t _reserved0:29;
  } b;
  uint32_t w;
} CONTROL_Type;
# 406 "../../lib/cmsis/inc/core_cm4.h"
typedef struct
{
  volatile uint32_t ISER[8U];
        uint32_t RESERVED0[24U];
  volatile uint32_t ICER[8U];
        uint32_t RESERVED1[24U];
  volatile uint32_t ISPR[8U];
        uint32_t RESERVED2[24U];
  volatile uint32_t ICPR[8U];
        uint32_t RESERVED3[24U];
  volatile uint32_t IABR[8U];
        uint32_t RESERVED4[56U];
  volatile uint8_t IP[240U];
        uint32_t RESERVED5[644U];
  volatile uint32_t STIR;
} NVIC_Type;
# 440 "../../lib/cmsis/inc/core_cm4.h"
typedef struct
{
  volatile const uint32_t CPUID;
  volatile uint32_t ICSR;
  volatile uint32_t VTOR;
  volatile uint32_t AIRCR;
  volatile uint32_t SCR;
  volatile uint32_t CCR;
  volatile uint8_t SHP[12U];
  volatile uint32_t SHCSR;
  volatile uint32_t CFSR;
  volatile uint32_t HFSR;
  volatile uint32_t DFSR;
  volatile uint32_t MMFAR;
  volatile uint32_t BFAR;
  volatile uint32_t AFSR;
  volatile const uint32_t PFR[2U];
  volatile const uint32_t DFR;
  volatile const uint32_t ADR;
  volatile const uint32_t MMFR[4U];
  volatile const uint32_t ISAR[5U];
        uint32_t RESERVED0[5U];
  volatile uint32_t CPACR;
} SCB_Type;
# 719 "../../lib/cmsis/inc/core_cm4.h"
typedef struct
{
        uint32_t RESERVED0[1U];
  volatile const uint32_t ICTR;
  volatile uint32_t ACTLR;
} SCnSCB_Type;
# 759 "../../lib/cmsis/inc/core_cm4.h"
typedef struct
{
  volatile uint32_t CTRL;
  volatile uint32_t LOAD;
  volatile uint32_t VAL;
  volatile const uint32_t CALIB;
} SysTick_Type;
# 811 "../../lib/cmsis/inc/core_cm4.h"
typedef struct
{
  volatile union
  {
    volatile uint8_t u8;
    volatile uint16_t u16;
    volatile uint32_t u32;
  } PORT [32U];
        uint32_t RESERVED0[864U];
  volatile uint32_t TER;
        uint32_t RESERVED1[15U];
  volatile uint32_t TPR;
        uint32_t RESERVED2[15U];
  volatile uint32_t TCR;
        uint32_t RESERVED3[32U];
        uint32_t RESERVED4[43U];
  volatile uint32_t LAR;
  volatile const uint32_t LSR;
        uint32_t RESERVED5[6U];
  volatile const uint32_t PID4;
  volatile const uint32_t PID5;
  volatile const uint32_t PID6;
  volatile const uint32_t PID7;
  volatile const uint32_t PID0;
  volatile const uint32_t PID1;
  volatile const uint32_t PID2;
  volatile const uint32_t PID3;
  volatile const uint32_t CID0;
  volatile const uint32_t CID1;
  volatile const uint32_t CID2;
  volatile const uint32_t CID3;
} ITM_Type;
# 899 "../../lib/cmsis/inc/core_cm4.h"
typedef struct
{
  volatile uint32_t CTRL;
  volatile uint32_t CYCCNT;
  volatile uint32_t CPICNT;
  volatile uint32_t EXCCNT;
  volatile uint32_t SLEEPCNT;
  volatile uint32_t LSUCNT;
  volatile uint32_t FOLDCNT;
  volatile const uint32_t PCSR;
  volatile uint32_t COMP0;
  volatile uint32_t MASK0;
  volatile uint32_t FUNCTION0;
        uint32_t RESERVED0[1U];
  volatile uint32_t COMP1;
  volatile uint32_t MASK1;
  volatile uint32_t FUNCTION1;
        uint32_t RESERVED1[1U];
  volatile uint32_t COMP2;
  volatile uint32_t MASK2;
  volatile uint32_t FUNCTION2;
        uint32_t RESERVED2[1U];
  volatile uint32_t COMP3;
  volatile uint32_t MASK3;
  volatile uint32_t FUNCTION3;
} DWT_Type;
# 1046 "../../lib/cmsis/inc/core_cm4.h"
typedef struct
{
  volatile const uint32_t SSPSR;
  volatile uint32_t CSPSR;
        uint32_t RESERVED0[2U];
  volatile uint32_t ACPR;
        uint32_t RESERVED1[55U];
  volatile uint32_t SPPR;
        uint32_t RESERVED2[131U];
  volatile const uint32_t FFSR;
  volatile uint32_t FFCR;
  volatile const uint32_t FSCR;
        uint32_t RESERVED3[759U];
  volatile const uint32_t TRIGGER;
  volatile const uint32_t FIFO0;
  volatile const uint32_t ITATBCTR2;
        uint32_t RESERVED4[1U];
  volatile const uint32_t ITATBCTR0;
  volatile const uint32_t FIFO1;
  volatile uint32_t ITCTRL;
        uint32_t RESERVED5[39U];
  volatile uint32_t CLAIMSET;
  volatile uint32_t CLAIMCLR;
        uint32_t RESERVED7[8U];
  volatile const uint32_t DEVID;
  volatile const uint32_t DEVTYPE;
} TPI_Type;
# 1208 "../../lib/cmsis/inc/core_cm4.h"
typedef struct
{
  volatile const uint32_t TYPE;
  volatile uint32_t CTRL;
  volatile uint32_t RNR;
  volatile uint32_t RBAR;
  volatile uint32_t RASR;
  volatile uint32_t RBAR_A1;
  volatile uint32_t RASR_A1;
  volatile uint32_t RBAR_A2;
  volatile uint32_t RASR_A2;
  volatile uint32_t RBAR_A3;
  volatile uint32_t RASR_A3;
} MPU_Type;
# 1304 "../../lib/cmsis/inc/core_cm4.h"
typedef struct
{
        uint32_t RESERVED0[1U];
  volatile uint32_t FPCCR;
  volatile uint32_t FPCAR;
  volatile uint32_t FPDSCR;
  volatile const uint32_t MVFR0;
  volatile const uint32_t MVFR1;
  volatile const uint32_t MVFR2;
} FPU_Type;
# 1416 "../../lib/cmsis/inc/core_cm4.h"
typedef struct
{
  volatile uint32_t DHCSR;
  volatile uint32_t DCRSR;
  volatile uint32_t DCRDR;
  volatile uint32_t DEMCR;
} CoreDebug_Type;
# 1648 "../../lib/cmsis/inc/core_cm4.h"
static inline void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);

  reg_value = ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->AIRCR;
  reg_value &= ~((uint32_t)((0xFFFFUL << 16U) | (7UL << 8U)));
  reg_value = (reg_value |
                ((uint32_t)0x5FAUL << 16U) |
                (PriorityGroupTmp << 8U) );
  ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->AIRCR = reg_value;
}







static inline uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->AIRCR & (7UL << 8U)) >> 8U));
}
# 1679 "../../lib/cmsis/inc/core_cm4.h"
static inline void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  }
}
# 1696 "../../lib/cmsis/inc/core_cm4.h"
static inline uint32_t __NVIC_GetEnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    return((uint32_t)(((((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ISER[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
  }
  else
  {
    return(0U);
  }
}
# 1715 "../../lib/cmsis/inc/core_cm4.h"
static inline void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    __DSB();
    __ISB();
  }
}
# 1734 "../../lib/cmsis/inc/core_cm4.h"
static inline uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    return((uint32_t)(((((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ISPR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
  }
  else
  {
    return(0U);
  }
}
# 1753 "../../lib/cmsis/inc/core_cm4.h"
static inline void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  }
}
# 1768 "../../lib/cmsis/inc/core_cm4.h"
static inline void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  }
}
# 1785 "../../lib/cmsis/inc/core_cm4.h"
static inline uint32_t __NVIC_GetActive(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    return((uint32_t)(((((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->IABR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
  }
  else
  {
    return(0U);
  }
}
# 1807 "../../lib/cmsis/inc/core_cm4.h"
static inline void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->IP[((uint32_t)IRQn)] = (uint8_t)((priority << (8U - 4)) & (uint32_t)0xFFUL);
  }
  else
  {
    ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - 4)) & (uint32_t)0xFFUL);
  }
}
# 1829 "../../lib/cmsis/inc/core_cm4.h"
static inline uint32_t __NVIC_GetPriority(IRQn_Type IRQn)
{

  if ((int32_t)(IRQn) >= 0)
  {
    return(((uint32_t)((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->IP[((uint32_t)IRQn)] >> (8U - 4)));
  }
  else
  {
    return(((uint32_t)((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] >> (8U - 4)));
  }
}
# 1854 "../../lib/cmsis/inc/core_cm4.h"
static inline uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(4)) ? (uint32_t)(4) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits = ((PriorityGroupTmp + (uint32_t)(4)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(4));

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority & (uint32_t)((1UL << (SubPriorityBits )) - 1UL)))
         );
}
# 1881 "../../lib/cmsis/inc/core_cm4.h"
static inline void NVIC_DecodePriority (uint32_t Priority, uint32_t PriorityGroup, uint32_t* const pPreemptPriority, uint32_t* const pSubPriority)
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(4)) ? (uint32_t)(4) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits = ((PriorityGroupTmp + (uint32_t)(4)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(4));

  *pPreemptPriority = (Priority >> SubPriorityBits) & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL);
  *pSubPriority = (Priority ) & (uint32_t)((1UL << (SubPriorityBits )) - 1UL);
}
# 1904 "../../lib/cmsis/inc/core_cm4.h"
static inline void __NVIC_SetVector(IRQn_Type IRQn, uint32_t vector)
{
  uint32_t vectors = (uint32_t )((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->VTOR;
  (* (int *) (vectors + ((int32_t)IRQn + 16) * 4)) = vector;
}
# 1919 "../../lib/cmsis/inc/core_cm4.h"
static inline uint32_t __NVIC_GetVector(IRQn_Type IRQn)
{
  uint32_t vectors = (uint32_t )((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->VTOR;
  return (uint32_t)(* (int *) (vectors + ((int32_t)IRQn + 16) * 4));
}






__attribute__((__noreturn__)) static inline void __NVIC_SystemReset(void)
{
  __DSB();

  ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->AIRCR = (uint32_t)((0x5FAUL << 16U) |
                           (((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->AIRCR & (7UL << 8U)) |
                            (1UL << 2U) );
  __DSB();

  for(;;)
  {
    __asm volatile ("nop");
  }
}
# 1952 "../../lib/cmsis/inc/core_cm4.h"
# 1 "../../lib/cmsis/inc/mpu_armv7.h" 1
# 183 "../../lib/cmsis/inc/mpu_armv7.h"
typedef struct {
  uint32_t RBAR;
  uint32_t RASR;
} ARM_MPU_Region_t;




static inline void ARM_MPU_Enable(uint32_t MPU_Control)
{
  ((MPU_Type *) ((0xE000E000UL) + 0x0D90UL) )->CTRL = MPU_Control | (1UL );

  ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->SHCSR |= (1UL << 16U);

  __DSB();
  __ISB();
}



static inline void ARM_MPU_Disable(void)
{
  __DMB();

  ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->SHCSR &= ~(1UL << 16U);

  ((MPU_Type *) ((0xE000E000UL) + 0x0D90UL) )->CTRL &= ~(1UL );
}




static inline void ARM_MPU_ClrRegion(uint32_t rnr)
{
  ((MPU_Type *) ((0xE000E000UL) + 0x0D90UL) )->RNR = rnr;
  ((MPU_Type *) ((0xE000E000UL) + 0x0D90UL) )->RASR = 0U;
}





static inline void ARM_MPU_SetRegion(uint32_t rbar, uint32_t rasr)
{
  ((MPU_Type *) ((0xE000E000UL) + 0x0D90UL) )->RBAR = rbar;
  ((MPU_Type *) ((0xE000E000UL) + 0x0D90UL) )->RASR = rasr;
}






static inline void ARM_MPU_SetRegionEx(uint32_t rnr, uint32_t rbar, uint32_t rasr)
{
  ((MPU_Type *) ((0xE000E000UL) + 0x0D90UL) )->RNR = rnr;
  ((MPU_Type *) ((0xE000E000UL) + 0x0D90UL) )->RBAR = rbar;
  ((MPU_Type *) ((0xE000E000UL) + 0x0D90UL) )->RASR = rasr;
}






static inline void ARM_MPU_OrderedMemcpy(volatile uint32_t* dst, const uint32_t* __restrict src, uint32_t len)
{
  uint32_t i;
  for (i = 0U; i < len; ++i)
  {
    dst[i] = src[i];
  }
}





static inline void ARM_MPU_Load(ARM_MPU_Region_t const* table, uint32_t cnt)
{
  const uint32_t rowWordSize = sizeof(ARM_MPU_Region_t)/4U;
  while (cnt > 4U) {
    ARM_MPU_OrderedMemcpy(&(((MPU_Type *) ((0xE000E000UL) + 0x0D90UL) )->RBAR), &(table->RBAR), 4U*rowWordSize);
    table += 4U;
    cnt -= 4U;
  }
  ARM_MPU_OrderedMemcpy(&(((MPU_Type *) ((0xE000E000UL) + 0x0D90UL) )->RBAR), &(table->RBAR), cnt*rowWordSize);
}
# 1953 "../../lib/cmsis/inc/core_cm4.h" 2
# 1973 "../../lib/cmsis/inc/core_cm4.h"
static inline uint32_t SCB_GetFPUType(void)
{
  uint32_t mvfr0;

  mvfr0 = ((FPU_Type *) ((0xE000E000UL) + 0x0F30UL) )->MVFR0;
  if ((mvfr0 & ((0xFUL << 4U) | (0xFUL << 8U))) == 0x020U)
  {
    return 1U;
  }
  else
  {
    return 0U;
  }
}
# 2014 "../../lib/cmsis/inc/core_cm4.h"
static inline uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > (0xFFFFFFUL ))
  {
    return (1UL);
  }

  ((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->LOAD = (uint32_t)(ticks - 1UL);
  __NVIC_SetPriority (SysTick_IRQn, (1UL << 4) - 1UL);
  ((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->VAL = 0UL;
  ((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->CTRL = (1UL << 2U) |
                   (1UL << 1U) |
                   (1UL );
  return (0UL);
}
# 2044 "../../lib/cmsis/inc/core_cm4.h"
extern volatile int32_t ITM_RxBuffer;
# 2056 "../../lib/cmsis/inc/core_cm4.h"
static inline uint32_t ITM_SendChar (uint32_t ch)
{
  if (((((ITM_Type *) (0xE0000000UL) )->TCR & (1UL )) != 0UL) &&
      ((((ITM_Type *) (0xE0000000UL) )->TER & 1UL ) != 0UL) )
  {
    while (((ITM_Type *) (0xE0000000UL) )->PORT[0U].u32 == 0UL)
    {
      __asm volatile ("nop");
    }
    ((ITM_Type *) (0xE0000000UL) )->PORT[0U].u8 = (uint8_t)ch;
  }
  return (ch);
}
# 2077 "../../lib/cmsis/inc/core_cm4.h"
static inline int32_t ITM_ReceiveChar (void)
{
  int32_t ch = -1;

  if (ITM_RxBuffer != ((int32_t)0x5AA55AA5U))
  {
    ch = ITM_RxBuffer;
    ITM_RxBuffer = ((int32_t)0x5AA55AA5U);
  }

  return (ch);
}
# 2097 "../../lib/cmsis/inc/core_cm4.h"
static inline int32_t ITM_CheckChar (void)
{

  if (ITM_RxBuffer == ((int32_t)0x5AA55AA5U))
  {
    return (0);
  }
  else
  {
    return (1);
  }
}
# 175 "../../lib/stm32lib/CMSIS/STM32L4xx/Include/stm32l4r9xx.h" 2
# 1 "../../lib/stm32lib/CMSIS/STM32L4xx/Include/system_stm32l4xx.h" 1
# 58 "../../lib/stm32lib/CMSIS/STM32L4xx/Include/system_stm32l4xx.h"
extern uint32_t SystemCoreClock;

extern const uint8_t AHBPrescTable[16];
extern const uint8_t APBPrescTable[8];
extern const uint32_t MSIRangeTable[12];
# 88 "../../lib/stm32lib/CMSIS/STM32L4xx/Include/system_stm32l4xx.h"
extern void SystemInit(void);
extern void SystemCoreClockUpdate(void);
# 176 "../../lib/stm32lib/CMSIS/STM32L4xx/Include/stm32l4r9xx.h" 2
# 186 "../../lib/stm32lib/CMSIS/STM32L4xx/Include/stm32l4r9xx.h"
typedef struct
{
  volatile uint32_t ISR;
  volatile uint32_t IER;
  volatile uint32_t CR;
  volatile uint32_t CFGR;
  volatile uint32_t CFGR2;
  volatile uint32_t SMPR1;
  volatile uint32_t SMPR2;
       uint32_t RESERVED1;
  volatile uint32_t TR1;
  volatile uint32_t TR2;
  volatile uint32_t TR3;
       uint32_t RESERVED2;
  volatile uint32_t SQR1;
  volatile uint32_t SQR2;
  volatile uint32_t SQR3;
  volatile uint32_t SQR4;
  volatile uint32_t DR;
       uint32_t RESERVED3;
       uint32_t RESERVED4;
  volatile uint32_t JSQR;
       uint32_t RESERVED5[4];
  volatile uint32_t OFR1;
  volatile uint32_t OFR2;
  volatile uint32_t OFR3;
  volatile uint32_t OFR4;
       uint32_t RESERVED6[4];
  volatile uint32_t JDR1;
  volatile uint32_t JDR2;
  volatile uint32_t JDR3;
  volatile uint32_t JDR4;
       uint32_t RESERVED7[4];
  volatile uint32_t AWD2CR;
  volatile uint32_t AWD3CR;
       uint32_t RESERVED8;
       uint32_t RESERVED9;
  volatile uint32_t DIFSEL;
  volatile uint32_t CALFACT;

} ADC_TypeDef;

typedef struct
{
  uint32_t RESERVED1;
  uint32_t RESERVED2;
  volatile uint32_t CCR;
  uint32_t RESERVED3;
} ADC_Common_TypeDef;





typedef struct
{
  volatile uint32_t CR;
  volatile uint32_t SR;
  volatile uint32_t RISR;
  volatile uint32_t IER;
  volatile uint32_t MISR;
  volatile uint32_t ICR;
  volatile uint32_t ESCR;
  volatile uint32_t ESUR;
  volatile uint32_t CWSTRTR;
  volatile uint32_t CWSIZER;
  volatile uint32_t DR;
} DCMI_TypeDef;





typedef struct
{
  volatile uint32_t TIR;
  volatile uint32_t TDTR;
  volatile uint32_t TDLR;
  volatile uint32_t TDHR;
} CAN_TxMailBox_TypeDef;





typedef struct
{
  volatile uint32_t RIR;
  volatile uint32_t RDTR;
  volatile uint32_t RDLR;
  volatile uint32_t RDHR;
} CAN_FIFOMailBox_TypeDef;





typedef struct
{
  volatile uint32_t FR1;
  volatile uint32_t FR2;
} CAN_FilterRegister_TypeDef;





typedef struct
{
  volatile uint32_t MCR;
  volatile uint32_t MSR;
  volatile uint32_t TSR;
  volatile uint32_t RF0R;
  volatile uint32_t RF1R;
  volatile uint32_t IER;
  volatile uint32_t ESR;
  volatile uint32_t BTR;
  uint32_t RESERVED0[88];
  CAN_TxMailBox_TypeDef sTxMailBox[3];
  CAN_FIFOMailBox_TypeDef sFIFOMailBox[2];
  uint32_t RESERVED1[12];
  volatile uint32_t FMR;
  volatile uint32_t FM1R;
  uint32_t RESERVED2;
  volatile uint32_t FS1R;
  uint32_t RESERVED3;
  volatile uint32_t FFA1R;
  uint32_t RESERVED4;
  volatile uint32_t FA1R;
  uint32_t RESERVED5[8];
  CAN_FilterRegister_TypeDef sFilterRegister[28];
} CAN_TypeDef;






typedef struct
{
  volatile uint32_t CSR;
} COMP_TypeDef;

typedef struct
{
  volatile uint32_t CSR;
} COMP_Common_TypeDef;





typedef struct
{
  volatile uint32_t DR;
  volatile uint32_t IDR;
  volatile uint32_t CR;
  uint32_t RESERVED2;
  volatile uint32_t INIT;
  volatile uint32_t POL;
} CRC_TypeDef;




typedef struct
{
volatile uint32_t CR;
volatile uint32_t CFGR;
volatile uint32_t ISR;
volatile uint32_t ICR;
} CRS_TypeDef;





typedef struct
{
  volatile uint32_t CR;
  volatile uint32_t SWTRIGR;
  volatile uint32_t DHR12R1;
  volatile uint32_t DHR12L1;
  volatile uint32_t DHR8R1;
  volatile uint32_t DHR12R2;
  volatile uint32_t DHR12L2;
  volatile uint32_t DHR8R2;
  volatile uint32_t DHR12RD;
  volatile uint32_t DHR12LD;
  volatile uint32_t DHR8RD;
  volatile uint32_t DOR1;
  volatile uint32_t DOR2;
  volatile uint32_t SR;
  volatile uint32_t CCR;
  volatile uint32_t MCR;
  volatile uint32_t SHSR1;
  volatile uint32_t SHSR2;
  volatile uint32_t SHHR;
  volatile uint32_t SHRR;
} DAC_TypeDef;




typedef struct
{
  volatile uint32_t FLTCR1;
  volatile uint32_t FLTCR2;
  volatile uint32_t FLTISR;
  volatile uint32_t FLTICR;
  volatile uint32_t FLTJCHGR;
  volatile uint32_t FLTFCR;
  volatile uint32_t FLTJDATAR;
  volatile uint32_t FLTRDATAR;
  volatile uint32_t FLTAWHTR;
  volatile uint32_t FLTAWLTR;
  volatile uint32_t FLTAWSR;
  volatile uint32_t FLTAWCFR;
  volatile uint32_t FLTEXMAX;
  volatile uint32_t FLTEXMIN;
  volatile uint32_t FLTCNVTIMR;
} DFSDM_Filter_TypeDef;




typedef struct
{
  volatile uint32_t CHCFGR1;
  volatile uint32_t CHCFGR2;
  volatile uint32_t CHAWSCDR;

  volatile uint32_t CHWDATAR;
  volatile uint32_t CHDATINR;
  volatile uint32_t CHDLYR;
} DFSDM_Channel_TypeDef;





typedef struct
{
  volatile uint32_t IDCODE;
  volatile uint32_t CR;
  volatile uint32_t APB1FZR1;
  volatile uint32_t APB1FZR2;
  volatile uint32_t APB2FZ;
} DBGMCU_TypeDef;






typedef struct
{
  volatile uint32_t CCR;
  volatile uint32_t CNDTR;
  volatile uint32_t CPAR;
  volatile uint32_t CMAR;
} DMA_Channel_TypeDef;

typedef struct
{
  volatile uint32_t ISR;
  volatile uint32_t IFCR;
} DMA_TypeDef;





typedef struct
{
  volatile uint32_t CCR;
}DMAMUX_Channel_TypeDef;

typedef struct
{
  volatile uint32_t CSR;
  volatile uint32_t CFR;
}DMAMUX_ChannelStatus_TypeDef;

typedef struct
{
  volatile uint32_t RGCR;
}DMAMUX_RequestGen_TypeDef;

typedef struct
{
  volatile uint32_t RGSR;
  volatile uint32_t RGCFR;
}DMAMUX_RequestGenStatus_TypeDef;






typedef struct
{
  volatile uint32_t CR;
  volatile uint32_t ISR;
  volatile uint32_t IFCR;
  volatile uint32_t FGMAR;
  volatile uint32_t FGOR;
  volatile uint32_t BGMAR;
  volatile uint32_t BGOR;
  volatile uint32_t FGPFCCR;
  volatile uint32_t FGCOLR;
  volatile uint32_t BGPFCCR;
  volatile uint32_t BGCOLR;
  volatile uint32_t FGCMAR;
  volatile uint32_t BGCMAR;
  volatile uint32_t OPFCCR;
  volatile uint32_t OCOLR;
  volatile uint32_t OMAR;
  volatile uint32_t OOR;
  volatile uint32_t NLR;
  volatile uint32_t LWR;
  volatile uint32_t AMTCR;
  uint32_t RESERVED[236];
  volatile uint32_t FGCLUT[256];
  volatile uint32_t BGCLUT[256];
} DMA2D_TypeDef;





typedef struct
{
  volatile uint32_t VR;
  volatile uint32_t CR;
  volatile uint32_t CCR;
  volatile uint32_t LVCIDR;
  volatile uint32_t LCOLCR;
  volatile uint32_t LPCR;
  volatile uint32_t LPMCR;
  uint32_t RESERVED0[4];
  volatile uint32_t PCR;
  volatile uint32_t GVCIDR;
  volatile uint32_t MCR;
  volatile uint32_t VMCR;
  volatile uint32_t VPCR;
  volatile uint32_t VCCR;
  volatile uint32_t VNPCR;
  volatile uint32_t VHSACR;
  volatile uint32_t VHBPCR;
  volatile uint32_t VLCR;
  volatile uint32_t VVSACR;
  volatile uint32_t VVBPCR;
  volatile uint32_t VVFPCR;
  volatile uint32_t VVACR;
  volatile uint32_t LCCR;
  volatile uint32_t CMCR;
  volatile uint32_t GHCR;
  volatile uint32_t GPDR;
  volatile uint32_t GPSR;
  volatile uint32_t TCCR[6];
  uint32_t RESERVED1;
  volatile uint32_t CLCR;
  volatile uint32_t CLTCR;
  volatile uint32_t DLTCR;
  volatile uint32_t PCTLR;
  volatile uint32_t PCONFR;
  volatile uint32_t PUCR;
  volatile uint32_t PTTCR;
  volatile uint32_t PSR;
  uint32_t RESERVED2[2];
  volatile uint32_t ISR[2];
  volatile uint32_t IER[2];
  uint32_t RESERVED3[3];
  volatile uint32_t FIR[2];
  uint32_t RESERVED4[8];
  volatile uint32_t VSCR;
  uint32_t RESERVED5[2];
  volatile uint32_t LCVCIDR;
  volatile uint32_t LCCCR;
  uint32_t RESERVED6;
  volatile uint32_t LPMCCR;
  uint32_t RESERVED7[7];
  volatile uint32_t VMCCR;
  volatile uint32_t VPCCR;
  volatile uint32_t VCCCR;
  volatile uint32_t VNPCCR;
  volatile uint32_t VHSACCR;
  volatile uint32_t VHBPCCR;
  volatile uint32_t VLCCR;
  volatile uint32_t VVSACCR;
  volatile uint32_t VVBPCCR;
  volatile uint32_t VVFPCCR;
  volatile uint32_t VVACCR;
  uint32_t RESERVED8[167];
  volatile uint32_t WCFGR;
  volatile uint32_t WCR;
  volatile uint32_t WIER;
  volatile uint32_t WISR;
  volatile uint32_t WIFCR;
  uint32_t RESERVED9;
  volatile uint32_t WPCR[5];
  uint32_t RESERVED10;
  volatile uint32_t WRPCR;
} DSI_TypeDef;





typedef struct
{
  volatile uint32_t IMR1;
  volatile uint32_t EMR1;
  volatile uint32_t RTSR1;
  volatile uint32_t FTSR1;
  volatile uint32_t SWIER1;
  volatile uint32_t PR1;
  uint32_t RESERVED1;
  uint32_t RESERVED2;
  volatile uint32_t IMR2;
  volatile uint32_t EMR2;
  volatile uint32_t RTSR2;
  volatile uint32_t FTSR2;
  volatile uint32_t SWIER2;
  volatile uint32_t PR2;
} EXTI_TypeDef;






typedef struct
{
  volatile uint32_t CSSA;
  volatile uint32_t CSL;
  volatile uint32_t NVDSSA;
  volatile uint32_t NVDSL;
  volatile uint32_t VDSSA ;
  volatile uint32_t VDSL ;
  uint32_t RESERVED1;
  uint32_t RESERVED2;
  volatile uint32_t CR ;
} FIREWALL_TypeDef;






typedef struct
{
  volatile uint32_t ACR;
  volatile uint32_t PDKEYR;
  volatile uint32_t KEYR;
  volatile uint32_t OPTKEYR;
  volatile uint32_t SR;
  volatile uint32_t CR;
  volatile uint32_t ECCR;
  volatile uint32_t RESERVED1;
  volatile uint32_t OPTR;
  volatile uint32_t PCROP1SR;
  volatile uint32_t PCROP1ER;
  volatile uint32_t WRP1AR;
  volatile uint32_t WRP1BR;
       uint32_t RESERVED2[4];
  volatile uint32_t PCROP2SR;
  volatile uint32_t PCROP2ER;
  volatile uint32_t WRP2AR;
  volatile uint32_t WRP2BR;
       uint32_t RESERVED3[55];
  volatile uint32_t CFGR;
} FLASH_TypeDef;






typedef struct
{
  volatile uint32_t BTCR[8];
} FMC_Bank1_TypeDef;





typedef struct
{
  volatile uint32_t BWTR[7];
} FMC_Bank1E_TypeDef;





typedef struct
{
  volatile uint32_t PCR;
  volatile uint32_t SR;
  volatile uint32_t PMEM;
  volatile uint32_t PATT;
  uint32_t RESERVED0;
  volatile uint32_t ECCR;
} FMC_Bank3_TypeDef;





typedef struct
{
  volatile uint32_t CR;
  volatile uint32_t SR;
  volatile uint32_t FCR;
       uint32_t RESERVED0;
  volatile uint32_t DVR;
       uint32_t RESERVED1[3];
  volatile uint32_t B0CR;
  volatile uint32_t B1CR;
  volatile uint32_t B2CR;
  volatile uint32_t B3CR;
       uint32_t RESERVED2[1012];
  volatile uint32_t LUT[2048];

} GFXMMU_TypeDef;





typedef struct
{
  volatile uint32_t MODER;
  volatile uint32_t OTYPER;
  volatile uint32_t OSPEEDR;
  volatile uint32_t PUPDR;
  volatile uint32_t IDR;
  volatile uint32_t ODR;
  volatile uint32_t BSRR;
  volatile uint32_t LCKR;
  volatile uint32_t AFR[2];
  volatile uint32_t BRR;

} GPIO_TypeDef;






typedef struct
{
  volatile uint32_t CR1;
  volatile uint32_t CR2;
  volatile uint32_t OAR1;
  volatile uint32_t OAR2;
  volatile uint32_t TIMINGR;
  volatile uint32_t TIMEOUTR;
  volatile uint32_t ISR;
  volatile uint32_t ICR;
  volatile uint32_t PECR;
  volatile uint32_t RXDR;
  volatile uint32_t TXDR;
} I2C_TypeDef;





typedef struct
{
  volatile uint32_t KR;
  volatile uint32_t PR;
  volatile uint32_t RLR;
  volatile uint32_t SR;
  volatile uint32_t WINR;
} IWDG_TypeDef;




typedef struct
{
  volatile uint32_t ISR;
  volatile uint32_t ICR;
  volatile uint32_t IER;
  volatile uint32_t CFGR;
  volatile uint32_t CR;
  volatile uint32_t CMP;
  volatile uint32_t ARR;
  volatile uint32_t CNT;
  volatile uint32_t OR;
} LPTIM_TypeDef;





typedef struct
{
  uint32_t RESERVED0[2];
  volatile uint32_t SSCR;
  volatile uint32_t BPCR;
  volatile uint32_t AWCR;
  volatile uint32_t TWCR;
  volatile uint32_t GCR;
  uint32_t RESERVED1[2];
  volatile uint32_t SRCR;
  uint32_t RESERVED2[1];
  volatile uint32_t BCCR;
  uint32_t RESERVED3[1];
  volatile uint32_t IER;
  volatile uint32_t ISR;
  volatile uint32_t ICR;
  volatile uint32_t LIPCR;
  volatile uint32_t CPSR;
  volatile uint32_t CDSR;
} LTDC_TypeDef;





typedef struct
{
  volatile uint32_t CR;
  volatile uint32_t WHPCR;
  volatile uint32_t WVPCR;
  volatile uint32_t CKCR;
  volatile uint32_t PFCR;
  volatile uint32_t CACR;
  volatile uint32_t DCCR;
  volatile uint32_t BFCR;
  uint32_t RESERVED0[2];
  volatile uint32_t CFBAR;
  volatile uint32_t CFBLR;
  volatile uint32_t CFBLNR;
  uint32_t RESERVED1[3];
  volatile uint32_t CLUTWR;

} LTDC_Layer_TypeDef;





typedef struct
{
  volatile uint32_t CSR;
  volatile uint32_t OTR;
  volatile uint32_t LPOTR;
} OPAMP_TypeDef;

typedef struct
{
  volatile uint32_t CSR;
} OPAMP_Common_TypeDef;





typedef struct
{
  volatile uint32_t CR1;
  volatile uint32_t CR2;
  volatile uint32_t CR3;
  volatile uint32_t CR4;
  volatile uint32_t SR1;
  volatile uint32_t SR2;
  volatile uint32_t SCR;
  uint32_t RESERVED;
  volatile uint32_t PUCRA;
  volatile uint32_t PDCRA;
  volatile uint32_t PUCRB;
  volatile uint32_t PDCRB;
  volatile uint32_t PUCRC;
  volatile uint32_t PDCRC;
  volatile uint32_t PUCRD;
  volatile uint32_t PDCRD;
  volatile uint32_t PUCRE;
  volatile uint32_t PDCRE;
  volatile uint32_t PUCRF;
  volatile uint32_t PDCRF;
  volatile uint32_t PUCRG;
  volatile uint32_t PDCRG;
  volatile uint32_t PUCRH;
  volatile uint32_t PDCRH;
  volatile uint32_t PUCRI;
  volatile uint32_t PDCRI;
  uint32_t RESERVED1[6];
  volatile uint32_t CR5;
} PWR_TypeDef;






typedef struct
{
  volatile uint32_t CR;
  uint32_t RESERVED;
  volatile uint32_t DCR1;
  volatile uint32_t DCR2;
  volatile uint32_t DCR3;
  uint32_t RESERVED1[3];
  volatile uint32_t SR;
  volatile uint32_t FCR;
  uint32_t RESERVED2[6];
  volatile uint32_t DLR;
  uint32_t RESERVED3;
  volatile uint32_t AR;
  uint32_t RESERVED4;
  volatile uint32_t DR;
  uint32_t RESERVED5[11];
  volatile uint32_t PSMKR;
  uint32_t RESERVED6;
  volatile uint32_t PSMAR;
  uint32_t RESERVED7;
  volatile uint32_t PIR;
  uint32_t RESERVED8[27];
  volatile uint32_t CCR;
  uint32_t RESERVED9;
  volatile uint32_t TCR;
  uint32_t RESERVED10;
  volatile uint32_t IR;
  uint32_t RESERVED11[3];
  volatile uint32_t ABR;
  uint32_t RESERVED12[3];
  volatile uint32_t LPTR;
  uint32_t RESERVED13[19];
  volatile uint32_t WCCR;
  uint32_t RESERVED14;
  volatile uint32_t WTCR;
  uint32_t RESERVED15;
  volatile uint32_t WIR;
  uint32_t RESERVED16[3];
  volatile uint32_t WABR;
  uint32_t RESERVED17[23];
  volatile uint32_t HLCR;
} OCTOSPI_TypeDef;





typedef struct
{
  uint32_t RESERVED;
  volatile uint32_t PCR[2];
} OCTOSPIM_TypeDef;





typedef struct
{
  volatile uint32_t CR;
  volatile uint32_t ICSCR;
  volatile uint32_t CFGR;
  volatile uint32_t PLLCFGR;
  volatile uint32_t PLLSAI1CFGR;
  volatile uint32_t PLLSAI2CFGR;
  volatile uint32_t CIER;
  volatile uint32_t CIFR;
  volatile uint32_t CICR;
  uint32_t RESERVED0;
  volatile uint32_t AHB1RSTR;
  volatile uint32_t AHB2RSTR;
  volatile uint32_t AHB3RSTR;
  uint32_t RESERVED1;
  volatile uint32_t APB1RSTR1;
  volatile uint32_t APB1RSTR2;
  volatile uint32_t APB2RSTR;
  uint32_t RESERVED2;
  volatile uint32_t AHB1ENR;
  volatile uint32_t AHB2ENR;
  volatile uint32_t AHB3ENR;
  uint32_t RESERVED3;
  volatile uint32_t APB1ENR1;
  volatile uint32_t APB1ENR2;
  volatile uint32_t APB2ENR;
  uint32_t RESERVED4;
  volatile uint32_t AHB1SMENR;
  volatile uint32_t AHB2SMENR;
  volatile uint32_t AHB3SMENR;
  uint32_t RESERVED5;
  volatile uint32_t APB1SMENR1;
  volatile uint32_t APB1SMENR2;
  volatile uint32_t APB2SMENR;
  uint32_t RESERVED6;
  volatile uint32_t CCIPR;
  uint32_t RESERVED7;
  volatile uint32_t BDCR;
  volatile uint32_t CSR;
  volatile uint32_t CRRCR;
  volatile uint32_t CCIPR2;
} RCC_TypeDef;





typedef struct
{
  volatile uint32_t TR;
  volatile uint32_t DR;
  volatile uint32_t CR;
  volatile uint32_t ISR;
  volatile uint32_t PRER;
  volatile uint32_t WUTR;
       uint32_t reserved;
  volatile uint32_t ALRMAR;
  volatile uint32_t ALRMBR;
  volatile uint32_t WPR;
  volatile uint32_t SSR;
  volatile uint32_t SHIFTR;
  volatile uint32_t TSTR;
  volatile uint32_t TSDR;
  volatile uint32_t TSSSR;
  volatile uint32_t CALR;
  volatile uint32_t TAMPCR;
  volatile uint32_t ALRMASSR;
  volatile uint32_t ALRMBSSR;
  volatile uint32_t OR;
  volatile uint32_t BKP0R;
  volatile uint32_t BKP1R;
  volatile uint32_t BKP2R;
  volatile uint32_t BKP3R;
  volatile uint32_t BKP4R;
  volatile uint32_t BKP5R;
  volatile uint32_t BKP6R;
  volatile uint32_t BKP7R;
  volatile uint32_t BKP8R;
  volatile uint32_t BKP9R;
  volatile uint32_t BKP10R;
  volatile uint32_t BKP11R;
  volatile uint32_t BKP12R;
  volatile uint32_t BKP13R;
  volatile uint32_t BKP14R;
  volatile uint32_t BKP15R;
  volatile uint32_t BKP16R;
  volatile uint32_t BKP17R;
  volatile uint32_t BKP18R;
  volatile uint32_t BKP19R;
  volatile uint32_t BKP20R;
  volatile uint32_t BKP21R;
  volatile uint32_t BKP22R;
  volatile uint32_t BKP23R;
  volatile uint32_t BKP24R;
  volatile uint32_t BKP25R;
  volatile uint32_t BKP26R;
  volatile uint32_t BKP27R;
  volatile uint32_t BKP28R;
  volatile uint32_t BKP29R;
  volatile uint32_t BKP30R;
  volatile uint32_t BKP31R;
} RTC_TypeDef;





typedef struct
{
  volatile uint32_t GCR;
  uint32_t RESERVED[16];
  volatile uint32_t PDMCR;
  volatile uint32_t PDMDLY;
} SAI_TypeDef;

typedef struct
{
  volatile uint32_t CR1;
  volatile uint32_t CR2;
  volatile uint32_t FRCR;
  volatile uint32_t SLOTR;
  volatile uint32_t IMR;
  volatile uint32_t SR;
  volatile uint32_t CLRFR;
  volatile uint32_t DR;
} SAI_Block_TypeDef;






typedef struct
{
  volatile uint32_t POWER;
  volatile uint32_t CLKCR;
  volatile uint32_t ARG;
  volatile uint32_t CMD;
  volatile const uint32_t RESPCMD;
  volatile const uint32_t RESP1;
  volatile const uint32_t RESP2;
  volatile const uint32_t RESP3;
  volatile const uint32_t RESP4;
  volatile uint32_t DTIMER;
  volatile uint32_t DLEN;
  volatile uint32_t DCTRL;
  volatile const uint32_t DCOUNT;
  volatile const uint32_t STA;
  volatile uint32_t ICR;
  volatile uint32_t MASK;
  volatile uint32_t ACKTIME;
  uint32_t RESERVED0[3];
  volatile uint32_t IDMACTRL;
  volatile uint32_t IDMABSIZE;
  volatile uint32_t IDMABASE0;
  volatile uint32_t IDMABASE1;
  uint32_t RESERVED1[8];
  volatile uint32_t FIFO;
} SDMMC_TypeDef;




typedef struct
{
  volatile uint32_t CR1;
  volatile uint32_t CR2;
  volatile uint32_t SR;
  volatile uint32_t DR;
  volatile uint32_t CRCPR;
  volatile uint32_t RXCRCR;
  volatile uint32_t TXCRCR;
} SPI_TypeDef;






typedef struct
{
  volatile uint32_t MEMRMP;
  volatile uint32_t CFGR1;
  volatile uint32_t EXTICR[4];
  volatile uint32_t SCSR;
  volatile uint32_t CFGR2;
  volatile uint32_t SWPR;
  volatile uint32_t SKR;
  volatile uint32_t SWPR2;
} SYSCFG_TypeDef;






typedef struct
{
  volatile uint32_t CR1;
  volatile uint32_t CR2;
  volatile uint32_t SMCR;
  volatile uint32_t DIER;
  volatile uint32_t SR;
  volatile uint32_t EGR;
  volatile uint32_t CCMR1;
  volatile uint32_t CCMR2;
  volatile uint32_t CCER;
  volatile uint32_t CNT;
  volatile uint32_t PSC;
  volatile uint32_t ARR;
  volatile uint32_t RCR;
  volatile uint32_t CCR1;
  volatile uint32_t CCR2;
  volatile uint32_t CCR3;
  volatile uint32_t CCR4;
  volatile uint32_t BDTR;
  volatile uint32_t DCR;
  volatile uint32_t DMAR;
  volatile uint32_t OR1;
  volatile uint32_t CCMR3;
  volatile uint32_t CCR5;
  volatile uint32_t CCR6;
  volatile uint32_t OR2;
  volatile uint32_t OR3;
} TIM_TypeDef;






typedef struct
{
  volatile uint32_t CR;
  volatile uint32_t IER;
  volatile uint32_t ICR;
  volatile uint32_t ISR;
  volatile uint32_t IOHCR;
  uint32_t RESERVED1;
  volatile uint32_t IOASCR;
  uint32_t RESERVED2;
  volatile uint32_t IOSCR;
  uint32_t RESERVED3;
  volatile uint32_t IOCCR;
  uint32_t RESERVED4;
  volatile uint32_t IOGCSR;
  volatile uint32_t IOGXCR[8];
} TSC_TypeDef;





typedef struct
{
  volatile uint32_t CR1;
  volatile uint32_t CR2;
  volatile uint32_t CR3;
  volatile uint32_t BRR;
  volatile uint16_t GTPR;
  uint16_t RESERVED2;
  volatile uint32_t RTOR;
  volatile uint16_t RQR;
  uint16_t RESERVED3;
  volatile uint32_t ISR;
  volatile uint32_t ICR;
  volatile uint16_t RDR;
  uint16_t RESERVED4;
  volatile uint16_t TDR;
  uint16_t RESERVED5;
  volatile uint32_t PRESC;
} USART_TypeDef;





typedef struct
{
  volatile uint32_t CSR;
  volatile uint32_t CCR;
} VREFBUF_TypeDef;





typedef struct
{
  volatile uint32_t CR;
  volatile uint32_t CFR;
  volatile uint32_t SR;
} WWDG_TypeDef;





typedef struct
{
  volatile uint32_t CR;
  volatile uint32_t SR;
  volatile uint32_t DR;
} RNG_TypeDef;




typedef struct
{
  volatile uint32_t GOTGCTL;
  volatile uint32_t GOTGINT;
  volatile uint32_t GAHBCFG;
  volatile uint32_t GUSBCFG;
  volatile uint32_t GRSTCTL;
  volatile uint32_t GINTSTS;
  volatile uint32_t GINTMSK;
  volatile uint32_t GRXSTSR;
  volatile uint32_t GRXSTSP;
  volatile uint32_t GRXFSIZ;
  volatile uint32_t DIEPTXF0_HNPTXFSIZ;
  volatile uint32_t HNPTXSTS;
  uint32_t Reserved30[2];
  volatile uint32_t GCCFG;
  volatile uint32_t CID;
  volatile uint32_t GSNPSID;
  volatile uint32_t GHWCFG1;
  volatile uint32_t GHWCFG2;
  volatile uint32_t GHWCFG3;
  uint32_t Reserved6;
  volatile uint32_t GLPMCFG;
  volatile uint32_t GPWRDN;
  volatile uint32_t GDFIFOCFG;
   volatile uint32_t GADPCTL;
    uint32_t Reserved43[39];
  volatile uint32_t HPTXFSIZ;
  volatile uint32_t DIEPTXF[0x0F];
} USB_OTG_GlobalTypeDef;




typedef struct
{
  volatile uint32_t DCFG;
  volatile uint32_t DCTL;
  volatile uint32_t DSTS;
  uint32_t Reserved0C;
  volatile uint32_t DIEPMSK;
  volatile uint32_t DOEPMSK;
  volatile uint32_t DAINT;
  volatile uint32_t DAINTMSK;
  uint32_t Reserved20;
  uint32_t Reserved24;
  volatile uint32_t DVBUSDIS;
  volatile uint32_t DVBUSPULSE;
  volatile uint32_t DTHRCTL;
  volatile uint32_t DIEPEMPMSK;
  volatile uint32_t DEACHINT;
  volatile uint32_t DEACHMSK;
  uint32_t Reserved40;
  volatile uint32_t DINEP1MSK;
  uint32_t Reserved44[15];
  volatile uint32_t DOUTEP1MSK;
} USB_OTG_DeviceTypeDef;




typedef struct
{
  volatile uint32_t DIEPCTL;
  uint32_t Reserved04;
  volatile uint32_t DIEPINT;
  uint32_t Reserved0C;
  volatile uint32_t DIEPTSIZ;
  volatile uint32_t DIEPDMA;
  volatile uint32_t DTXFSTS;
  uint32_t Reserved18;
} USB_OTG_INEndpointTypeDef;




typedef struct
{
  volatile uint32_t DOEPCTL;
  uint32_t Reserved04;
  volatile uint32_t DOEPINT;
  uint32_t Reserved0C;
  volatile uint32_t DOEPTSIZ;
  volatile uint32_t DOEPDMA;
  uint32_t Reserved18[2];
} USB_OTG_OUTEndpointTypeDef;




typedef struct
{
  volatile uint32_t HCFG;
  volatile uint32_t HFIR;
  volatile uint32_t HFNUM;
  uint32_t Reserved40C;
  volatile uint32_t HPTXSTS;
  volatile uint32_t HAINT;
  volatile uint32_t HAINTMSK;
} USB_OTG_HostTypeDef;




typedef struct
{
  volatile uint32_t HCCHAR;
  volatile uint32_t HCSPLT;
  volatile uint32_t HCINT;
  volatile uint32_t HCINTMSK;
  volatile uint32_t HCTSIZ;
  volatile uint32_t HCDMA;
  uint32_t Reserved[2];
} USB_OTG_HostChannelTypeDef;
# 163 "../../lib/stm32lib/CMSIS/STM32L4xx/Include/stm32l4xx.h" 2
# 180 "../../lib/stm32lib/CMSIS/STM32L4xx/Include/stm32l4xx.h"
typedef enum
{
  RESET = 0,
  SET = !RESET
} FlagStatus, ITStatus;

typedef enum
{
  DISABLE = 0,
  ENABLE = !DISABLE
} FunctionalState;


typedef enum
{
  SUCCESS = 0,
  ERROR = !SUCCESS
} ErrorStatus;
# 31 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_def.h" 2
# 1 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/Legacy/stm32_hal_legacy.h" 1
# 32 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_def.h" 2
# 1 "/usr/lib/gcc/arm-none-eabi/4.9.3/include/stddef.h" 1 3 4
# 147 "/usr/lib/gcc/arm-none-eabi/4.9.3/include/stddef.h" 3 4
typedef int ptrdiff_t;
# 212 "/usr/lib/gcc/arm-none-eabi/4.9.3/include/stddef.h" 3 4
typedef unsigned int size_t;
# 324 "/usr/lib/gcc/arm-none-eabi/4.9.3/include/stddef.h" 3 4
typedef unsigned int wchar_t;
# 33 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_def.h" 2






typedef enum
{
  HAL_OK = 0x00,
  HAL_ERROR = 0x01,
  HAL_BUSY = 0x02,
  HAL_TIMEOUT = 0x03
} HAL_StatusTypeDef;




typedef enum
{
  HAL_UNLOCKED = 0x00,
  HAL_LOCKED = 0x01
} HAL_LockTypeDef;
# 30 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_dma.h" 2
# 47 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_dma.h"
typedef struct
{
  uint32_t Request;


  uint32_t Direction;



  uint32_t PeriphInc;


  uint32_t MemInc;


  uint32_t PeriphDataAlignment;


  uint32_t MemDataAlignment;


  uint32_t Mode;




  uint32_t Priority;

} DMA_InitTypeDef;




typedef enum
{
  HAL_DMA_STATE_RESET = 0x00U,
  HAL_DMA_STATE_READY = 0x01U,
  HAL_DMA_STATE_BUSY = 0x02U,
  HAL_DMA_STATE_TIMEOUT = 0x03U,
}HAL_DMA_StateTypeDef;




typedef enum
{
  HAL_DMA_FULL_TRANSFER = 0x00U,
  HAL_DMA_HALF_TRANSFER = 0x01U
}HAL_DMA_LevelCompleteTypeDef;





typedef enum
{
  HAL_DMA_XFER_CPLT_CB_ID = 0x00U,
  HAL_DMA_XFER_HALFCPLT_CB_ID = 0x01U,
  HAL_DMA_XFER_ERROR_CB_ID = 0x02U,
  HAL_DMA_XFER_ABORT_CB_ID = 0x03U,
  HAL_DMA_XFER_ALL_CB_ID = 0x04U
}HAL_DMA_CallbackIDTypeDef;




typedef struct __DMA_HandleTypeDef
{
  DMA_Channel_TypeDef *Instance;

  DMA_InitTypeDef Init;

  HAL_LockTypeDef Lock;

  volatile HAL_DMA_StateTypeDef State;

  void *Parent;

  void (* XferCpltCallback)(struct __DMA_HandleTypeDef * hdma);

  void (* XferHalfCpltCallback)(struct __DMA_HandleTypeDef * hdma);

  void (* XferErrorCallback)(struct __DMA_HandleTypeDef * hdma);

  void (* XferAbortCallback)(struct __DMA_HandleTypeDef * hdma);

  volatile uint32_t ErrorCode;

  DMA_TypeDef *DmaBaseAddress;

  uint32_t ChannelIndex;


  DMAMUX_Channel_TypeDef *DMAmuxChannel;

  DMAMUX_ChannelStatus_TypeDef *DMAmuxChannelStatus;

  uint32_t DMAmuxChannelStatusMask;

  DMAMUX_RequestGen_TypeDef *DMAmuxRequestGen;

  DMAMUX_RequestGenStatus_TypeDef *DMAmuxRequestGenStatus;

  uint32_t DMAmuxRequestGenStatusMask;



}DMA_HandleTypeDef;
# 628 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_dma.h"
# 1 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_dma_ex.h" 1
# 54 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_dma_ex.h"
typedef struct
{
  uint32_t SyncSignalID;


  uint32_t SyncPolarity;


  FunctionalState SyncEnable;



  FunctionalState EventEnable;


  uint32_t RequestNumber;



}HAL_DMA_MuxSyncConfigTypeDef;





typedef struct
{
 uint32_t SignalID;


  uint32_t Polarity;


  uint32_t RequestNumber;


}HAL_DMA_MuxRequestGeneratorConfigTypeDef;
# 211 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_dma_ex.h"
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxRequestGenerator (DMA_HandleTypeDef *hdma,
             HAL_DMA_MuxRequestGeneratorConfigTypeDef *pRequestGeneratorConfig);
HAL_StatusTypeDef HAL_DMAEx_EnableMuxRequestGenerator (DMA_HandleTypeDef *hdma);
HAL_StatusTypeDef HAL_DMAEx_DisableMuxRequestGenerator (DMA_HandleTypeDef *hdma);



HAL_StatusTypeDef HAL_DMAEx_ConfigMuxSync(DMA_HandleTypeDef *hdma, HAL_DMA_MuxSyncConfigTypeDef *pSyncConfig);


void HAL_DMAEx_MUX_IRQHandler(DMA_HandleTypeDef *hdma);
# 629 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_dma.h" 2
# 641 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_dma.h"
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma);
HAL_StatusTypeDef HAL_DMA_DeInit (DMA_HandleTypeDef *hdma);
# 651 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_dma.h"
HAL_StatusTypeDef HAL_DMA_Start (DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength);
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength);
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma);
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma);
HAL_StatusTypeDef HAL_DMA_PollForTransfer(DMA_HandleTypeDef *hdma, HAL_DMA_LevelCompleteTypeDef CompleteLevel, uint32_t Timeout);
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma);
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)( DMA_HandleTypeDef * _hdma));
HAL_StatusTypeDef HAL_DMA_UnRegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID);
# 668 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_dma.h"
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma);
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma);
# 31 "./boards/stm32l4xx_hal_conf_base.h" 2
# 1 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_adc.h" 1
# 32 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_adc.h"
# 1 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_adc.h" 1
# 2388 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_adc.h"
static inline uint32_t LL_ADC_DMA_GetRegAddr(ADC_TypeDef *ADCx, uint32_t Register)
{

  (void)(Register);


  return (uint32_t) &(ADCx->DR);
}
# 2440 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_adc.h"
static inline void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
  (((ADCxy_COMMON->CCR)) = ((((((ADCxy_COMMON->CCR))) & (~((0x3UL << (16U)) | (0xFUL << (18U))))) | (CommonClock))));
}
# 2468 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_adc.h"
static inline uint32_t LL_ADC_GetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON)
{
  return (uint32_t)(((ADCxy_COMMON->CCR) & ((0x3UL << (16U)) | (0xFUL << (18U)))));
}
# 2502 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_adc.h"
static inline void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
  (((ADCxy_COMMON->CCR)) = ((((((ADCxy_COMMON->CCR))) & (~((0x1UL << (22U)) | (0x1UL << (23U)) | (0x1UL << (24U))))) | (PathInternal))));
}
# 2524 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_adc.h"
static inline uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
  return (uint32_t)(((ADCxy_COMMON->CCR) & ((0x1UL << (22U)) | (0x1UL << (23U)) | (0x1UL << (24U)))));
}
# 2568 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_adc.h"
static inline void LL_ADC_SetCalibrationFactor(ADC_TypeDef *ADCx, uint32_t SingleDiff, uint32_t CalibrationFactor)
{
  (((ADCx->CALFACT)) = ((((((ADCx->CALFACT))) & (~(SingleDiff & ((0x7FUL << (16U)) | (0x7FUL << (0U)))))) | (CalibrationFactor << (((SingleDiff & (0x00010000UL)) >> ((16UL) - 4UL)) & ~(SingleDiff & (0x7FUL << (0U))))))))

                                                                                                                                                                      ;
}
# 2591 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_adc.h"
static inline uint32_t LL_ADC_GetCalibrationFactor(ADC_TypeDef *ADCx, uint32_t SingleDiff)
{




  return (uint32_t)(((ADCx->CALFACT) & ((SingleDiff & ((0x7FUL << (16U)) | (0x7FUL << (0U)))))) >> ((SingleDiff & (0x00010000UL)) >> ((16UL) - 4UL)));
}
# 2617 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_adc.h"
static inline void LL_ADC_SetResolution(ADC_TypeDef *ADCx, uint32_t Resolution)
{
  (((ADCx->CFGR)) = ((((((ADCx->CFGR))) & (~((0x3UL << (3U))))) | (Resolution))));
}
# 2634 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_adc.h"
static inline uint32_t LL_ADC_GetResolution(ADC_TypeDef *ADCx)
{
  return (uint32_t)(((ADCx->CFGR) & ((0x3UL << (3U)))));
}
# 2654 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_adc.h"
static inline void LL_ADC_SetDataAlignment(ADC_TypeDef *ADCx, uint32_t DataAlignment)
{
  (((ADCx->CFGR)) = ((((((ADCx->CFGR))) & (~((0x1UL << (5U))))) | (DataAlignment))));
}
# 2669 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_adc.h"
static inline uint32_t LL_ADC_GetDataAlignment(ADC_TypeDef *ADCx)
{
  return (uint32_t)(((ADCx->CFGR) & ((0x1UL << (5U)))));
}
# 2722 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_adc.h"
static inline void LL_ADC_SetLowPowerMode(ADC_TypeDef *ADCx, uint32_t LowPowerMode)
{
  (((ADCx->CFGR)) = ((((((ADCx->CFGR))) & (~((0x1UL << (14U))))) | (LowPowerMode))));
}
# 2770 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_adc.h"
static inline uint32_t LL_ADC_GetLowPowerMode(ADC_TypeDef *ADCx)
{
  return (uint32_t)(((ADCx->CFGR) & ((0x1UL << (14U)))));
}
# 2855 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_adc.h"
static inline void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
  register volatile uint32_t *preg = ((volatile uint32_t *)((uint32_t) ((uint32_t)(&(ADCx->OFR1)) + ((Offsety) << 2UL))));

  (((*preg)) = ((((((*preg))) & (~((0x1UL << (31U)) | (0x1FUL << (26U)) | (0xFFFUL << (0U))))) | ((0x1UL << (31U)) | (Channel & ((0x1FUL << (26U)))) | OffsetLevel))))

                                                                                        ;
}
# 2934 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_adc.h"
static inline uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
  register const volatile uint32_t *preg = ((volatile uint32_t *)((uint32_t) ((uint32_t)(&(ADCx->OFR1)) + ((Offsety) << 2UL))));

  return (uint32_t) ((*preg) & ((0x1FUL << (26U))));
}
# 2960 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_adc.h"
static inline uint32_t LL_ADC_GetOffsetLevel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
  register const volatile uint32_t *preg = ((volatile uint32_t *)((uint32_t) ((uint32_t)(&(ADCx->OFR1)) + ((Offsety) << 2UL))));

  return (uint32_t) ((*preg) & ((0xFFFUL << (0U))));
}
# 2993 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_adc.h"
static inline void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
  register volatile uint32_t *preg = ((volatile uint32_t *)((uint32_t) ((uint32_t)(&(ADCx->OFR1)) + ((Offsety) << 2UL))));

  (((*preg)) = ((((((*preg))) & (~((0x1UL << (31U))))) | (OffsetState))))

                         ;
}
# 3019 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_adc.h"
static inline uint32_t LL_ADC_GetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety)
{
  register const volatile uint32_t *preg = ((volatile uint32_t *)((uint32_t) ((uint32_t)(&(ADCx->OFR1)) + ((Offsety) << 2UL))));

  return (uint32_t) ((*preg) & ((0x1UL << (31U))));
}
# 3041 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_adc.h"
static inline void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
  (((ADCx->SMPR1)) = ((((((ADCx->SMPR1))) & (~((0x1UL << (31U))))) | (SamplingTimeCommonConfig))));
}
# 3055 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_adc.h"
static inline uint32_t LL_ADC_GetSamplingTimeCommonConfig(ADC_TypeDef *ADCx)
{
  return (uint32_t)(((ADCx->SMPR1) & ((0x1UL << (31U)))));
}
# 3108 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_adc.h"
static inline void LL_ADC_REG_SetTriggerSource(ADC_TypeDef *ADCx, uint32_t TriggerSource)
{
  (((ADCx->CFGR)) = ((((((ADCx->CFGR))) & (~((0x3UL << (10U)) | (0xFUL << (6U))))) | (TriggerSource))));
}
# 3147 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_adc.h"
static inline uint32_t LL_ADC_REG_GetTriggerSource(ADC_TypeDef *ADCx)
{
  register volatile uint32_t TriggerSource = ((ADCx->CFGR) & ((0xFUL << (6U)) | (0x3UL << (10U))));



  register uint32_t ShiftExten = ((TriggerSource & (0x3UL << (10U))) >> ((10UL) - 2UL));



  return ((TriggerSource
           & (((((0x00000000UL) & (0xFUL << (6U))) << (4U * 0UL)) | (((0xFUL << (6U))) << (4U * 1UL)) | (((0xFUL << (6U))) << (4U * 2UL)) | (((0xFUL << (6U))) << (4U * 3UL)) ) >> ShiftExten) & (0xFUL << (6U)))
          | ((((((0x00000000UL) & (0x3UL << (10U))) << (4U * 0UL)) | ((((0x1UL << (10U)))) << (4U * 1UL)) | ((((0x1UL << (10U)))) << (4U * 2UL)) | ((((0x1UL << (10U)))) << (4U * 3UL)) ) >> ShiftExten) & (0x3UL << (10U)))
         );
}
# 3174 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_adc.h"
static inline uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
  return ((((ADCx->CFGR) & ((0x3UL << (10U)))) == ((0x00000000UL) & (0x3UL << (10U)))) ? 1UL : 0UL);
}
# 3194 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_adc.h"
static inline void LL_ADC_REG_SetTriggerEdge(ADC_TypeDef *ADCx, uint32_t ExternalTriggerEdge)
{
  (((ADCx->CFGR)) = ((((((ADCx->CFGR))) & (~((0x3UL << (10U))))) | (ExternalTriggerEdge))));
}
# 3209 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_adc.h"
static inline uint32_t LL_ADC_REG_GetTriggerEdge(ADC_TypeDef *ADCx)
{
  return (uint32_t)(((ADCx->CFGR) & ((0x3UL << (10U)))));
}
# 3268 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_adc.h"
static inline void LL_ADC_REG_SetSequencerLength(ADC_TypeDef *ADCx, uint32_t SequencerNbRanks)
{
  (((ADCx->SQR1)) = ((((((ADCx->SQR1))) & (~((0xFUL << (0U))))) | (SequencerNbRanks))));
}
# 3322 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_adc.h"
static inline uint32_t LL_ADC_REG_GetSequencerLength(ADC_TypeDef *ADCx)
{
  return (uint32_t)(((ADCx->SQR1) & ((0xFUL << (0U)))));
}
# 3354 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_adc.h"
static inline void LL_ADC_REG_SetSequencerDiscont(ADC_TypeDef *ADCx, uint32_t SeqDiscont)
{
  (((ADCx->CFGR)) = ((((((ADCx->CFGR))) & (~((0x1UL << (16U)) | (0x7UL << (17U))))) | (SeqDiscont))));
}
# 3377 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_adc.h"
static inline uint32_t LL_ADC_REG_GetSequencerDiscont(ADC_TypeDef *ADCx)
{
  return (uint32_t)(((ADCx->CFGR) & ((0x1UL << (16U)) | (0x7UL << (17U)))));
}
# 3476 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_adc.h"
static inline void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{




  register volatile uint32_t *preg = ((volatile uint32_t *)((uint32_t) ((uint32_t)(&(ADCx->SQR1)) + ((((Rank & ((0x00000000UL) | (0x00000100UL) | (0x00000200UL) | (0x00000300UL))) >> (8UL))) << 2UL))));

  (((*preg)) = ((((((*preg))) & (~(((0x1FUL << (0U))) << (Rank & (((0x1FUL << (0U)))))))) | (((Channel & ((0x1FUL << (26U)))) >> (26UL)) << (Rank & (((0x1FUL << (0U)))))))))

                                                                                                                                   ;
}
# 3585 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_adc.h"
static inline uint32_t LL_ADC_REG_GetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank)
{
  register const volatile uint32_t *preg = ((volatile uint32_t *)((uint32_t) ((uint32_t)(&(ADCx->SQR1)) + ((((Rank & ((0x00000000UL) | (0x00000100UL) | (0x00000200UL) | (0x00000300UL))) >> (8UL))) << 2UL))));

  return (uint32_t)((((*preg) & (((0x1FUL << (0U))) << (Rank & (((0x1FUL << (0U)))))))

                     >> (Rank & (((0x1FUL << (0U)))))) << (26UL)
                   );
}
# 3614 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_adc.h"
static inline void LL_ADC_REG_SetContinuousMode(ADC_TypeDef *ADCx, uint32_t Continuous)
{
  (((ADCx->CFGR)) = ((((((ADCx->CFGR))) & (~((0x1UL << (13U))))) | (Continuous))));
}
# 3631 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_adc.h"
static inline uint32_t LL_ADC_REG_GetContinuousMode(ADC_TypeDef *ADCx)
{
  return (uint32_t)(((ADCx->CFGR) & ((0x1UL << (13U)))));
}
# 3671 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_adc.h"
static inline void LL_ADC_REG_SetDMATransfer(ADC_TypeDef *ADCx, uint32_t DMATransfer)
{
  (((ADCx->CFGR)) = ((((((ADCx->CFGR))) & (~((0x1UL << (0U)) | (0x1UL << (1U))))) | (DMATransfer))));
}
# 3706 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_adc.h"
static inline uint32_t LL_ADC_REG_GetDMATransfer(ADC_TypeDef *ADCx)
{
  return (uint32_t)(((ADCx->CFGR) & ((0x1UL << (0U)) | (0x1UL << (1U)))));
}
# 3729 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_adc.h"
static inline void LL_ADC_REG_SetDFSDMTransfer(ADC_TypeDef *ADCx, uint32_t DFSDMTransfer)
{
  (((ADCx->CFGR)) = ((((((ADCx->CFGR))) & (~((0x1UL << (2U))))) | (DFSDMTransfer))));
}
# 3742 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_adc.h"
static inline uint32_t LL_ADC_REG_GetDFSDMTransfer(ADC_TypeDef *ADCx)
{
  return (uint32_t)(((ADCx->CFGR) & ((0x1UL << (2U)))));
}
# 3768 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_adc.h"
static inline void LL_ADC_REG_SetOverrun(ADC_TypeDef *ADCx, uint32_t Overrun)
{
  (((ADCx->CFGR)) = ((((((ADCx->CFGR))) & (~((0x1UL << (12U))))) | (Overrun))));
}
# 3782 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_adc.h"
static inline uint32_t LL_ADC_REG_GetOverrun(ADC_TypeDef *ADCx)
{
  return (uint32_t)(((ADCx->CFGR) & ((0x1UL << (12U)))));
}
# 3834 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_adc.h"
static inline void LL_ADC_INJ_SetTriggerSource(ADC_TypeDef *ADCx, uint32_t TriggerSource)
{
  (((ADCx->JSQR)) = ((((((ADCx->JSQR))) & (~((0xFUL << (2U)) | (0x3UL << (6U))))) | (TriggerSource))));
}
# 3873 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_adc.h"
static inline uint32_t LL_ADC_INJ_GetTriggerSource(ADC_TypeDef *ADCx)
{
  register volatile uint32_t TriggerSource = ((ADCx->JSQR) & ((0xFUL << (2U)) | (0x3UL << (6U))));



  register uint32_t ShiftJexten = ((TriggerSource & (0x3UL << (6U))) >> (( 6UL) - 2UL));



  return ((TriggerSource
           & (((((0x00000000UL) & (0xFUL << (2U))) << (4U * 0UL)) | (((0xFUL << (2U))) << (4U * 1UL)) | (((0xFUL << (2U))) << (4U * 2UL)) | (((0xFUL << (2U))) << (4U * 3UL)) ) >> ShiftJexten) & (0xFUL << (2U)))
          | ((((((0x00000000UL) & (0x3UL << (6U))) << (4U * 0UL)) | ((((0x1UL << (6U)))) << (4U * 1UL)) | ((((0x1UL << (6U)))) << (4U * 2UL)) | ((((0x1UL << (6U)))) << (4U * 3UL)) ) >> ShiftJexten) & (0x3UL << (6U)))
         );
}
# 3900 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_adc.h"
static inline uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
  return ((((ADCx->JSQR) & ((0x3UL << (6U)))) == ((0x00000000UL) & (0x3UL << (6U)))) ? 1UL : 0UL);
}
# 3920 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_adc.h"
static inline void LL_ADC_INJ_SetTriggerEdge(ADC_TypeDef *ADCx, uint32_t ExternalTriggerEdge)
{
  (((ADCx->JSQR)) = ((((((ADCx->JSQR))) & (~((0x3UL << (6U))))) | (ExternalTriggerEdge))));
}
# 3935 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_adc.h"
static inline uint32_t LL_ADC_INJ_GetTriggerEdge(ADC_TypeDef *ADCx)
{
  return (uint32_t)(((ADCx->JSQR) & ((0x3UL << (6U)))));
}
# 3961 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_adc.h"
static inline void LL_ADC_INJ_SetSequencerLength(ADC_TypeDef *ADCx, uint32_t SequencerNbRanks)
{
  (((ADCx->JSQR)) = ((((((ADCx->JSQR))) & (~((0x3UL << (0U))))) | (SequencerNbRanks))));
}
# 3982 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_adc.h"
static inline uint32_t LL_ADC_INJ_GetSequencerLength(ADC_TypeDef *ADCx)
{
  return (uint32_t)(((ADCx->JSQR) & ((0x3UL << (0U)))));
}
# 4000 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_adc.h"
static inline void LL_ADC_INJ_SetSequencerDiscont(ADC_TypeDef *ADCx, uint32_t SeqDiscont)
{
  (((ADCx->CFGR)) = ((((((ADCx->CFGR))) & (~((0x1UL << (20U))))) | (SeqDiscont))));
}
# 4015 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_adc.h"
static inline uint32_t LL_ADC_INJ_GetSequencerDiscont(ADC_TypeDef *ADCx)
{
  return (uint32_t)(((ADCx->CFGR) & ((0x1UL << (20U)))));
}
# 4085 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_adc.h"
static inline void LL_ADC_INJ_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{




  (((ADCx->JSQR)) = ((((((ADCx->JSQR))) & (~((((0x1FUL << (26U))) >> (26UL)) << (Rank & (((0x1FUL << (0U)))))))) | (((Channel & ((0x1FUL << (26U)))) >> (26UL)) << (Rank & (((0x1FUL << (0U)))))))))

                                                                                                                                   ;
}
# 4164 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_adc.h"
static inline uint32_t LL_ADC_INJ_GetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank)
{
  return (uint32_t)((((ADCx->JSQR) & ((((0x1FUL << (26U))) >> (26UL)) << (Rank & (((0x1FUL << (0U)))))))

                     >> (Rank & (((0x1FUL << (0U)))))) << (26UL)
                   );
}
# 4202 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_adc.h"
static inline void LL_ADC_INJ_SetTrigAuto(ADC_TypeDef *ADCx, uint32_t TrigAuto)
{
  (((ADCx->CFGR)) = ((((((ADCx->CFGR))) & (~((0x1UL << (25U))))) | (TrigAuto))));
}
# 4216 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_adc.h"
static inline uint32_t LL_ADC_INJ_GetTrigAuto(ADC_TypeDef *ADCx)
{
  return (uint32_t)(((ADCx->CFGR) & ((0x1UL << (25U)))));
}
# 4262 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_adc.h"
static inline void LL_ADC_INJ_SetQueueMode(ADC_TypeDef *ADCx, uint32_t QueueMode)
{
  (((ADCx->CFGR)) = ((((((ADCx->CFGR))) & (~((0x1UL << (21U)) | (0x1UL << (31U))))) | (QueueMode))));
}
# 4277 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_adc.h"
static inline uint32_t LL_ADC_INJ_GetQueueMode(ADC_TypeDef *ADCx)
{
  return (uint32_t)(((ADCx->CFGR) & ((0x1UL << (21U)) | (0x1UL << (31U)))));
}
# 4501 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_adc.h"
static inline void LL_ADC_INJ_ConfigQueueContext(ADC_TypeDef *ADCx,
                                                   uint32_t TriggerSource,
                                                   uint32_t ExternalTriggerEdge,
                                                   uint32_t SequencerNbRanks,
                                                   uint32_t Rank1_Channel,
                                                   uint32_t Rank2_Channel,
                                                   uint32_t Rank3_Channel,
                                                   uint32_t Rank4_Channel)
{






  register uint32_t is_trigger_not_sw = (uint32_t)((TriggerSource != (0x00000000UL)) ? 1UL : 0UL);
  (((ADCx->JSQR)) = ((((((ADCx->JSQR))) & (~((0xFUL << (2U)) | (0x3UL << (6U)) | (0x1FUL << (26U)) | (0x1FUL << (20U)) | (0x1FUL << (14U)) | (0x1FUL << (8U)) | (0x3UL << (0U))))) | ((TriggerSource & (0xFUL << (2U))) | (ExternalTriggerEdge * (is_trigger_not_sw)) | (((Rank4_Channel & ((0x1FUL << (26U)))) >> (26UL)) << (((0x00000300UL) | (26UL)) & (((0x1FUL << (0U)))))) | (((Rank3_Channel & ((0x1FUL << (26U)))) >> (26UL)) << (((0x00000200UL) | (20UL)) & (((0x1FUL << (0U)))))) | (((Rank2_Channel & ((0x1FUL << (26U)))) >> (26UL)) << (((0x00000100UL) | (14UL)) & (((0x1FUL << (0U)))))) | (((Rank1_Channel & ((0x1FUL << (26U)))) >> (26UL)) << (((0x00000000UL) | ( 8UL)) & (((0x1FUL << (0U)))))) | SequencerNbRanks))))
# 4532 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_adc.h"
             ;
}
# 4642 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_adc.h"
static inline void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{




  register volatile uint32_t *preg = ((volatile uint32_t *)((uint32_t) ((uint32_t)(&(ADCx->SMPR1)) + ((((Channel & ((0x00000000UL) | (0x02000000UL))) >> (25UL))) << 2UL))));

  (((*preg)) = ((((((*preg))) & (~((0x7UL << (0U)) << ((Channel & (0x01F00000UL)) >> (20UL))))) | (SamplingTime << ((Channel & (0x01F00000UL)) >> (20UL))))))

                                                                                                               ;
}
# 4738 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_adc.h"
static inline uint32_t LL_ADC_GetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel)
{
  register const volatile uint32_t *preg = ((volatile uint32_t *)((uint32_t) ((uint32_t)(&(ADCx->SMPR1)) + ((((Channel & ((0x00000000UL) | (0x02000000UL))) >> (25UL))) << 2UL))));

  return (uint32_t)(((*preg) & ((0x7UL << (0U)) << ((Channel & (0x01F00000UL)) >> (20UL))))

                    >> ((Channel & (0x01F00000UL)) >> (20UL))
                   );
}
# 4796 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_adc.h"
static inline void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{



  (((ADCx->DIFSEL)) = ((((((ADCx->DIFSEL))) & (~(Channel & (((0x7FFFFUL << (0U))))))) | ((Channel & (((0x7FFFFUL << (0U))))) & ((0x7FFFFUL << (0U)) >> (SingleDiff & ((0x10UL << (0U)) | (0x08UL << (0U)))))))))

                                                                                                                               ;
}
# 4846 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_adc.h"
static inline uint32_t LL_ADC_GetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel)
{
  return (uint32_t)(((ADCx->DIFSEL) & ((Channel & (((0x7FFFFUL << (0U))))))));
}
# 5003 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_adc.h"
static inline void LL_ADC_SetAnalogWDMonitChannels(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDChannelGroup)
{




  register volatile uint32_t *preg = ((volatile uint32_t *)((uint32_t) ((uint32_t)(&(ADCx->CFGR)) + ((((AWDy & ((0x00000000UL) | (0x00100000UL) | (0x00200000UL))) >> (20UL)) + ((AWDy & ((0x00001UL << (0U)))) * (0x00000024UL))) << 2UL))))
                                                                                                                                  ;

  (((*preg)) = ((((((*preg))) & (~((AWDy & (((0x1FUL << (26U)) | (0x1UL << (24U)) | (0x1UL << (23U)) | (0x1UL << (22U))) | ((0x7FFFFUL << (0U)))))))) | (AWDChannelGroup & AWDy))))

                                    ;
}
# 5139 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_adc.h"
static inline uint32_t LL_ADC_GetAnalogWDMonitChannels(ADC_TypeDef *ADCx, uint32_t AWDy)
{
  register const volatile uint32_t *preg = ((volatile uint32_t *)((uint32_t) ((uint32_t)(&(ADCx->CFGR)) + ((((AWDy & ((0x00000000UL) | (0x00100000UL) | (0x00200000UL))) >> (20UL)) + ((AWDy & ((0x00001UL << (0U)))) * (0x00000024UL))) << 2UL))))
                                                                                                                                        ;

  register uint32_t AnalogWDMonitChannels = (((*preg) & (AWDy)) & AWDy & (((0x1FUL << (26U)) | (0x1UL << (24U)) | (0x1UL << (23U)) | (0x1UL << (22U))) | ((0x7FFFFUL << (0U)))));





  if (AnalogWDMonitChannels != 0UL)
  {
    if (AWDy == (((0x1FUL << (26U)) | (0x1UL << (24U)) | (0x1UL << (23U)) | (0x1UL << (22U))) | (0x00000000UL)))
    {
      if ((AnalogWDMonitChannels & (0x1UL << (22U))) == 0UL)
      {

        AnalogWDMonitChannels = ((AnalogWDMonitChannels
                                  | (((0x7FFFFUL << (0U))))
                                 )
                                 & (~((0x1FUL << (26U))))
                                );
      }
      else
      {

        AnalogWDMonitChannels = (AnalogWDMonitChannels
                                 | ((0x00001UL << (0U)) << (AnalogWDMonitChannels >> (26U)))
                                );
      }
    }
    else
    {
      if ((AnalogWDMonitChannels & ((0x7FFFFUL << (0U)))) == ((0x7FFFFUL << (0U))))
      {

        AnalogWDMonitChannels = (((0x7FFFFUL << (0U)))
                                 | (((0x1UL << (24U)) | (0x1UL << (23U))))
                                );
      }
      else
      {


        AnalogWDMonitChannels = (AnalogWDMonitChannels
                                 | ((0x1UL << (24U)) | (0x1UL << (23U)) | (0x1UL << (22U)))
                                 | (((((AnalogWDMonitChannels) & ((0x7FFFFUL << (0U)))) == 0UL) ? ( ((AnalogWDMonitChannels) & ((0x1FUL << (26U)))) >> (26UL) ) : ( (uint32_t)(__CLZ(__RBIT((AnalogWDMonitChannels)))) ) ) << (26U))
                                );
      }
    }
  }

  return AnalogWDMonitChannels;
}
# 5247 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_adc.h"
static inline void LL_ADC_ConfigAnalogWDThresholds(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDThresholdHighValue,
                                                     uint32_t AWDThresholdLowValue)
{





  register volatile uint32_t *preg = ((volatile uint32_t *)((uint32_t) ((uint32_t)(&(ADCx->TR1)) + ((((AWDy & (((0x00000000UL)) | ((0x00100000UL)) | ((0x00200000UL)))) >> ((20UL)))) << 2UL))));

  (((*preg)) = ((((((*preg))) & (~((0xFFFUL << (16U)) | (0xFFFUL << (0U))))) | ((AWDThresholdHighValue << (16UL)) | AWDThresholdLowValue))))

                                                                                         ;
}
# 5316 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_adc.h"
static inline void LL_ADC_SetAnalogWDThresholds(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDThresholdsHighLow,
                                                  uint32_t AWDThresholdValue)
{





  register volatile uint32_t *preg = ((volatile uint32_t *)((uint32_t) ((uint32_t)(&(ADCx->TR1)) + ((((AWDy & (((0x00000000UL)) | ((0x00100000UL)) | ((0x00200000UL)))) >> ((20UL)))) << 2UL))));

  (((*preg)) = ((((((*preg))) & (~(AWDThresholdsHighLow))) | (AWDThresholdValue << ((AWDThresholdsHighLow & (0x00010000UL)) >> ((16UL) - 4UL))))))

                                                                                                                      ;
}
# 5359 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_adc.h"
static inline uint32_t LL_ADC_GetAnalogWDThresholds(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDThresholdsHighLow)
{
  register const volatile uint32_t *preg = ((volatile uint32_t *)((uint32_t) ((uint32_t)(&(ADCx->TR1)) + ((((AWDy & (((0x00000000UL)) | ((0x00100000UL)) | ((0x00200000UL)))) >> ((20UL)))) << 2UL))));

  return (uint32_t)(((*preg) & ((AWDThresholdsHighLow | (0xFFFUL << (0U)))))

                    >> (((AWDThresholdsHighLow & (0x00010000UL)) >> ((16UL) - 4UL)) & ~(AWDThresholdsHighLow & (0xFFFUL << (0U))))
                   );
}
# 5402 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_adc.h"
static inline void LL_ADC_SetOverSamplingScope(ADC_TypeDef *ADCx, uint32_t OvsScope)
{
  (((ADCx->CFGR2)) = ((((((ADCx->CFGR2))) & (~((0x1UL << (0U)) | (0x1UL << (1U)) | (0x1UL << (10U))))) | (OvsScope))));
}
# 5427 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_adc.h"
static inline uint32_t LL_ADC_GetOverSamplingScope(ADC_TypeDef *ADCx)
{
  return (uint32_t)(((ADCx->CFGR2) & ((0x1UL << (0U)) | (0x1UL << (1U)) | (0x1UL << (10U)))));
}
# 5454 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_adc.h"
static inline void LL_ADC_SetOverSamplingDiscont(ADC_TypeDef *ADCx, uint32_t OverSamplingDiscont)
{
  (((ADCx->CFGR2)) = ((((((ADCx->CFGR2))) & (~((0x1UL << (9U))))) | (OverSamplingDiscont))));
}
# 5473 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_adc.h"
static inline uint32_t LL_ADC_GetOverSamplingDiscont(ADC_TypeDef *ADCx)
{
  return (uint32_t)(((ADCx->CFGR2) & ((0x1UL << (9U)))));
}
# 5512 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_adc.h"
static inline void LL_ADC_ConfigOverSamplingRatioShift(ADC_TypeDef *ADCx, uint32_t Ratio, uint32_t Shift)
{
  (((ADCx->CFGR2)) = ((((((ADCx->CFGR2))) & (~(((0xFUL << (5U)) | (0x7UL << (2U)))))) | ((Shift | Ratio)))));
}
# 5532 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_adc.h"
static inline uint32_t LL_ADC_GetOverSamplingRatio(ADC_TypeDef *ADCx)
{
  return (uint32_t)(((ADCx->CFGR2) & ((0x7UL << (2U)))));
}
# 5553 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_adc.h"
static inline uint32_t LL_ADC_GetOverSamplingShift(ADC_TypeDef *ADCx)
{
  return (uint32_t)(((ADCx->CFGR2) & ((0xFUL << (5U)))));
}
# 5796 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_adc.h"
static inline void LL_ADC_REG_SetTrigSource(ADC_TypeDef *ADCx, uint32_t TriggerSource)
{
  LL_ADC_REG_SetTriggerSource(ADCx, TriggerSource);
}
static inline void LL_ADC_INJ_SetTrigSource(ADC_TypeDef *ADCx, uint32_t TriggerSource)
{
  LL_ADC_INJ_SetTriggerSource(ADCx, TriggerSource);
}
# 5826 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_adc.h"
static inline void LL_ADC_EnableDeepPowerDown(ADC_TypeDef *ADCx)
{



  (((ADCx->CR)) = ((((((ADCx->CR))) & (~(((0x1UL << (31U)) | (0x1UL << (5U)) | (0x1UL << (4U)) | (0x1UL << (3U)) | (0x1UL << (2U)) | (0x1UL << (1U)) | (0x1UL << (0U)))))) | ((0x1UL << (29U))))))

                            ;
}
# 5849 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_adc.h"
static inline void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{



  ((ADCx->CR) &= ~(((0x1UL << (29U)) | ((0x1UL << (31U)) | (0x1UL << (5U)) | (0x1UL << (4U)) | (0x1UL << (3U)) | (0x1UL << (2U)) | (0x1UL << (1U)) | (0x1UL << (0U))))));
}







static inline uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
  return ((((ADCx->CR) & ((0x1UL << (29U)))) == ((0x1UL << (29U)))) ? 1UL : 0UL);
}
# 5882 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_adc.h"
static inline void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{



  (((ADCx->CR)) = ((((((ADCx->CR))) & (~(((0x1UL << (31U)) | (0x1UL << (5U)) | (0x1UL << (4U)) | (0x1UL << (3U)) | (0x1UL << (2U)) | (0x1UL << (1U)) | (0x1UL << (0U)))))) | ((0x1UL << (28U))))))

                             ;
}
# 5901 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_adc.h"
static inline void LL_ADC_DisableInternalRegulator(ADC_TypeDef *ADCx)
{
  ((ADCx->CR) &= ~(((0x1UL << (28U)) | ((0x1UL << (31U)) | (0x1UL << (5U)) | (0x1UL << (4U)) | (0x1UL << (3U)) | (0x1UL << (2U)) | (0x1UL << (1U)) | (0x1UL << (0U))))));
}







static inline uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((((ADCx->CR) & ((0x1UL << (28U)))) == ((0x1UL << (28U)))) ? 1UL : 0UL);
}
# 5933 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_adc.h"
static inline void LL_ADC_Enable(ADC_TypeDef *ADCx)
{



  (((ADCx->CR)) = ((((((ADCx->CR))) & (~(((0x1UL << (31U)) | (0x1UL << (5U)) | (0x1UL << (4U)) | (0x1UL << (3U)) | (0x1UL << (2U)) | (0x1UL << (1U)) | (0x1UL << (0U)))))) | ((0x1UL << (0U))))))

                         ;
}
# 5953 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_adc.h"
static inline void LL_ADC_Disable(ADC_TypeDef *ADCx)
{



  (((ADCx->CR)) = ((((((ADCx->CR))) & (~(((0x1UL << (31U)) | (0x1UL << (5U)) | (0x1UL << (4U)) | (0x1UL << (3U)) | (0x1UL << (2U)) | (0x1UL << (1U)) | (0x1UL << (0U)))))) | ((0x1UL << (1U))))))

                          ;
}
# 5972 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_adc.h"
static inline uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
  return ((((ADCx->CR) & ((0x1UL << (0U)))) == ((0x1UL << (0U)))) ? 1UL : 0UL);
}







static inline uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
  return ((((ADCx->CR) & ((0x1UL << (1U)))) == ((0x1UL << (1U)))) ? 1UL : 0UL);
}
# 6011 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_adc.h"
static inline void LL_ADC_StartCalibration(ADC_TypeDef *ADCx, uint32_t SingleDiff)
{



  (((ADCx->CR)) = ((((((ADCx->CR))) & (~((0x1UL << (30U)) | ((0x1UL << (31U)) | (0x1UL << (5U)) | (0x1UL << (4U)) | (0x1UL << (3U)) | (0x1UL << (2U)) | (0x1UL << (1U)) | (0x1UL << (0U)))))) | ((0x1UL << (31U)) | (SingleDiff & ((0x1UL << (30U))))))))

                                                                           ;
}







static inline uint32_t LL_ADC_IsCalibrationOnGoing(ADC_TypeDef *ADCx)
{
  return ((((ADCx->CR) & ((0x1UL << (31U)))) == ((0x1UL << (31U)))) ? 1UL : 0UL);
}
# 6058 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_adc.h"
static inline void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{



  (((ADCx->CR)) = ((((((ADCx->CR))) & (~(((0x1UL << (31U)) | (0x1UL << (5U)) | (0x1UL << (4U)) | (0x1UL << (3U)) | (0x1UL << (2U)) | (0x1UL << (1U)) | (0x1UL << (0U)))))) | ((0x1UL << (2U))))))

                            ;
}
# 6078 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_adc.h"
static inline void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{



  (((ADCx->CR)) = ((((((ADCx->CR))) & (~(((0x1UL << (31U)) | (0x1UL << (5U)) | (0x1UL << (4U)) | (0x1UL << (3U)) | (0x1UL << (2U)) | (0x1UL << (1U)) | (0x1UL << (0U)))))) | ((0x1UL << (4U))))))

                          ;
}







static inline uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((((ADCx->CR) & ((0x1UL << (2U)))) == ((0x1UL << (2U)))) ? 1UL : 0UL);
}







static inline uint32_t LL_ADC_REG_IsStopConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((((ADCx->CR) & ((0x1UL << (4U)))) == ((0x1UL << (4U)))) ? 1UL : 0UL);
}
# 6119 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_adc.h"
static inline uint32_t LL_ADC_REG_ReadConversionData32(ADC_TypeDef *ADCx)
{
  return (uint32_t)(((ADCx->DR) & ((0xFFFFUL << (0U)))));
}
# 6134 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_adc.h"
static inline uint16_t LL_ADC_REG_ReadConversionData12(ADC_TypeDef *ADCx)
{
  return (uint16_t)(((ADCx->DR) & ((0xFFFFUL << (0U)))));
}
# 6149 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_adc.h"
static inline uint16_t LL_ADC_REG_ReadConversionData10(ADC_TypeDef *ADCx)
{
  return (uint16_t)(((ADCx->DR) & ((0xFFFFUL << (0U)))));
}
# 6164 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_adc.h"
static inline uint8_t LL_ADC_REG_ReadConversionData8(ADC_TypeDef *ADCx)
{
  return (uint8_t)(((ADCx->DR) & ((0xFFFFUL << (0U)))));
}
# 6179 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_adc.h"
static inline uint8_t LL_ADC_REG_ReadConversionData6(ADC_TypeDef *ADCx)
{
  return (uint8_t)(((ADCx->DR) & ((0xFFFFUL << (0U)))));
}
# 6241 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_adc.h"
static inline void LL_ADC_INJ_StartConversion(ADC_TypeDef *ADCx)
{



  (((ADCx->CR)) = ((((((ADCx->CR))) & (~(((0x1UL << (31U)) | (0x1UL << (5U)) | (0x1UL << (4U)) | (0x1UL << (3U)) | (0x1UL << (2U)) | (0x1UL << (1U)) | (0x1UL << (0U)))))) | ((0x1UL << (3U))))))

                             ;
}
# 6261 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_adc.h"
static inline void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{



  (((ADCx->CR)) = ((((((ADCx->CR))) & (~(((0x1UL << (31U)) | (0x1UL << (5U)) | (0x1UL << (4U)) | (0x1UL << (3U)) | (0x1UL << (2U)) | (0x1UL << (1U)) | (0x1UL << (0U)))))) | ((0x1UL << (5U))))))

                           ;
}







static inline uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((((ADCx->CR) & ((0x1UL << (3U)))) == ((0x1UL << (3U)))) ? 1UL : 0UL);
}







static inline uint32_t LL_ADC_INJ_IsStopConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((((ADCx->CR) & ((0x1UL << (5U)))) == ((0x1UL << (5U)))) ? 1UL : 0UL);
}
# 6310 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_adc.h"
static inline uint32_t LL_ADC_INJ_ReadConversionData32(ADC_TypeDef *ADCx, uint32_t Rank)
{
  register const volatile uint32_t *preg = ((volatile uint32_t *)((uint32_t) ((uint32_t)(&(ADCx->JDR1)) + ((((Rank & ((0x00000000UL) | (0x00000100UL) | (0x00000200UL) | (0x00000300UL))) >> (8UL))) << 2UL))));

  return (uint32_t)(((*preg) & ((0xFFFFUL << (0U))))

                   );
}
# 6337 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_adc.h"
static inline uint16_t LL_ADC_INJ_ReadConversionData12(ADC_TypeDef *ADCx, uint32_t Rank)
{
  register const volatile uint32_t *preg = ((volatile uint32_t *)((uint32_t) ((uint32_t)(&(ADCx->JDR1)) + ((((Rank & ((0x00000000UL) | (0x00000100UL) | (0x00000200UL) | (0x00000300UL))) >> (8UL))) << 2UL))));

  return (uint16_t)(((*preg) & ((0xFFFFUL << (0U))))

                   );
}
# 6364 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_adc.h"
static inline uint16_t LL_ADC_INJ_ReadConversionData10(ADC_TypeDef *ADCx, uint32_t Rank)
{
  register const volatile uint32_t *preg = ((volatile uint32_t *)((uint32_t) ((uint32_t)(&(ADCx->JDR1)) + ((((Rank & ((0x00000000UL) | (0x00000100UL) | (0x00000200UL) | (0x00000300UL))) >> (8UL))) << 2UL))));

  return (uint16_t)(((*preg) & ((0xFFFFUL << (0U))))

                   );
}
# 6391 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_adc.h"
static inline uint8_t LL_ADC_INJ_ReadConversionData8(ADC_TypeDef *ADCx, uint32_t Rank)
{
  register const volatile uint32_t *preg = ((volatile uint32_t *)((uint32_t) ((uint32_t)(&(ADCx->JDR1)) + ((((Rank & ((0x00000000UL) | (0x00000100UL) | (0x00000200UL) | (0x00000300UL))) >> (8UL))) << 2UL))));

  return (uint8_t)(((*preg) & ((0xFFFFUL << (0U))))

                  );
}
# 6418 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_adc.h"
static inline uint8_t LL_ADC_INJ_ReadConversionData6(ADC_TypeDef *ADCx, uint32_t Rank)
{
  register const volatile uint32_t *preg = ((volatile uint32_t *)((uint32_t) ((uint32_t)(&(ADCx->JDR1)) + ((((Rank & ((0x00000000UL) | (0x00000100UL) | (0x00000200UL) | (0x00000300UL))) >> (8UL))) << 2UL))));

  return (uint8_t)(((*preg) & ((0xFFFFUL << (0U))))

                  );
}
# 6444 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_adc.h"
static inline uint32_t LL_ADC_IsActiveFlag_ADRDY(ADC_TypeDef *ADCx)
{
  return ((((ADCx->ISR) & ((0x1UL << (0U)))) == ((0x1UL << (0U)))) ? 1UL : 0UL);
}







static inline uint32_t LL_ADC_IsActiveFlag_EOC(ADC_TypeDef *ADCx)
{
  return ((((ADCx->ISR) & ((0x1UL << (2U)))) == ((0x1UL << (2U)))) ? 1UL : 0UL);
}







static inline uint32_t LL_ADC_IsActiveFlag_EOS(ADC_TypeDef *ADCx)
{
  return ((((ADCx->ISR) & ((0x1UL << (3U)))) == ((0x1UL << (3U)))) ? 1UL : 0UL);
}







static inline uint32_t LL_ADC_IsActiveFlag_OVR(ADC_TypeDef *ADCx)
{
  return ((((ADCx->ISR) & ((0x1UL << (4U)))) == ((0x1UL << (4U)))) ? 1UL : 0UL);
}







static inline uint32_t LL_ADC_IsActiveFlag_EOSMP(ADC_TypeDef *ADCx)
{
  return ((((ADCx->ISR) & ((0x1UL << (1U)))) == ((0x1UL << (1U)))) ? 1UL : 0UL);
}







static inline uint32_t LL_ADC_IsActiveFlag_JEOC(ADC_TypeDef *ADCx)
{
  return ((((ADCx->ISR) & ((0x1UL << (5U)))) == ((0x1UL << (5U)))) ? 1UL : 0UL);
}







static inline uint32_t LL_ADC_IsActiveFlag_JEOS(ADC_TypeDef *ADCx)
{
  return ((((ADCx->ISR) & ((0x1UL << (6U)))) == ((0x1UL << (6U)))) ? 1UL : 0UL);
}







static inline uint32_t LL_ADC_IsActiveFlag_JQOVF(ADC_TypeDef *ADCx)
{
  return ((((ADCx->ISR) & ((0x1UL << (10U)))) == ((0x1UL << (10U)))) ? 1UL : 0UL);
}







static inline uint32_t LL_ADC_IsActiveFlag_AWD1(ADC_TypeDef *ADCx)
{
  return ((((ADCx->ISR) & ((0x1UL << (7U)))) == ((0x1UL << (7U)))) ? 1UL : 0UL);
}







static inline uint32_t LL_ADC_IsActiveFlag_AWD2(ADC_TypeDef *ADCx)
{
  return ((((ADCx->ISR) & ((0x1UL << (8U)))) == ((0x1UL << (8U)))) ? 1UL : 0UL);
}







static inline uint32_t LL_ADC_IsActiveFlag_AWD3(ADC_TypeDef *ADCx)
{
  return ((((ADCx->ISR) & ((0x1UL << (9U)))) == ((0x1UL << (9U)))) ? 1UL : 0UL);
}
# 6568 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_adc.h"
static inline void LL_ADC_ClearFlag_ADRDY(ADC_TypeDef *ADCx)
{
  ((ADCx->ISR) = ((0x1UL << (0U))));
}







static inline void LL_ADC_ClearFlag_EOC(ADC_TypeDef *ADCx)
{
  ((ADCx->ISR) = ((0x1UL << (2U))));
}







static inline void LL_ADC_ClearFlag_EOS(ADC_TypeDef *ADCx)
{
  ((ADCx->ISR) = ((0x1UL << (3U))));
}







static inline void LL_ADC_ClearFlag_OVR(ADC_TypeDef *ADCx)
{
  ((ADCx->ISR) = ((0x1UL << (4U))));
}







static inline void LL_ADC_ClearFlag_EOSMP(ADC_TypeDef *ADCx)
{
  ((ADCx->ISR) = ((0x1UL << (1U))));
}







static inline void LL_ADC_ClearFlag_JEOC(ADC_TypeDef *ADCx)
{
  ((ADCx->ISR) = ((0x1UL << (5U))));
}







static inline void LL_ADC_ClearFlag_JEOS(ADC_TypeDef *ADCx)
{
  ((ADCx->ISR) = ((0x1UL << (6U))));
}







static inline void LL_ADC_ClearFlag_JQOVF(ADC_TypeDef *ADCx)
{
  ((ADCx->ISR) = ((0x1UL << (10U))));
}







static inline void LL_ADC_ClearFlag_AWD1(ADC_TypeDef *ADCx)
{
  ((ADCx->ISR) = ((0x1UL << (7U))));
}







static inline void LL_ADC_ClearFlag_AWD2(ADC_TypeDef *ADCx)
{
  ((ADCx->ISR) = ((0x1UL << (8U))));
}







static inline void LL_ADC_ClearFlag_AWD3(ADC_TypeDef *ADCx)
{
  ((ADCx->ISR) = ((0x1UL << (9U))));
}
# 6963 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_adc.h"
static inline void LL_ADC_EnableIT_ADRDY(ADC_TypeDef *ADCx)
{
  ((ADCx->IER) |= ((0x1UL << (0U))));
}







static inline void LL_ADC_EnableIT_EOC(ADC_TypeDef *ADCx)
{
  ((ADCx->IER) |= ((0x1UL << (2U))));
}







static inline void LL_ADC_EnableIT_EOS(ADC_TypeDef *ADCx)
{
  ((ADCx->IER) |= ((0x1UL << (3U))));
}







static inline void LL_ADC_EnableIT_OVR(ADC_TypeDef *ADCx)
{
  ((ADCx->IER) |= ((0x1UL << (4U))));
}







static inline void LL_ADC_EnableIT_EOSMP(ADC_TypeDef *ADCx)
{
  ((ADCx->IER) |= ((0x1UL << (1U))));
}







static inline void LL_ADC_EnableIT_JEOC(ADC_TypeDef *ADCx)
{
  ((ADCx->IER) |= ((0x1UL << (5U))));
}







static inline void LL_ADC_EnableIT_JEOS(ADC_TypeDef *ADCx)
{
  ((ADCx->IER) |= ((0x1UL << (6U))));
}







static inline void LL_ADC_EnableIT_JQOVF(ADC_TypeDef *ADCx)
{
  ((ADCx->IER) |= ((0x1UL << (10U))));
}







static inline void LL_ADC_EnableIT_AWD1(ADC_TypeDef *ADCx)
{
  ((ADCx->IER) |= ((0x1UL << (7U))));
}







static inline void LL_ADC_EnableIT_AWD2(ADC_TypeDef *ADCx)
{
  ((ADCx->IER) |= ((0x1UL << (8U))));
}







static inline void LL_ADC_EnableIT_AWD3(ADC_TypeDef *ADCx)
{
  ((ADCx->IER) |= ((0x1UL << (9U))));
}







static inline void LL_ADC_DisableIT_ADRDY(ADC_TypeDef *ADCx)
{
  ((ADCx->IER) &= ~((0x1UL << (0U))));
}







static inline void LL_ADC_DisableIT_EOC(ADC_TypeDef *ADCx)
{
  ((ADCx->IER) &= ~((0x1UL << (2U))));
}







static inline void LL_ADC_DisableIT_EOS(ADC_TypeDef *ADCx)
{
  ((ADCx->IER) &= ~((0x1UL << (3U))));
}







static inline void LL_ADC_DisableIT_OVR(ADC_TypeDef *ADCx)
{
  ((ADCx->IER) &= ~((0x1UL << (4U))));
}







static inline void LL_ADC_DisableIT_EOSMP(ADC_TypeDef *ADCx)
{
  ((ADCx->IER) &= ~((0x1UL << (1U))));
}







static inline void LL_ADC_DisableIT_JEOC(ADC_TypeDef *ADCx)
{
  ((ADCx->IER) &= ~((0x1UL << (5U))));
}







static inline void LL_ADC_DisableIT_JEOS(ADC_TypeDef *ADCx)
{
  ((ADCx->IER) &= ~((0x1UL << (6U))));
}







static inline void LL_ADC_DisableIT_JQOVF(ADC_TypeDef *ADCx)
{
  ((ADCx->IER) &= ~((0x1UL << (10U))));
}







static inline void LL_ADC_DisableIT_AWD1(ADC_TypeDef *ADCx)
{
  ((ADCx->IER) &= ~((0x1UL << (7U))));
}







static inline void LL_ADC_DisableIT_AWD2(ADC_TypeDef *ADCx)
{
  ((ADCx->IER) &= ~((0x1UL << (8U))));
}







static inline void LL_ADC_DisableIT_AWD3(ADC_TypeDef *ADCx)
{
  ((ADCx->IER) &= ~((0x1UL << (9U))));
}
# 7206 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_adc.h"
static inline uint32_t LL_ADC_IsEnabledIT_ADRDY(ADC_TypeDef *ADCx)
{
  return ((((ADCx->IER) & ((0x1UL << (0U)))) == ((0x1UL << (0U)))) ? 1UL : 0UL);
}
# 7218 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_adc.h"
static inline uint32_t LL_ADC_IsEnabledIT_EOC(ADC_TypeDef *ADCx)
{
  return ((((ADCx->IER) & ((0x1UL << (2U)))) == ((0x1UL << (2U)))) ? 1UL : 0UL);
}
# 7230 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_adc.h"
static inline uint32_t LL_ADC_IsEnabledIT_EOS(ADC_TypeDef *ADCx)
{
  return ((((ADCx->IER) & ((0x1UL << (3U)))) == ((0x1UL << (3U)))) ? 1UL : 0UL);
}
# 7242 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_adc.h"
static inline uint32_t LL_ADC_IsEnabledIT_OVR(ADC_TypeDef *ADCx)
{
  return ((((ADCx->IER) & ((0x1UL << (4U)))) == ((0x1UL << (4U)))) ? 1UL : 0UL);
}
# 7254 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_adc.h"
static inline uint32_t LL_ADC_IsEnabledIT_EOSMP(ADC_TypeDef *ADCx)
{
  return ((((ADCx->IER) & ((0x1UL << (1U)))) == ((0x1UL << (1U)))) ? 1UL : 0UL);
}
# 7266 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_adc.h"
static inline uint32_t LL_ADC_IsEnabledIT_JEOC(ADC_TypeDef *ADCx)
{
  return ((((ADCx->IER) & ((0x1UL << (5U)))) == ((0x1UL << (5U)))) ? 1UL : 0UL);
}
# 7278 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_adc.h"
static inline uint32_t LL_ADC_IsEnabledIT_JEOS(ADC_TypeDef *ADCx)
{
  return ((((ADCx->IER) & ((0x1UL << (6U)))) == ((0x1UL << (6U)))) ? 1UL : 0UL);
}
# 7290 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_adc.h"
static inline uint32_t LL_ADC_IsEnabledIT_JQOVF(ADC_TypeDef *ADCx)
{
  return ((((ADCx->IER) & ((0x1UL << (10U)))) == ((0x1UL << (10U)))) ? 1UL : 0UL);
}
# 7302 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_adc.h"
static inline uint32_t LL_ADC_IsEnabledIT_AWD1(ADC_TypeDef *ADCx)
{
  return ((((ADCx->IER) & ((0x1UL << (7U)))) == ((0x1UL << (7U)))) ? 1UL : 0UL);
}
# 7314 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_adc.h"
static inline uint32_t LL_ADC_IsEnabledIT_AWD2(ADC_TypeDef *ADCx)
{
  return ((((ADCx->IER) & ((0x1UL << (8U)))) == ((0x1UL << (8U)))) ? 1UL : 0UL);
}
# 7326 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_adc.h"
static inline uint32_t LL_ADC_IsEnabledIT_AWD3(ADC_TypeDef *ADCx)
{
  return ((((ADCx->IER) & ((0x1UL << (9U)))) == ((0x1UL << (9U)))) ? 1UL : 0UL);
}
# 33 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_adc.h" 2
# 50 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_adc.h"
typedef struct
{
  uint32_t Ratio;


  uint32_t RightBitShift;


  uint32_t TriggeredMode;


  uint32_t OversamplingStopReset;







} ADC_OversamplingTypeDef;
# 87 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_adc.h"
typedef struct
{
  uint32_t ClockPrescaler;
# 100 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_adc.h"
  uint32_t Resolution;


  uint32_t DataAlign;



  uint32_t ScanConvMode;







  uint32_t EOCSelection;


  FunctionalState LowPowerAutoWait;
# 130 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_adc.h"
  FunctionalState ContinuousConvMode;



  uint32_t NbrOfConversion;





  FunctionalState DiscontinuousConvMode;





  uint32_t NbrOfDiscConversion;



  uint32_t ExternalTrigConv;




  uint32_t ExternalTrigConvEdge;



  FunctionalState DMAContinuousRequests;




  uint32_t Overrun;
# 175 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_adc.h"
  FunctionalState OversamplingMode;



  ADC_OversamplingTypeDef Oversampling;



  uint32_t DFSDMConfig;




} ADC_InitTypeDef;
# 201 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_adc.h"
typedef struct
{
  uint32_t Channel;



  uint32_t Rank;




  uint32_t SamplingTime;
# 223 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_adc.h"
  uint32_t SingleDiff;
# 235 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_adc.h"
  uint32_t OffsetNumber;



  uint32_t Offset;






} ADC_ChannelConfTypeDef;







typedef struct
{
  uint32_t WatchdogNumber;




  uint32_t WatchdogMode;




  uint32_t Channel;




  FunctionalState ITMode;


  uint32_t HighThreshold;
# 284 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_adc.h"
  uint32_t LowThreshold;
# 293 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_adc.h"
} ADC_AnalogWDGConfTypeDef;





typedef struct
{
  uint32_t ContextQueue;



  uint32_t ChannelCount;
} ADC_InjectionConfigTypeDef;
# 362 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_adc.h"
typedef struct

{
  ADC_TypeDef *Instance;
  ADC_InitTypeDef Init;
  DMA_HandleTypeDef *DMA_Handle;
  HAL_LockTypeDef Lock;
  volatile uint32_t State;
  volatile uint32_t ErrorCode;
  ADC_InjectionConfigTypeDef InjectionConfig ;
# 385 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_adc.h"
} ADC_HandleTypeDef;
# 1710 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_adc.h"
# 1 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_adc_ex.h" 1
# 47 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_adc_ex.h"
typedef struct
{
  uint32_t Ratio;


  uint32_t RightBitShift;

} ADC_InjOversamplingTypeDef;
# 72 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_adc_ex.h"
typedef struct
{
  uint32_t InjectedChannel;



  uint32_t InjectedRank;




  uint32_t InjectedSamplingTime;
# 94 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_adc_ex.h"
  uint32_t InjectedSingleDiff;
# 106 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_adc_ex.h"
  uint32_t InjectedOffsetNumber;



  uint32_t InjectedOffset;






  uint32_t InjectedNbrOfConversion;





  FunctionalState InjectedDiscontinuousConvMode;
# 133 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_adc_ex.h"
  FunctionalState AutoInjectedConv;
# 142 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_adc_ex.h"
  FunctionalState QueueInjectedContext;
# 153 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_adc_ex.h"
  uint32_t ExternalTrigInjecConv;





  uint32_t ExternalTrigInjecConvEdge;





  FunctionalState InjecOversamplingMode;



  ADC_InjOversamplingTypeDef InjecOversampling;


} ADC_InjectionConfTypeDef;
# 1146 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_adc_ex.h"
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff);
uint32_t HAL_ADCEx_Calibration_GetValue(ADC_HandleTypeDef *hadc, uint32_t SingleDiff);
HAL_StatusTypeDef HAL_ADCEx_Calibration_SetValue(ADC_HandleTypeDef *hadc, uint32_t SingleDiff,
                                                       uint32_t CalibrationFactor);


HAL_StatusTypeDef HAL_ADCEx_InjectedStart(ADC_HandleTypeDef *hadc);
HAL_StatusTypeDef HAL_ADCEx_InjectedStop(ADC_HandleTypeDef *hadc);
HAL_StatusTypeDef HAL_ADCEx_InjectedPollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout);


HAL_StatusTypeDef HAL_ADCEx_InjectedStart_IT(ADC_HandleTypeDef *hadc);
HAL_StatusTypeDef HAL_ADCEx_InjectedStop_IT(ADC_HandleTypeDef *hadc);
# 1168 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_adc_ex.h"
uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef *hadc, uint32_t InjectedRank);


void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc);
void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc);
void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc);
void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc);
void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc);


HAL_StatusTypeDef HAL_ADCEx_RegularStop(ADC_HandleTypeDef *hadc);
HAL_StatusTypeDef HAL_ADCEx_RegularStop_IT(ADC_HandleTypeDef *hadc);
HAL_StatusTypeDef HAL_ADCEx_RegularStop_DMA(ADC_HandleTypeDef *hadc);
# 1193 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_adc_ex.h"
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc,ADC_InjectionConfTypeDef* sConfigInjected);



HAL_StatusTypeDef HAL_ADCEx_EnableInjectedQueue(ADC_HandleTypeDef *hadc);
HAL_StatusTypeDef HAL_ADCEx_DisableInjectedQueue(ADC_HandleTypeDef *hadc);
HAL_StatusTypeDef HAL_ADCEx_DisableVoltageRegulator(ADC_HandleTypeDef *hadc);
HAL_StatusTypeDef HAL_ADCEx_EnterADCDeepPowerDownMode(ADC_HandleTypeDef *hadc);
# 1711 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_adc.h" 2
# 1722 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_adc.h"
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc);
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc);
void HAL_ADC_MspInit(ADC_HandleTypeDef *hadc);
void HAL_ADC_MspDeInit(ADC_HandleTypeDef *hadc);
# 1744 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_adc.h"
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc);
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc);
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout);
HAL_StatusTypeDef HAL_ADC_PollForEvent(ADC_HandleTypeDef *hadc, uint32_t EventType, uint32_t Timeout);


HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc);
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef *hadc);


HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length);
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc);


uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc);


void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc);
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc);
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc);
void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc);
void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc);
# 1775 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_adc.h"
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig);
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef *hadc, ADC_AnalogWDGConfTypeDef *AnalogWDGConfig);
# 1786 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_adc.h"
uint32_t HAL_ADC_GetState(ADC_HandleTypeDef *hadc);
uint32_t HAL_ADC_GetError(ADC_HandleTypeDef *hadc);
# 1801 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_adc.h"
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup);
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc);
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc);
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma);
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma);
void ADC_DMAError(DMA_HandleTypeDef *hdma);
# 32 "./boards/stm32l4xx_hal_conf_base.h" 2
# 1 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_can.h" 1
# 47 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_can.h"
typedef enum
{
  HAL_CAN_STATE_RESET = 0x00U,
  HAL_CAN_STATE_READY = 0x01U,
  HAL_CAN_STATE_LISTENING = 0x02U,
  HAL_CAN_STATE_SLEEP_PENDING = 0x03U,
  HAL_CAN_STATE_SLEEP_ACTIVE = 0x04U,
  HAL_CAN_STATE_ERROR = 0x05U

} HAL_CAN_StateTypeDef;




typedef struct
{
  uint32_t Prescaler;


  uint32_t Mode;


  uint32_t SyncJumpWidth;



  uint32_t TimeSeg1;


  uint32_t TimeSeg2;


  FunctionalState TimeTriggeredMode;


  FunctionalState AutoBusOff;


  FunctionalState AutoWakeUp;


  FunctionalState AutoRetransmission;


  FunctionalState ReceiveFifoLocked;


  FunctionalState TransmitFifoPriority;


} CAN_InitTypeDef;




typedef struct
{
  uint32_t FilterIdHigh;



  uint32_t FilterIdLow;



  uint32_t FilterMaskIdHigh;




  uint32_t FilterMaskIdLow;




  uint32_t FilterFIFOAssignment;


  uint32_t FilterBank;





  uint32_t FilterMode;


  uint32_t FilterScale;


  uint32_t FilterActivation;


  uint32_t SlaveStartFilterBank;






} CAN_FilterTypeDef;




typedef struct
{
  uint32_t StdId;


  uint32_t ExtId;


  uint32_t IDE;


  uint32_t RTR;


  uint32_t DLC;


  FunctionalState TransmitGlobalTime;





} CAN_TxHeaderTypeDef;




typedef struct
{
  uint32_t StdId;


  uint32_t ExtId;


  uint32_t IDE;


  uint32_t RTR;


  uint32_t DLC;


  uint32_t Timestamp;



  uint32_t FilterMatchIndex;


} CAN_RxHeaderTypeDef;




typedef struct __CAN_HandleTypeDef
{
  CAN_TypeDef *Instance;

  CAN_InitTypeDef Init;

  volatile HAL_CAN_StateTypeDef State;

  volatile uint32_t ErrorCode;
# 239 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_can.h"
} CAN_HandleTypeDef;
# 641 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_can.h"
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan);
HAL_StatusTypeDef HAL_CAN_DeInit(CAN_HandleTypeDef *hcan);
void HAL_CAN_MspInit(CAN_HandleTypeDef *hcan);
void HAL_CAN_MspDeInit(CAN_HandleTypeDef *hcan);
# 662 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_can.h"
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig);
# 674 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_can.h"
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan);
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan);
HAL_StatusTypeDef HAL_CAN_RequestSleep(CAN_HandleTypeDef *hcan);
HAL_StatusTypeDef HAL_CAN_WakeUp(CAN_HandleTypeDef *hcan);
uint32_t HAL_CAN_IsSleepActive(CAN_HandleTypeDef *hcan);
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox);
HAL_StatusTypeDef HAL_CAN_AbortTxRequest(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes);
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan);
uint32_t HAL_CAN_IsTxMessagePending(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes);
uint32_t HAL_CAN_GetTxTimestamp(CAN_HandleTypeDef *hcan, uint32_t TxMailbox);
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[]);
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo);
# 696 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_can.h"
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs);
HAL_StatusTypeDef HAL_CAN_DeactivateNotification(CAN_HandleTypeDef *hcan, uint32_t InactiveITs);
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan);
# 710 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_can.h"
void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan);
void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan);
void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan);
void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan);
void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan);
void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan);
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan);
void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan);
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan);
void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan);
void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan);
void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan);
void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan);
# 733 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_can.h"
HAL_CAN_StateTypeDef HAL_CAN_GetState(CAN_HandleTypeDef *hcan);
uint32_t HAL_CAN_GetError(CAN_HandleTypeDef *hcan);
HAL_StatusTypeDef HAL_CAN_ResetError(CAN_HandleTypeDef *hcan);
# 33 "./boards/stm32l4xx_hal_conf_base.h" 2
# 1 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_cortex.h" 1
# 48 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_cortex.h"
typedef struct
{
  uint8_t Enable;

  uint8_t Number;

  uint32_t BaseAddress;
  uint8_t Size;

  uint8_t SubRegionDisable;

  uint8_t TypeExtField;

  uint8_t AccessPermission;

  uint8_t DisableExec;

  uint8_t IsShareable;

  uint8_t IsCacheable;

  uint8_t IsBufferable;

}MPU_Region_InitTypeDef;
# 267 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_cortex.h"
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup);
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority);
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn);
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn);
void HAL_NVIC_SystemReset(void);
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb);
# 283 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_cortex.h"
uint32_t HAL_NVIC_GetPriorityGrouping(void);
void HAL_NVIC_GetPriority(IRQn_Type IRQn, uint32_t PriorityGroup, uint32_t* pPreemptPriority, uint32_t* pSubPriority);
uint32_t HAL_NVIC_GetPendingIRQ(IRQn_Type IRQn);
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn);
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn);
uint32_t HAL_NVIC_GetActive(IRQn_Type IRQn);
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource);
void HAL_SYSTICK_IRQHandler(void);
void HAL_SYSTICK_Callback(void);


void HAL_MPU_Enable(uint32_t MPU_Control);
void HAL_MPU_Disable(void);
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init);
# 34 "./boards/stm32l4xx_hal_conf_base.h" 2
# 1 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_crc.h" 1
# 47 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_crc.h"
typedef enum
{
  HAL_CRC_STATE_RESET = 0x00U,
  HAL_CRC_STATE_READY = 0x01U,
  HAL_CRC_STATE_BUSY = 0x02U,
  HAL_CRC_STATE_TIMEOUT = 0x03U,
  HAL_CRC_STATE_ERROR = 0x04U
} HAL_CRC_StateTypeDef;




typedef struct
{
  uint8_t DefaultPolynomialUse;





  uint8_t DefaultInitValueUse;




  uint32_t GeneratingPolynomial;




  uint32_t CRCLength;






  uint32_t InitValue;


  uint32_t InputDataInversionMode;






  uint32_t OutputDataInversionMode;



} CRC_InitTypeDef;




typedef struct
{
  CRC_TypeDef *Instance;

  CRC_InitTypeDef Init;

  HAL_LockTypeDef Lock;

  volatile HAL_CRC_StateTypeDef State;

  uint32_t InputDataFormat;







} CRC_HandleTypeDef;
# 288 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_crc.h"
# 1 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_crc_ex.h" 1
# 127 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_crc_ex.h"
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength);
HAL_StatusTypeDef HAL_CRCEx_Input_Data_Reverse(CRC_HandleTypeDef *hcrc, uint32_t InputReverseMode);
HAL_StatusTypeDef HAL_CRCEx_Output_Data_Reverse(CRC_HandleTypeDef *hcrc, uint32_t OutputReverseMode);
# 289 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_crc.h" 2
# 299 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_crc.h"
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc);
HAL_StatusTypeDef HAL_CRC_DeInit(CRC_HandleTypeDef *hcrc);
void HAL_CRC_MspInit(CRC_HandleTypeDef *hcrc);
void HAL_CRC_MspDeInit(CRC_HandleTypeDef *hcrc);
# 311 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_crc.h"
uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength);
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength);
# 321 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_crc.h"
HAL_CRC_StateTypeDef HAL_CRC_GetState(CRC_HandleTypeDef *hcrc);
# 35 "./boards/stm32l4xx_hal_conf_base.h" 2
# 1 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_dac.h" 1
# 50 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_dac.h"
typedef enum
{
  HAL_DAC_STATE_RESET = 0x00U,
  HAL_DAC_STATE_READY = 0x01U,
  HAL_DAC_STATE_BUSY = 0x02U,
  HAL_DAC_STATE_TIMEOUT = 0x03U,
  HAL_DAC_STATE_ERROR = 0x04U

} HAL_DAC_StateTypeDef;







typedef struct

{
  DAC_TypeDef *Instance;

  volatile HAL_DAC_StateTypeDef State;

  HAL_LockTypeDef Lock;

  DMA_HandleTypeDef *DMA_Handle1;

  DMA_HandleTypeDef *DMA_Handle2;

  volatile uint32_t ErrorCode;
# 95 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_dac.h"
} DAC_HandleTypeDef;




typedef struct
{
  uint32_t DAC_SampleTime ;



  uint32_t DAC_HoldTime ;



  uint32_t DAC_RefreshTime ;


} DAC_SampleAndHoldConfTypeDef;




typedef struct
{

  uint32_t DAC_HighFrequency;



  uint32_t DAC_SampleAndHold;


  uint32_t DAC_Trigger;


  uint32_t DAC_OutputBuffer;


  uint32_t DAC_ConnectOnChipPeripheral ;


  uint32_t DAC_UserTrimming;



  uint32_t DAC_TrimmingValue;



  DAC_SampleAndHoldConfTypeDef DAC_SampleAndHoldConfig;

} DAC_ChannelConfTypeDef;
# 504 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_dac.h"
# 1 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_dac_ex.h" 1
# 204 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_dac_ex.h"
HAL_StatusTypeDef HAL_DACEx_TriangleWaveGenerate(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Amplitude);
HAL_StatusTypeDef HAL_DACEx_NoiseWaveGenerate(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Amplitude);




HAL_StatusTypeDef HAL_DACEx_DualSetValue(DAC_HandleTypeDef* hdac, uint32_t Alignment, uint32_t Data1, uint32_t Data2);
uint32_t HAL_DACEx_DualGetValue(DAC_HandleTypeDef* hdac);






void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef* hdac);
void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef* hdac);
void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef* hdac);
void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef* hdac);
# 236 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_dac_ex.h"
HAL_StatusTypeDef HAL_DACEx_SelfCalibrate(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel);
HAL_StatusTypeDef HAL_DACEx_SetUserTrimming(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel, uint32_t NewTrimmingValue);
uint32_t HAL_DACEx_GetTrimOffset (DAC_HandleTypeDef *hdac, uint32_t Channel);
# 258 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_dac_ex.h"
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma);
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma);
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma);
# 505 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_dac.h" 2
# 516 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_dac.h"
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac);
HAL_StatusTypeDef HAL_DAC_DeInit(DAC_HandleTypeDef *hdac);
void HAL_DAC_MspInit(DAC_HandleTypeDef *hdac);
void HAL_DAC_MspDeInit(DAC_HandleTypeDef *hdac);
# 529 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_dac.h"
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel);
HAL_StatusTypeDef HAL_DAC_Stop(DAC_HandleTypeDef *hdac, uint32_t Channel);
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment);
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel);

void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac);

HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data);

void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac);
void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac);
void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac);
void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac);
# 559 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_dac.h"
uint32_t HAL_DAC_GetValue(DAC_HandleTypeDef *hdac, uint32_t Channel);

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel);
# 570 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_dac.h"
HAL_DAC_StateTypeDef HAL_DAC_GetState(DAC_HandleTypeDef *hdac);
uint32_t HAL_DAC_GetError(DAC_HandleTypeDef *hdac);
# 584 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_dac.h"
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma);
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma);
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma);
# 36 "./boards/stm32l4xx_hal_conf_base.h" 2
# 1 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_dcmi.h" 1
# 50 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_dcmi.h"
typedef struct
{
  uint8_t FrameStartCode;
  uint8_t LineStartCode;
  uint8_t LineEndCode;
  uint8_t FrameEndCode;
}DCMI_CodesInitTypeDef;





typedef struct
{
  uint8_t FrameStartUnmask;
  uint8_t LineStartUnmask;
  uint8_t LineEndUnmask;
  uint8_t FrameEndUnmask;
}DCMI_SyncUnmaskTypeDef;





typedef struct
{
  uint32_t SynchroMode;


  uint32_t PCKPolarity;


  uint32_t VSPolarity;


  uint32_t HSPolarity;


  uint32_t CaptureRate;


  uint32_t ExtendedDataMode;


  DCMI_CodesInitTypeDef SynchroCode;

  uint32_t JPEGMode;


  uint32_t ByteSelectMode;


  uint32_t ByteSelectStart;


  uint32_t LineSelectMode;


  uint32_t LineSelectStart;

}DCMI_InitTypeDef;





typedef enum
{
  HAL_DCMI_STATE_RESET = 0x00U,
  HAL_DCMI_STATE_READY = 0x01U,
  HAL_DCMI_STATE_BUSY = 0x02U,
  HAL_DCMI_STATE_TIMEOUT = 0x03U,
  HAL_DCMI_STATE_ERROR = 0x04U,
  HAL_DCMI_STATE_SUSPENDED = 0x05U
}HAL_DCMI_StateTypeDef;





typedef struct __DCMI_HandleTypeDef
{
  DCMI_TypeDef *Instance;

  DCMI_InitTypeDef Init;

  HAL_LockTypeDef Lock;

  volatile HAL_DCMI_StateTypeDef State;

  volatile uint32_t XferCount;

  volatile uint32_t XferSize;

  uint32_t pBuffPtr;

  DMA_HandleTypeDef *DMA_Handle;

  DMA_HandleTypeDef *DMAM2M_Handle;


  volatile uint32_t ErrorCode;

  uint32_t pCircularBuffer;


  uint32_t HalfCopyLength;
# 168 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_dcmi.h"
}DCMI_HandleTypeDef;
# 514 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_dcmi.h"
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi);
HAL_StatusTypeDef HAL_DCMI_DeInit(DCMI_HandleTypeDef *hdcmi);
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi);
void HAL_DCMI_MspDeInit(DCMI_HandleTypeDef* hdcmi);
# 533 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_dcmi.h"
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef* hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length);
HAL_StatusTypeDef HAL_DCMI_Stop(DCMI_HandleTypeDef* hdcmi);
HAL_StatusTypeDef HAL_DCMI_Suspend(DCMI_HandleTypeDef* hdcmi);
HAL_StatusTypeDef HAL_DCMI_Resume(DCMI_HandleTypeDef* hdcmi);
void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi);
void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi);
void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi);
void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi);
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi);
# 550 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_dcmi.h"
HAL_StatusTypeDef HAL_DCMI_ConfigCrop(DCMI_HandleTypeDef *hdcmi, uint32_t X0, uint32_t Y0, uint32_t XSize, uint32_t YSize);
HAL_StatusTypeDef HAL_DCMI_EnableCrop(DCMI_HandleTypeDef *hdcmi);
HAL_StatusTypeDef HAL_DCMI_DisableCrop(DCMI_HandleTypeDef *hdcmi);
HAL_StatusTypeDef HAL_DCMI_ConfigSyncUnmask(DCMI_HandleTypeDef *hdcmi, DCMI_SyncUnmaskTypeDef *SyncUnmask);
# 562 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_dcmi.h"
HAL_DCMI_StateTypeDef HAL_DCMI_GetState(DCMI_HandleTypeDef *hdcmi);
uint32_t HAL_DCMI_GetError(DCMI_HandleTypeDef *hdcmi);
# 37 "./boards/stm32l4xx_hal_conf_base.h" 2
# 1 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_flash.h" 1
# 47 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_flash.h"
typedef struct
{
  uint32_t TypeErase;

  uint32_t Banks;


  uint32_t Page;


  uint32_t NbPages;

} FLASH_EraseInitTypeDef;




typedef struct
{
  uint32_t OptionType;

  uint32_t WRPArea;


  uint32_t WRPStartOffset;


  uint32_t WRPEndOffset;

  uint32_t RDPLevel;

  uint32_t USERType;

  uint32_t USERConfig;







  uint32_t PCROPConfig;


  uint32_t PCROPStartAddr;


  uint32_t PCROPEndAddr;

} FLASH_OBProgramInitTypeDef;




typedef enum
{
  FLASH_PROC_NONE = 0,
  FLASH_PROC_PAGE_ERASE,
  FLASH_PROC_MASS_ERASE,
  FLASH_PROC_PROGRAM,
  FLASH_PROC_PROGRAM_LAST
} FLASH_ProcedureTypeDef;




typedef enum
{
  FLASH_CACHE_DISABLED = 0,
  FLASH_CACHE_ICACHE_ENABLED,
  FLASH_CACHE_DCACHE_ENABLED,
  FLASH_CACHE_ICACHE_DCACHE_ENABLED
} FLASH_CacheTypeDef;




typedef struct
{
  HAL_LockTypeDef Lock;
  volatile uint32_t ErrorCode;
  volatile FLASH_ProcedureTypeDef ProcedureOnGoing;
  volatile uint32_t Address;
  volatile uint32_t Bank;
  volatile uint32_t Page;
  volatile uint32_t NbPagesToErase;
  volatile FLASH_CacheTypeDef CacheToReactivate;
}FLASH_ProcessTypeDef;
# 764 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_flash.h"
# 1 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_flash_ex.h" 1
# 71 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_flash_ex.h"
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError);
HAL_StatusTypeDef HAL_FLASHEx_Erase_IT(FLASH_EraseInitTypeDef *pEraseInit);
HAL_StatusTypeDef HAL_FLASHEx_OBProgram(FLASH_OBProgramInitTypeDef *pOBInit);
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit);
# 83 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_flash_ex.h"
HAL_StatusTypeDef HAL_FLASHEx_ConfigLVEPin(uint32_t ConfigLVE);
# 97 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_flash_ex.h"
void FLASH_PageErase(uint32_t Page, uint32_t Banks);
void FLASH_FlushCaches(void);
# 765 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_flash.h" 2
# 1 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_flash_ramfunc.h" 1
# 50 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_flash_ramfunc.h"
HAL_StatusTypeDef __attribute__((section(".RamFunc"))) HAL_FLASHEx_EnableRunPowerDown(void);
HAL_StatusTypeDef __attribute__((section(".RamFunc"))) HAL_FLASHEx_DisableRunPowerDown(void);

HAL_StatusTypeDef __attribute__((section(".RamFunc"))) HAL_FLASHEx_OB_DBankConfig(uint32_t DBankConfig);
# 766 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_flash.h" 2
# 776 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_flash.h"
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data);
HAL_StatusTypeDef HAL_FLASH_Program_IT(uint32_t TypeProgram, uint32_t Address, uint64_t Data);

void HAL_FLASH_IRQHandler(void);

void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue);
void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue);
# 791 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_flash.h"
HAL_StatusTypeDef HAL_FLASH_Unlock(void);
HAL_StatusTypeDef HAL_FLASH_Lock(void);

HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void);
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void);
HAL_StatusTypeDef HAL_FLASH_OB_Launch(void);
# 805 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_flash.h"
uint32_t HAL_FLASH_GetError(void);
# 818 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_flash.h"
extern FLASH_ProcessTypeDef pFlash;
# 827 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_flash.h"
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout);
# 38 "./boards/stm32l4xx_hal_conf_base.h" 2
# 1 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_gpio.h" 1
# 47 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_gpio.h"
typedef struct
{
  uint32_t Pin;


  uint32_t Mode;


  uint32_t Pull;


  uint32_t Speed;


  uint32_t Alternate;

}GPIO_InitTypeDef;




typedef enum
{
  GPIO_PIN_RESET = 0U,
  GPIO_PIN_SET
}GPIO_PinState;
# 246 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_gpio.h"
# 1 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_gpio_ex.h" 1
# 247 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_gpio.h" 2
# 259 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_gpio.h"
void HAL_GPIO_Init(GPIO_TypeDef *GPIOx, GPIO_InitTypeDef *GPIO_Init);
void HAL_GPIO_DeInit(GPIO_TypeDef *GPIOx, uint32_t GPIO_Pin);
# 271 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_gpio.h"
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin);
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState);
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin);
HAL_StatusTypeDef HAL_GPIO_LockPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin);
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin);
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin);
# 39 "./boards/stm32l4xx_hal_conf_base.h" 2
# 1 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_hash.h" 1
# 40 "./boards/stm32l4xx_hal_conf_base.h" 2
# 1 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_hcd.h" 1
# 29 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_hcd.h"
# 1 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usb.h" 1
# 47 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usb.h"
typedef enum
{
  USB_DEVICE_MODE = 0,
  USB_HOST_MODE = 1,
  USB_DRD_MODE = 2
} USB_ModeTypeDef;




typedef enum
{
  URB_IDLE = 0,
  URB_DONE,
  URB_NOTREADY,
  URB_NYET,
  URB_ERROR,
  URB_STALL
} USB_OTG_URBStateTypeDef;




typedef enum
{
  HC_IDLE = 0,
  HC_XFRC,
  HC_HALTED,
  HC_NAK,
  HC_NYET,
  HC_STALL,
  HC_XACTERR,
  HC_BBLERR,
  HC_DATATGLERR
} USB_OTG_HCStateTypeDef;




typedef struct
{
  uint32_t dev_endpoints;



  uint32_t Host_channels;



  uint32_t speed;


  uint32_t dma_enable;

  uint32_t ep0_mps;

  uint32_t phy_itface;


  uint32_t Sof_enable;

  uint32_t low_power_enable;

  uint32_t lpm_enable;

  uint32_t battery_charging_enable;

  uint32_t vbus_sensing_enable;

  uint32_t use_dedicated_ep1;

  uint32_t use_external_vbus;
} USB_OTG_CfgTypeDef;

typedef struct
{
  uint8_t num;


  uint8_t is_in;


  uint8_t is_stall;


  uint8_t type;


  uint8_t data_pid_start;


  uint8_t even_odd_frame;


  uint16_t tx_fifo_num;


  uint32_t maxpacket;


  uint8_t *xfer_buff;

  uint32_t dma_addr;

  uint32_t xfer_len;

  uint32_t xfer_count;
} USB_OTG_EPTypeDef;

typedef struct
{
  uint8_t dev_addr ;


  uint8_t ch_num;


  uint8_t ep_num;


  uint8_t ep_is_in;


  uint8_t speed;


  uint8_t do_ping;

  uint8_t process_ping;

  uint8_t ep_type;


  uint16_t max_packet;


  uint8_t data_pid;


  uint8_t *xfer_buff;

  uint32_t xfer_len;

  uint32_t xfer_count;

  uint8_t toggle_in;


  uint8_t toggle_out;


  uint32_t dma_addr;

  uint32_t ErrCnt;

  USB_OTG_URBStateTypeDef urb_state;


  USB_OTG_HCStateTypeDef state;

} USB_OTG_HCTypeDef;
# 539 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_usb.h"
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg);
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg);
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx);
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx);
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx, uint32_t hclk, uint8_t speed);
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode);
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed);
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx);
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num);
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep);
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep);
HAL_StatusTypeDef USB_ActivateDedicatedEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep);
HAL_StatusTypeDef USB_DeactivateDedicatedEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep);
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep);
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep);
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len);
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len);
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep);
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep);
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address);
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx);
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx);
HAL_StatusTypeDef USB_StopDevice(USB_OTG_GlobalTypeDef *USBx);
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx);
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup);
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx);
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx);
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx);
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx);
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum);
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx);
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum);
void USB_ClearInterrupts(USB_OTG_GlobalTypeDef *USBx, uint32_t interrupt);

HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg);
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq);
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx);
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state);
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx);
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx);
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx,
                              uint8_t ch_num,
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps);
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc);
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx);
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num);
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num);
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx);
HAL_StatusTypeDef USB_ActivateRemoteWakeup(USB_OTG_GlobalTypeDef *USBx);
HAL_StatusTypeDef USB_DeActivateRemoteWakeup(USB_OTG_GlobalTypeDef *USBx);
# 30 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_hcd.h" 2
# 48 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_hcd.h"
typedef enum
{
  HAL_HCD_STATE_RESET = 0x00,
  HAL_HCD_STATE_READY = 0x01,
  HAL_HCD_STATE_ERROR = 0x02,
  HAL_HCD_STATE_BUSY = 0x03,
  HAL_HCD_STATE_TIMEOUT = 0x04
} HCD_StateTypeDef;

typedef USB_OTG_GlobalTypeDef HCD_TypeDef;
typedef USB_OTG_CfgTypeDef HCD_InitTypeDef;
typedef USB_OTG_HCTypeDef HCD_HCTypeDef;
typedef USB_OTG_URBStateTypeDef HCD_URBStateTypeDef;
typedef USB_OTG_HCStateTypeDef HCD_HCStateTypeDef;
# 72 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_hcd.h"
typedef struct

{
  HCD_TypeDef *Instance;
  HCD_InitTypeDef Init;
  HCD_HCTypeDef hc[16];
  HAL_LockTypeDef Lock;
  volatile HCD_StateTypeDef State;
  volatile uint32_t ErrorCode;
  void *pData;
# 94 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_hcd.h"
} HCD_HandleTypeDef;
# 172 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_hcd.h"
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd);
HAL_StatusTypeDef HAL_HCD_DeInit(HCD_HandleTypeDef *hhcd);
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd,
                                       uint8_t ch_num,
                                       uint8_t epnum,
                                       uint8_t dev_address,
                                       uint8_t speed,
                                       uint8_t ep_type,
                                       uint16_t mps);

HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num);
void HAL_HCD_MspInit(HCD_HandleTypeDef *hhcd);
void HAL_HCD_MspDeInit(HCD_HandleTypeDef *hhcd);
# 234 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_hcd.h"
HAL_StatusTypeDef HAL_HCD_HC_SubmitRequest(HCD_HandleTypeDef *hhcd,
                                                 uint8_t ch_num,
                                                 uint8_t direction,
                                                 uint8_t ep_type,
                                                 uint8_t token,
                                                 uint8_t *pbuff,
                                                 uint16_t length,
                                                 uint8_t do_ping);


void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd);
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd);
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd);
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd);
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd);
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd);
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd,
                                                     uint8_t chnum,
                                                     HCD_URBStateTypeDef urb_state);
# 261 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_hcd.h"
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd);
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd);
HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd);
# 272 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_hcd.h"
HCD_StateTypeDef HAL_HCD_GetState(HCD_HandleTypeDef *hhcd);
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum);
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum);
HCD_HCStateTypeDef HAL_HCD_HC_GetState(HCD_HandleTypeDef *hhcd, uint8_t chnum);
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd);
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd);
# 41 "./boards/stm32l4xx_hal_conf_base.h" 2
# 1 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_i2c.h" 1
# 48 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_i2c.h"
typedef struct
{
  uint32_t Timing;



  uint32_t OwnAddress1;


  uint32_t AddressingMode;


  uint32_t DualAddressMode;


  uint32_t OwnAddress2;


  uint32_t OwnAddress2Masks;


  uint32_t GeneralCallMode;


  uint32_t NoStretchMode;


} I2C_InitTypeDef;
# 108 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_i2c.h"
typedef enum
{
  HAL_I2C_STATE_RESET = 0x00U,
  HAL_I2C_STATE_READY = 0x20U,
  HAL_I2C_STATE_BUSY = 0x24U,
  HAL_I2C_STATE_BUSY_TX = 0x21U,
  HAL_I2C_STATE_BUSY_RX = 0x22U,
  HAL_I2C_STATE_LISTEN = 0x28U,
  HAL_I2C_STATE_BUSY_TX_LISTEN = 0x29U,

  HAL_I2C_STATE_BUSY_RX_LISTEN = 0x2AU,

  HAL_I2C_STATE_ABORT = 0x60U,
  HAL_I2C_STATE_TIMEOUT = 0xA0U,
  HAL_I2C_STATE_ERROR = 0xE0U

} HAL_I2C_StateTypeDef;
# 148 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_i2c.h"
typedef enum
{
  HAL_I2C_MODE_NONE = 0x00U,
  HAL_I2C_MODE_MASTER = 0x10U,
  HAL_I2C_MODE_SLAVE = 0x20U,
  HAL_I2C_MODE_MEM = 0x40U

} HAL_I2C_ModeTypeDef;
# 186 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_i2c.h"
typedef struct __I2C_HandleTypeDef
{
  I2C_TypeDef *Instance;

  I2C_InitTypeDef Init;

  uint8_t *pBuffPtr;

  uint16_t XferSize;

  volatile uint16_t XferCount;

  volatile uint32_t XferOptions;


  volatile uint32_t PreviousState;

  HAL_StatusTypeDef(*XferISR)(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources);

  DMA_HandleTypeDef *hdmatx;

  DMA_HandleTypeDef *hdmarx;

  HAL_LockTypeDef Lock;

  volatile HAL_I2C_StateTypeDef State;

  volatile HAL_I2C_ModeTypeDef Mode;

  volatile uint32_t ErrorCode;

  volatile uint32_t AddrEventCount;
# 236 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_i2c.h"
} I2C_HandleTypeDef;
# 568 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_i2c.h"
# 1 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_i2c_ex.h" 1
# 101 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_i2c_ex.h"
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter);
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter);
HAL_StatusTypeDef HAL_I2CEx_EnableWakeUp(I2C_HandleTypeDef *hi2c);
HAL_StatusTypeDef HAL_I2CEx_DisableWakeUp(I2C_HandleTypeDef *hi2c);
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus);
void HAL_I2CEx_DisableFastModePlus(uint32_t ConfigFastModePlus);
# 569 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_i2c.h" 2
# 579 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_i2c.h"
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c);
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c);
void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c);
void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c);
# 601 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_i2c.h"
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout);
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout);
HAL_StatusTypeDef HAL_I2C_Slave_Transmit(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t Timeout);
HAL_StatusTypeDef HAL_I2C_Slave_Receive(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t Timeout);
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout);
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout);
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout);


HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size);
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size);
HAL_StatusTypeDef HAL_I2C_Slave_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size);
HAL_StatusTypeDef HAL_I2C_Slave_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size);
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size);
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size);

HAL_StatusTypeDef HAL_I2C_Master_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t XferOptions);
HAL_StatusTypeDef HAL_I2C_Master_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t XferOptions);
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions);
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions);
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c);
HAL_StatusTypeDef HAL_I2C_DisableListen_IT(I2C_HandleTypeDef *hi2c);
HAL_StatusTypeDef HAL_I2C_Master_Abort_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress);


HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size);
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size);
HAL_StatusTypeDef HAL_I2C_Slave_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size);
HAL_StatusTypeDef HAL_I2C_Slave_Receive_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size);
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size);
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size);

HAL_StatusTypeDef HAL_I2C_Master_Seq_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t XferOptions);
HAL_StatusTypeDef HAL_I2C_Master_Seq_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t XferOptions);
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions);
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions);
# 645 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_i2c.h"
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c);
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c);
void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c);
void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c);
void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c);
void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c);
void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode);
void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c);
void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c);
void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c);
void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c);
void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c);
# 665 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_i2c.h"
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c);
HAL_I2C_ModeTypeDef HAL_I2C_GetMode(I2C_HandleTypeDef *hi2c);
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c);
# 42 "./boards/stm32l4xx_hal_conf_base.h" 2
# 1 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_iwdg.h" 1
# 47 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_iwdg.h"
typedef struct
{
  uint32_t Prescaler;


  uint32_t Reload;


  uint32_t Window;


} IWDG_InitTypeDef;




typedef struct
{
  IWDG_TypeDef *Instance;

  IWDG_InitTypeDef Init;
} IWDG_HandleTypeDef;
# 141 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_iwdg.h"
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg);
# 150 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_iwdg.h"
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg);
# 43 "./boards/stm32l4xx_hal_conf_base.h" 2
# 1 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_pcd.h" 1
# 49 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_pcd.h"
typedef enum
{
  HAL_PCD_STATE_RESET = 0x00,
  HAL_PCD_STATE_READY = 0x01,
  HAL_PCD_STATE_ERROR = 0x02,
  HAL_PCD_STATE_BUSY = 0x03,
  HAL_PCD_STATE_TIMEOUT = 0x04
} PCD_StateTypeDef;


typedef enum
{
  LPM_L0 = 0x00,
  LPM_L1 = 0x01,
  LPM_L2 = 0x02,
  LPM_L3 = 0x03,
} PCD_LPM_StateTypeDef;

typedef enum
{
  PCD_LPM_L0_ACTIVE = 0x00,
  PCD_LPM_L1_ACTIVE = 0x01,
} PCD_LPM_MsgTypeDef;

typedef enum
{
  PCD_BCD_ERROR = 0xFF,
  PCD_BCD_CONTACT_DETECTION = 0xFE,
  PCD_BCD_STD_DOWNSTREAM_PORT = 0xFD,
  PCD_BCD_CHARGING_DOWNSTREAM_PORT = 0xFC,
  PCD_BCD_DEDICATED_CHARGING_PORT = 0xFB,
  PCD_BCD_DISCOVERY_COMPLETED = 0x00,

} PCD_BCD_MsgTypeDef;





typedef USB_OTG_GlobalTypeDef PCD_TypeDef;
typedef USB_OTG_CfgTypeDef PCD_InitTypeDef;
typedef USB_OTG_EPTypeDef PCD_EPTypeDef;
# 104 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_pcd.h"
typedef struct

{
  PCD_TypeDef *Instance;
  PCD_InitTypeDef Init;
  volatile uint8_t USB_Address;

  PCD_EPTypeDef IN_ep[16];
  PCD_EPTypeDef OUT_ep[16];





  HAL_LockTypeDef Lock;
  volatile PCD_StateTypeDef State;
  volatile uint32_t ErrorCode;
  uint32_t Setup[12];
  PCD_LPM_StateTypeDef LPM_State;
  uint32_t BESL;


  uint32_t lpm_active;


  uint32_t battery_charging_active;

  void *pData;
# 152 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_pcd.h"
} PCD_HandleTypeDef;






# 1 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_pcd_ex.h" 1
# 51 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_pcd_ex.h"
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size);
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size);
# 62 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_pcd_ex.h"
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd);
HAL_StatusTypeDef HAL_PCDEx_DeActivateLPM(PCD_HandleTypeDef *hpcd);


HAL_StatusTypeDef HAL_PCDEx_ActivateBCD(PCD_HandleTypeDef *hpcd);
HAL_StatusTypeDef HAL_PCDEx_DeActivateBCD(PCD_HandleTypeDef *hpcd);
void HAL_PCDEx_BCD_VBUSDetect(PCD_HandleTypeDef *hpcd);

void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg);
void HAL_PCDEx_BCD_Callback(PCD_HandleTypeDef *hpcd, PCD_BCD_MsgTypeDef msg);
# 160 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_pcd.h" 2
# 248 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_pcd.h"
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd);
HAL_StatusTypeDef HAL_PCD_DeInit(PCD_HandleTypeDef *hpcd);
void HAL_PCD_MspInit(PCD_HandleTypeDef *hpcd);
void HAL_PCD_MspDeInit(PCD_HandleTypeDef *hpcd);
# 323 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_pcd.h"
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd);
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd);
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd);

void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd);
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd);
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd);
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd);
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd);
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd);
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd);

void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum);
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum);
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum);
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum);
# 347 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_pcd.h"
HAL_StatusTypeDef HAL_PCD_DevConnect(PCD_HandleTypeDef *hpcd);
HAL_StatusTypeDef HAL_PCD_DevDisconnect(PCD_HandleTypeDef *hpcd);
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address);
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type);
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr);
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len);
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len);
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr);
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr);
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr);
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr);
HAL_StatusTypeDef HAL_PCD_ActivateRemoteWakeup(PCD_HandleTypeDef *hpcd);
HAL_StatusTypeDef HAL_PCD_DeActivateRemoteWakeup(PCD_HandleTypeDef *hpcd);
# 368 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_pcd.h"
PCD_StateTypeDef HAL_PCD_GetState(PCD_HandleTypeDef *hpcd);
# 44 "./boards/stm32l4xx_hal_conf_base.h" 2
# 1 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_pwr.h" 1
# 48 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_pwr.h"
typedef struct
{
  uint32_t PVDLevel;


  uint32_t Mode;

}PWR_PVDTypeDef;
# 343 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_pwr.h"
# 1 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_pwr_ex.h" 1
# 50 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_pwr_ex.h"
typedef struct
{
  uint32_t PVMType;
# 61 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_pwr_ex.h"
  uint32_t Mode;

}PWR_PVMTypeDef;
# 813 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_pwr_ex.h"
uint32_t HAL_PWREx_GetVoltageRange(void);
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling);
void HAL_PWREx_EnableBatteryCharging(uint32_t ResistorSelection);
void HAL_PWREx_DisableBatteryCharging(void);

void HAL_PWREx_EnableVddUSB(void);
void HAL_PWREx_DisableVddUSB(void);


void HAL_PWREx_EnableVddIO2(void);
void HAL_PWREx_DisableVddIO2(void);

void HAL_PWREx_EnableInternalWakeUpLine(void);
void HAL_PWREx_DisableInternalWakeUpLine(void);
HAL_StatusTypeDef HAL_PWREx_EnableGPIOPullUp(uint32_t GPIO, uint32_t GPIONumber);
HAL_StatusTypeDef HAL_PWREx_DisableGPIOPullUp(uint32_t GPIO, uint32_t GPIONumber);
HAL_StatusTypeDef HAL_PWREx_EnableGPIOPullDown(uint32_t GPIO, uint32_t GPIONumber);
HAL_StatusTypeDef HAL_PWREx_DisableGPIOPullDown(uint32_t GPIO, uint32_t GPIONumber);
void HAL_PWREx_EnablePullUpPullDownConfig(void);
void HAL_PWREx_DisablePullUpPullDownConfig(void);
void HAL_PWREx_EnableSRAM2ContentRetention(void);
void HAL_PWREx_DisableSRAM2ContentRetention(void);

void HAL_PWREx_EnableSRAM3ContentRetention(void);
void HAL_PWREx_DisableSRAM3ContentRetention(void);


void HAL_PWREx_EnableDSIPinsPDActivation(void);
void HAL_PWREx_DisableDSIPinsPDActivation(void);


void HAL_PWREx_EnablePVM1(void);
void HAL_PWREx_DisablePVM1(void);


void HAL_PWREx_EnablePVM2(void);
void HAL_PWREx_DisablePVM2(void);

void HAL_PWREx_EnablePVM3(void);
void HAL_PWREx_DisablePVM3(void);
void HAL_PWREx_EnablePVM4(void);
void HAL_PWREx_DisablePVM4(void);
HAL_StatusTypeDef HAL_PWREx_ConfigPVM(PWR_PVMTypeDef *sConfigPVM);
# 867 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_pwr_ex.h"
void HAL_PWREx_EnableLowPowerRunMode(void);
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void);
void HAL_PWREx_EnterSTOP0Mode(uint8_t STOPEntry);
void HAL_PWREx_EnterSTOP1Mode(uint8_t STOPEntry);
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry);
void HAL_PWREx_EnterSHUTDOWNMode(void);

void HAL_PWREx_PVD_PVM_IRQHandler(void);

void HAL_PWREx_PVM1Callback(void);


void HAL_PWREx_PVM2Callback(void);

void HAL_PWREx_PVM3Callback(void);
void HAL_PWREx_PVM4Callback(void);
# 344 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_pwr.h" 2
# 356 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_pwr.h"
void HAL_PWR_DeInit(void);
void HAL_PWR_EnableBkUpAccess(void);
void HAL_PWR_DisableBkUpAccess(void);
# 369 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_pwr.h"
HAL_StatusTypeDef HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD);
void HAL_PWR_EnablePVD(void);
void HAL_PWR_DisablePVD(void);



void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinPolarity);
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx);


void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry);
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry);
void HAL_PWR_EnterSTANDBYMode(void);

void HAL_PWR_EnableSleepOnExit(void);
void HAL_PWR_DisableSleepOnExit(void);
void HAL_PWR_EnableSEVOnPend(void);
void HAL_PWR_DisableSEVOnPend(void);

void HAL_PWR_PVDCallback(void);
# 45 "./boards/stm32l4xx_hal_conf_base.h" 2
# 1 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_rcc.h" 1
# 47 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_rcc.h"
typedef struct
{
  uint32_t PLLState;


  uint32_t PLLSource;


  uint32_t PLLM;



  uint32_t PLLN;



  uint32_t PLLP;



  uint32_t PLLQ;


  uint32_t PLLR;




}RCC_PLLInitTypeDef;




typedef struct
{
  uint32_t OscillatorType;


  uint32_t HSEState;


  uint32_t LSEState;


  uint32_t HSIState;


  uint32_t HSICalibrationValue;



  uint32_t LSIState;







  uint32_t MSIState;


  uint32_t MSICalibrationValue;


  uint32_t MSIClockRange;


  uint32_t HSI48State;


  RCC_PLLInitTypeDef PLL;

}RCC_OscInitTypeDef;




typedef struct
{
  uint32_t ClockType;


  uint32_t SYSCLKSource;


  uint32_t AHBCLKDivider;


  uint32_t APB1CLKDivider;


  uint32_t APB2CLKDivider;


}RCC_ClkInitTypeDef;
# 4682 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_rcc.h"
# 1 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_rcc_ex.h" 1
# 49 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_rcc_ex.h"
typedef struct
{

  uint32_t PLLSAI1Source;



  uint32_t PLLSAI1M;






  uint32_t PLLSAI1N;


  uint32_t PLLSAI1P;


  uint32_t PLLSAI1Q;


  uint32_t PLLSAI1R;


  uint32_t PLLSAI1ClockOut;

}RCC_PLLSAI1InitTypeDef;






typedef struct
{

  uint32_t PLLSAI2Source;



  uint32_t PLLSAI2M;






  uint32_t PLLSAI2N;


  uint32_t PLLSAI2P;



  uint32_t PLLSAI2Q;



  uint32_t PLLSAI2R;


  uint32_t PLLSAI2ClockOut;

}RCC_PLLSAI2InitTypeDef;






typedef struct
{
  uint32_t PeriphClockSelection;



  RCC_PLLSAI1InitTypeDef PLLSAI1;




  RCC_PLLSAI2InitTypeDef PLLSAI2;




  uint32_t Usart1ClockSelection;


  uint32_t Usart2ClockSelection;




  uint32_t Usart3ClockSelection;






  uint32_t Uart4ClockSelection;






  uint32_t Uart5ClockSelection;




  uint32_t Lpuart1ClockSelection;


  uint32_t I2c1ClockSelection;




  uint32_t I2c2ClockSelection;




  uint32_t I2c3ClockSelection;




  uint32_t I2c4ClockSelection;




  uint32_t Lptim1ClockSelection;


  uint32_t Lptim2ClockSelection;



  uint32_t Sai1ClockSelection;





  uint32_t Sai2ClockSelection;






  uint32_t UsbClockSelection;






  uint32_t Sdmmc1ClockSelection;




  uint32_t RngClockSelection;



  uint32_t AdcClockSelection;
# 236 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_rcc_ex.h"
  uint32_t Dfsdm1ClockSelection;



  uint32_t Dfsdm1AudioClockSelection;
# 249 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_rcc_ex.h"
  uint32_t LtdcClockSelection;






  uint32_t DsiClockSelection;






  uint32_t OspiClockSelection;




  uint32_t RTCClockSelection;

}RCC_PeriphCLKInitTypeDef;






typedef struct
{
  uint32_t Prescaler;


  uint32_t Source;


  uint32_t Polarity;


  uint32_t ReloadValue;



  uint32_t ErrorLimitValue;


  uint32_t HSI48CalibrationValue;



}RCC_CRSInitTypeDef;




typedef struct
{
  uint32_t ReloadValue;


  uint32_t HSI48CalibrationValue;


  uint32_t FreqErrorCapture;



  uint32_t FreqErrorDirection;




}RCC_CRSSynchroInfoTypeDef;
# 2394 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_rcc_ex.h"
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef *PeriphClkInit);
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef *PeriphClkInit);
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk);
# 2407 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_rcc_ex.h"
HAL_StatusTypeDef HAL_RCCEx_EnablePLLSAI1(RCC_PLLSAI1InitTypeDef *PLLSAI1Init);
HAL_StatusTypeDef HAL_RCCEx_DisablePLLSAI1(void);





HAL_StatusTypeDef HAL_RCCEx_EnablePLLSAI2(RCC_PLLSAI2InitTypeDef *PLLSAI2Init);
HAL_StatusTypeDef HAL_RCCEx_DisablePLLSAI2(void);



void HAL_RCCEx_WakeUpStopCLKConfig(uint32_t WakeUpClk);
void HAL_RCCEx_StandbyMSIRangeConfig(uint32_t MSIRange);
void HAL_RCCEx_EnableLSECSS(void);
void HAL_RCCEx_DisableLSECSS(void);
void HAL_RCCEx_EnableLSECSS_IT(void);
void HAL_RCCEx_LSECSS_IRQHandler(void);
void HAL_RCCEx_LSECSS_Callback(void);
void HAL_RCCEx_EnableLSCO(uint32_t LSCOSource);
void HAL_RCCEx_DisableLSCO(void);
void HAL_RCCEx_EnableMSIPLLMode(void);
void HAL_RCCEx_DisableMSIPLLMode(void);
# 2441 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_rcc_ex.h"
void HAL_RCCEx_CRSConfig(RCC_CRSInitTypeDef *pInit);
void HAL_RCCEx_CRSSoftwareSynchronizationGenerate(void);
void HAL_RCCEx_CRSGetSynchronizationInfo(RCC_CRSSynchroInfoTypeDef *pSynchroInfo);
uint32_t HAL_RCCEx_CRSWaitSynchronization(uint32_t Timeout);
void HAL_RCCEx_CRS_IRQHandler(void);
void HAL_RCCEx_CRS_SyncOkCallback(void);
void HAL_RCCEx_CRS_SyncWarnCallback(void);
void HAL_RCCEx_CRS_ExpectedSyncCallback(void);
void HAL_RCCEx_CRS_ErrorCallback(uint32_t Error);
# 4683 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_rcc.h" 2
# 4695 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_rcc.h"
HAL_StatusTypeDef HAL_RCC_DeInit(void);
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef *RCC_OscInitStruct);
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef *RCC_ClkInitStruct, uint32_t FLatency);
# 4708 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_rcc.h"
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv);
void HAL_RCC_EnableCSS(void);
uint32_t HAL_RCC_GetSysClockFreq(void);
uint32_t HAL_RCC_GetHCLKFreq(void);
uint32_t HAL_RCC_GetPCLK1Freq(void);
uint32_t HAL_RCC_GetPCLK2Freq(void);
void HAL_RCC_GetOscConfig(RCC_OscInitTypeDef *RCC_OscInitStruct);
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef *RCC_ClkInitStruct, uint32_t *pFLatency);

void HAL_RCC_NMI_IRQHandler(void);

void HAL_RCC_CSSCallback(void);
# 46 "./boards/stm32l4xx_hal_conf_base.h" 2
# 1 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_rtc.h" 1
# 47 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_rtc.h"
typedef enum
{
  HAL_RTC_STATE_RESET = 0x00U,
  HAL_RTC_STATE_READY = 0x01U,
  HAL_RTC_STATE_BUSY = 0x02U,
  HAL_RTC_STATE_TIMEOUT = 0x03U,
  HAL_RTC_STATE_ERROR = 0x04U

} HAL_RTCStateTypeDef;




typedef struct
{
  uint32_t HourFormat;


  uint32_t AsynchPrediv;


  uint32_t SynchPrediv;


  uint32_t OutPut;


  uint32_t OutPutRemap;


  uint32_t OutPutPolarity;


  uint32_t OutPutType;





} RTC_InitTypeDef;




typedef struct
{
  uint8_t Hours;



  uint8_t Minutes;


  uint8_t Seconds;


  uint8_t TimeFormat;


  uint32_t SubSeconds;



  uint32_t SecondFraction;





  uint32_t DayLightSaving;


  uint32_t StoreOperation;


} RTC_TimeTypeDef;




typedef struct
{
  uint8_t WeekDay;


  uint8_t Month;


  uint8_t Date;


  uint8_t Year;


} RTC_DateTypeDef;




typedef struct
{
  RTC_TimeTypeDef AlarmTime;

  uint32_t AlarmMask;


  uint32_t AlarmSubSecondMask;


  uint32_t AlarmDateWeekDaySel;


  uint8_t AlarmDateWeekDay;



  uint32_t Alarm;

} RTC_AlarmTypeDef;




typedef struct __RTC_HandleTypeDef
{
  RTC_TypeDef *Instance;




  RTC_InitTypeDef Init;

  HAL_LockTypeDef Lock;

  volatile HAL_RTCStateTypeDef State;
# 199 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_rtc.h"
} RTC_HandleTypeDef;
# 825 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_rtc.h"
# 1 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_rtc_ex.h" 1
# 47 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_rtc_ex.h"
typedef struct
{
  uint32_t Tamper;


  uint32_t Interrupt;


  uint32_t Trigger;


  uint32_t NoErase;


  uint32_t MaskFlag;


  uint32_t Filter;


  uint32_t SamplingFrequency;


  uint32_t PrechargeDuration;


  uint32_t TamperPullUp;


  uint32_t TimeStampOnTamperDetection;

} RTC_TamperTypeDef;
# 1245 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_rtc_ex.h"
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin);
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp_IT(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin);
HAL_StatusTypeDef HAL_RTCEx_DeactivateTimeStamp(RTC_HandleTypeDef *hrtc);
HAL_StatusTypeDef HAL_RTCEx_SetInternalTimeStamp(RTC_HandleTypeDef *hrtc);
HAL_StatusTypeDef HAL_RTCEx_DeactivateInternalTimeStamp(RTC_HandleTypeDef *hrtc);
HAL_StatusTypeDef HAL_RTCEx_GetTimeStamp(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTimeStamp, RTC_DateTypeDef *sTimeStampDate, uint32_t Format);
void HAL_RTCEx_TamperTimeStampIRQHandler(RTC_HandleTypeDef *hrtc);
void HAL_RTCEx_TimeStampEventCallback(RTC_HandleTypeDef *hrtc);
HAL_StatusTypeDef HAL_RTCEx_PollForTimeStampEvent(RTC_HandleTypeDef *hrtc, uint32_t Timeout);
# 1267 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_rtc_ex.h"
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock);



HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock);

HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc);
uint32_t HAL_RTCEx_GetWakeUpTimer(RTC_HandleTypeDef *hrtc);
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc);
void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc);
HAL_StatusTypeDef HAL_RTCEx_PollForWakeUpTimerEvent(RTC_HandleTypeDef *hrtc, uint32_t Timeout);
# 1291 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_rtc_ex.h"
HAL_StatusTypeDef HAL_RTCEx_SetSmoothCalib(RTC_HandleTypeDef *hrtc, uint32_t SmoothCalibPeriod, uint32_t SmoothCalibPlusPulses, uint32_t SmoothCalibMinusPulsesValue);



HAL_StatusTypeDef HAL_RTCEx_SetSynchroShift(RTC_HandleTypeDef *hrtc, uint32_t ShiftAdd1S, uint32_t ShiftSubFS);
HAL_StatusTypeDef HAL_RTCEx_SetCalibrationOutPut(RTC_HandleTypeDef *hrtc, uint32_t CalibOutput);
HAL_StatusTypeDef HAL_RTCEx_DeactivateCalibrationOutPut(RTC_HandleTypeDef *hrtc);
HAL_StatusTypeDef HAL_RTCEx_SetRefClock(RTC_HandleTypeDef *hrtc);
HAL_StatusTypeDef HAL_RTCEx_DeactivateRefClock(RTC_HandleTypeDef *hrtc);
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc);
HAL_StatusTypeDef HAL_RTCEx_DisableBypassShadow(RTC_HandleTypeDef *hrtc);
# 1311 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_rtc_ex.h"
void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc);
HAL_StatusTypeDef HAL_RTCEx_PollForAlarmBEvent(RTC_HandleTypeDef *hrtc, uint32_t Timeout);







HAL_StatusTypeDef HAL_RTCEx_SetTamper(RTC_HandleTypeDef *hrtc, RTC_TamperTypeDef *sTamper);
HAL_StatusTypeDef HAL_RTCEx_SetTamper_IT(RTC_HandleTypeDef *hrtc, RTC_TamperTypeDef *sTamper);
HAL_StatusTypeDef HAL_RTCEx_DeactivateTamper(RTC_HandleTypeDef *hrtc, uint32_t Tamper);


HAL_StatusTypeDef HAL_RTCEx_PollForTamper1Event(RTC_HandleTypeDef *hrtc, uint32_t Timeout);

HAL_StatusTypeDef HAL_RTCEx_PollForTamper2Event(RTC_HandleTypeDef *hrtc, uint32_t Timeout);

HAL_StatusTypeDef HAL_RTCEx_PollForTamper3Event(RTC_HandleTypeDef *hrtc, uint32_t Timeout);



void HAL_RTCEx_Tamper1EventCallback(RTC_HandleTypeDef *hrtc);

void HAL_RTCEx_Tamper2EventCallback(RTC_HandleTypeDef *hrtc);

void HAL_RTCEx_Tamper3EventCallback(RTC_HandleTypeDef *hrtc);
# 1348 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_rtc_ex.h"
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data);
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister);
# 826 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_rtc.h" 2
# 836 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_rtc.h"
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc);
HAL_StatusTypeDef HAL_RTC_DeInit(RTC_HandleTypeDef *hrtc);

void HAL_RTC_MspInit(RTC_HandleTypeDef *hrtc);
void HAL_RTC_MspDeInit(RTC_HandleTypeDef *hrtc);
# 855 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_rtc.h"
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format);
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format);
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format);
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format);
# 867 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_rtc.h"
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format);
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format);
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm);
HAL_StatusTypeDef HAL_RTC_GetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Alarm, uint32_t Format);
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc);
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc);
HAL_StatusTypeDef HAL_RTC_PollForAlarmAEvent(RTC_HandleTypeDef *hrtc, uint32_t Timeout);
# 882 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_rtc.h"
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc);
# 891 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_rtc.h"
HAL_RTCStateTypeDef HAL_RTC_GetState(RTC_HandleTypeDef *hrtc);
# 1042 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_rtc.h"
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc);
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc);
uint8_t RTC_ByteToBcd2(uint8_t Value);
uint8_t RTC_Bcd2ToByte(uint8_t Value);
# 47 "./boards/stm32l4xx_hal_conf_base.h" 2
# 1 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_sd.h" 1
# 31 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_sd.h"
# 1 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_sdmmc.h" 1
# 49 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_sdmmc.h"
typedef struct
{
  uint32_t ClockEdge;
# 60 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_sdmmc.h"
  uint32_t ClockPowerSave;



  uint32_t BusWide;


  uint32_t HardwareFlowControl;


  uint32_t ClockDiv;



  uint32_t Transceiver;



}SDMMC_InitTypeDef;





typedef struct
{
  uint32_t Argument;




  uint32_t CmdIndex;


  uint32_t Response;


  uint32_t WaitForInterrupt;



  uint32_t CPSM;


}SDMMC_CmdInitTypeDef;





typedef struct
{
  uint32_t DataTimeOut;

  uint32_t DataLength;

  uint32_t DataBlockSize;


  uint32_t TransferDir;



  uint32_t TransferMode;


  uint32_t DPSM;


}SDMMC_DataInitTypeDef;
# 1190 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_sdmmc.h"
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init);
# 1199 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_sdmmc.h"
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx);
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData);
# 1209 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_sdmmc.h"
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx);

HAL_StatusTypeDef SDMMC_PowerState_Cycle(SDMMC_TypeDef *SDMMCx);

HAL_StatusTypeDef SDMMC_PowerState_OFF(SDMMC_TypeDef *SDMMCx);
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx);


HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command);
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx);
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response);


HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data);
uint32_t SDMMC_GetDataCounter(SDMMC_TypeDef *SDMMCx);
uint32_t SDMMC_GetFIFOCount(SDMMC_TypeDef *SDMMCx);


HAL_StatusTypeDef SDMMC_SetSDMMCReadWaitMode(SDMMC_TypeDef *SDMMCx, uint32_t SDMMC_ReadWaitMode);


uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize);
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd);
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd);
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd);
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd);
uint32_t SDMMC_CmdEraseStartAdd(SDMMC_TypeDef *SDMMCx, uint32_t StartAdd);
uint32_t SDMMC_CmdSDEraseStartAdd(SDMMC_TypeDef *SDMMCx, uint32_t StartAdd);
uint32_t SDMMC_CmdEraseEndAdd(SDMMC_TypeDef *SDMMCx, uint32_t EndAdd);
uint32_t SDMMC_CmdSDEraseEndAdd(SDMMC_TypeDef *SDMMCx, uint32_t EndAdd);
uint32_t SDMMC_CmdErase(SDMMC_TypeDef *SDMMCx);
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx);
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr);
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx);
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx);
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument);
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument);
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth);
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx);
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx);
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument);
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA);
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument);
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx);

uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx);

uint32_t SDMMC_CmdOpCondition(SDMMC_TypeDef *SDMMCx, uint32_t Argument);
uint32_t SDMMC_CmdSwitch(SDMMC_TypeDef *SDMMCx, uint32_t Argument);

uint32_t SDMMC_CmdSendEXTCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument);
# 32 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_sd.h" 2
# 50 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_sd.h"
typedef enum
{
  HAL_SD_STATE_RESET = ((uint32_t)0x00000000U),
  HAL_SD_STATE_READY = ((uint32_t)0x00000001U),
  HAL_SD_STATE_TIMEOUT = ((uint32_t)0x00000002U),
  HAL_SD_STATE_BUSY = ((uint32_t)0x00000003U),
  HAL_SD_STATE_PROGRAMMING = ((uint32_t)0x00000004U),
  HAL_SD_STATE_RECEIVING = ((uint32_t)0x00000005U),
  HAL_SD_STATE_TRANSFER = ((uint32_t)0x00000006U),
  HAL_SD_STATE_ERROR = ((uint32_t)0x0000000FU)
}HAL_SD_StateTypeDef;







typedef uint32_t HAL_SD_CardStateTypeDef;
# 92 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_sd.h"
typedef struct
{
  uint32_t CardType;

  uint32_t CardVersion;

  uint32_t Class;

  uint32_t RelCardAdd;

  uint32_t BlockNbr;

  uint32_t BlockSize;

  uint32_t LogBlockNbr;

  uint32_t LogBlockSize;



  uint32_t CardSpeed;


}HAL_SD_CardInfoTypeDef;







typedef struct

{
  SDMMC_TypeDef *Instance;

  SDMMC_InitTypeDef Init;

  HAL_LockTypeDef Lock;

  uint8_t *pTxBuffPtr;

  uint32_t TxXferSize;

  uint8_t *pRxBuffPtr;

  uint32_t RxXferSize;

  volatile uint32_t Context;

  volatile HAL_SD_StateTypeDef State;

  volatile uint32_t ErrorCode;
# 153 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_sd.h"
  HAL_SD_CardInfoTypeDef SdCard;

  uint32_t CSD[4];

  uint32_t CID[4];
# 176 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_sd.h"
}SD_HandleTypeDef;
# 185 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_sd.h"
typedef struct
{
  volatile uint8_t CSDStruct;
  volatile uint8_t SysSpecVersion;
  volatile uint8_t Reserved1;
  volatile uint8_t TAAC;
  volatile uint8_t NSAC;
  volatile uint8_t MaxBusClkFrec;
  volatile uint16_t CardComdClasses;
  volatile uint8_t RdBlockLen;
  volatile uint8_t PartBlockRead;
  volatile uint8_t WrBlockMisalign;
  volatile uint8_t RdBlockMisalign;
  volatile uint8_t DSRImpl;
  volatile uint8_t Reserved2;
  volatile uint32_t DeviceSize;
  volatile uint8_t MaxRdCurrentVDDMin;
  volatile uint8_t MaxRdCurrentVDDMax;
  volatile uint8_t MaxWrCurrentVDDMin;
  volatile uint8_t MaxWrCurrentVDDMax;
  volatile uint8_t DeviceSizeMul;
  volatile uint8_t EraseGrSize;
  volatile uint8_t EraseGrMul;
  volatile uint8_t WrProtectGrSize;
  volatile uint8_t WrProtectGrEnable;
  volatile uint8_t ManDeflECC;
  volatile uint8_t WrSpeedFact;
  volatile uint8_t MaxWrBlockLen;
  volatile uint8_t WriteBlockPaPartial;
  volatile uint8_t Reserved3;
  volatile uint8_t ContentProtectAppli;
  volatile uint8_t FileFormatGroup;
  volatile uint8_t CopyFlag;
  volatile uint8_t PermWrProtect;
  volatile uint8_t TempWrProtect;
  volatile uint8_t FileFormat;
  volatile uint8_t ECC;
  volatile uint8_t CSD_CRC;
  volatile uint8_t Reserved4;
}HAL_SD_CardCSDTypeDef;







typedef struct
{
  volatile uint8_t ManufacturerID;
  volatile uint16_t OEM_AppliID;
  volatile uint32_t ProdName1;
  volatile uint8_t ProdName2;
  volatile uint8_t ProdRev;
  volatile uint32_t ProdSN;
  volatile uint8_t Reserved1;
  volatile uint16_t ManufactDate;
  volatile uint8_t CID_CRC;
  volatile uint8_t Reserved2;

}HAL_SD_CardCIDTypeDef;







typedef struct
{
  volatile uint8_t DataBusWidth;
  volatile uint8_t SecuredMode;
  volatile uint16_t CardType;
  volatile uint32_t ProtectedAreaSize;
  volatile uint8_t SpeedClass;
  volatile uint8_t PerformanceMove;
  volatile uint8_t AllocationUnitSize;
  volatile uint16_t EraseSize;
  volatile uint8_t EraseTimeout;
  volatile uint8_t EraseOffset;

  volatile uint8_t UhsSpeedGrade;
  volatile uint8_t UhsAllocationUnitSize;
  volatile uint8_t VideoSpeedClass;

}HAL_SD_CardStatusTypeDef;
# 682 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_sd.h"
# 1 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_sd_ex.h" 1
# 50 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_sd_ex.h"
typedef enum
{
  SD_DMA_BUFFER0 = 0x00U,
  SD_DMA_BUFFER1 = 0x01U,

}HAL_SDEx_DMABuffer_MemoryTypeDef;
# 75 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_sd_ex.h"
uint32_t HAL_SDEx_HighSpeed (SD_HandleTypeDef *hsd);

void HAL_SDEx_DriveTransceiver_1_8V_Callback(FlagStatus status);
# 86 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_sd_ex.h"
HAL_StatusTypeDef HAL_SDEx_ConfigDMAMultiBuffer(SD_HandleTypeDef *hsd, uint32_t * pDataBuffer0, uint32_t * pDataBuffer1, uint32_t BufferSize);
HAL_StatusTypeDef HAL_SDEx_ReadBlocksDMAMultiBuffer(SD_HandleTypeDef *hsd, uint32_t BlockAdd, uint32_t NumberOfBlocks);
HAL_StatusTypeDef HAL_SDEx_WriteBlocksDMAMultiBuffer(SD_HandleTypeDef *hsd, uint32_t BlockAdd, uint32_t NumberOfBlocks);
HAL_StatusTypeDef HAL_SDEx_ChangeDMABuffer(SD_HandleTypeDef *hsd, HAL_SDEx_DMABuffer_MemoryTypeDef Buffer, uint32_t *pDataBuffer);

void HAL_SDEx_Read_DMADoubleBuffer0CpltCallback(SD_HandleTypeDef *hsd);
void HAL_SDEx_Read_DMADoubleBuffer1CpltCallback(SD_HandleTypeDef *hsd);
void HAL_SDEx_Write_DMADoubleBuffer0CpltCallback(SD_HandleTypeDef *hsd);
void HAL_SDEx_Write_DMADoubleBuffer1CpltCallback(SD_HandleTypeDef *hsd);
# 683 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_sd.h" 2
# 693 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_sd.h"
HAL_StatusTypeDef HAL_SD_Init (SD_HandleTypeDef *hsd);
HAL_StatusTypeDef HAL_SD_InitCard (SD_HandleTypeDef *hsd);
HAL_StatusTypeDef HAL_SD_DeInit (SD_HandleTypeDef *hsd);
void HAL_SD_MspInit (SD_HandleTypeDef *hsd);
void HAL_SD_MspDeInit(SD_HandleTypeDef *hsd);
# 706 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_sd.h"
HAL_StatusTypeDef HAL_SD_ReadBlocks (SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout);
HAL_StatusTypeDef HAL_SD_WriteBlocks (SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout);
HAL_StatusTypeDef HAL_SD_Erase (SD_HandleTypeDef *hsd, uint32_t BlockStartAdd, uint32_t BlockEndAdd);

HAL_StatusTypeDef HAL_SD_ReadBlocks_IT (SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks);
HAL_StatusTypeDef HAL_SD_WriteBlocks_IT (SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks);

HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA (SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks);
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks);

void HAL_SD_IRQHandler (SD_HandleTypeDef *hsd);


void HAL_SD_TxCpltCallback (SD_HandleTypeDef *hsd);
void HAL_SD_RxCpltCallback (SD_HandleTypeDef *hsd);
void HAL_SD_ErrorCallback (SD_HandleTypeDef *hsd);
void HAL_SD_AbortCallback (SD_HandleTypeDef *hsd);
# 742 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_sd.h"
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode);
HAL_StatusTypeDef HAL_SD_ConfigSpeedBusOperation(SD_HandleTypeDef *hsd, uint32_t SpeedMode);







HAL_StatusTypeDef HAL_SD_SendSDStatus (SD_HandleTypeDef *hsd, uint32_t *pSDstatus);
HAL_SD_CardStateTypeDef HAL_SD_GetCardState (SD_HandleTypeDef *hsd);
HAL_StatusTypeDef HAL_SD_GetCardCID (SD_HandleTypeDef *hsd, HAL_SD_CardCIDTypeDef *pCID);
HAL_StatusTypeDef HAL_SD_GetCardCSD (SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD);
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus);
HAL_StatusTypeDef HAL_SD_GetCardInfo (SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo);







HAL_SD_StateTypeDef HAL_SD_GetState(SD_HandleTypeDef *hsd);
uint32_t HAL_SD_GetError(SD_HandleTypeDef *hsd);







HAL_StatusTypeDef HAL_SD_Abort (SD_HandleTypeDef *hsd);
HAL_StatusTypeDef HAL_SD_Abort_IT(SD_HandleTypeDef *hsd);
# 48 "./boards/stm32l4xx_hal_conf_base.h" 2
# 1 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_spi.h" 1
# 47 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_spi.h"
typedef struct
{
  uint32_t Mode;


  uint32_t Direction;


  uint32_t DataSize;


  uint32_t CLKPolarity;


  uint32_t CLKPhase;


  uint32_t NSS;



  uint32_t BaudRatePrescaler;





  uint32_t FirstBit;


  uint32_t TIMode;


  uint32_t CRCCalculation;


  uint32_t CRCPolynomial;


  uint32_t CRCLength;



  uint32_t NSSPMode;





} SPI_InitTypeDef;




typedef enum
{
  HAL_SPI_STATE_RESET = 0x00U,
  HAL_SPI_STATE_READY = 0x01U,
  HAL_SPI_STATE_BUSY = 0x02U,
  HAL_SPI_STATE_BUSY_TX = 0x03U,
  HAL_SPI_STATE_BUSY_RX = 0x04U,
  HAL_SPI_STATE_BUSY_TX_RX = 0x05U,
  HAL_SPI_STATE_ERROR = 0x06U,
  HAL_SPI_STATE_ABORT = 0x07U
} HAL_SPI_StateTypeDef;




typedef struct __SPI_HandleTypeDef
{
  SPI_TypeDef *Instance;

  SPI_InitTypeDef Init;

  uint8_t *pTxBuffPtr;

  uint16_t TxXferSize;

  volatile uint16_t TxXferCount;

  uint8_t *pRxBuffPtr;

  uint16_t RxXferSize;

  volatile uint16_t RxXferCount;

  uint32_t CRCSize;

  void (*RxISR)(struct __SPI_HandleTypeDef *hspi);

  void (*TxISR)(struct __SPI_HandleTypeDef *hspi);

  DMA_HandleTypeDef *hdmatx;

  DMA_HandleTypeDef *hdmarx;

  HAL_LockTypeDef Lock;

  volatile HAL_SPI_StateTypeDef State;

  volatile uint32_t ErrorCode;
# 163 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_spi.h"
} SPI_HandleTypeDef;
# 757 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_spi.h"
# 1 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_spi_ex.h" 1
# 52 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_spi_ex.h"
HAL_StatusTypeDef HAL_SPIEx_FlushRxFifo(SPI_HandleTypeDef *hspi);
# 758 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_spi.h" 2
# 768 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_spi.h"
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi);
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi);
void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi);
void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi);
# 786 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_spi.h"
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout);
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout);
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout);
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size);
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size);
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                             uint16_t Size);
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size);
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size);
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size);
HAL_StatusTypeDef HAL_SPI_DMAPause(SPI_HandleTypeDef *hspi);
HAL_StatusTypeDef HAL_SPI_DMAResume(SPI_HandleTypeDef *hspi);
HAL_StatusTypeDef HAL_SPI_DMAStop(SPI_HandleTypeDef *hspi);

HAL_StatusTypeDef HAL_SPI_Abort(SPI_HandleTypeDef *hspi);
HAL_StatusTypeDef HAL_SPI_Abort_IT(SPI_HandleTypeDef *hspi);

void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi);
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi);
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi);
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi);
void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi);
void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi);
void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi);
void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi);
void HAL_SPI_AbortCpltCallback(SPI_HandleTypeDef *hspi);
# 822 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_spi.h"
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi);
uint32_t HAL_SPI_GetError(SPI_HandleTypeDef *hspi);
# 49 "./boards/stm32l4xx_hal_conf_base.h" 2
# 1 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_tim.h" 1
# 47 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_tim.h"
typedef struct
{
  uint32_t Prescaler;


  uint32_t CounterMode;


  uint32_t Period;



  uint32_t ClockDivision;


  uint32_t RepetitionCounter;
# 71 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_tim.h"
  uint32_t AutoReloadPreload;

} TIM_Base_InitTypeDef;




typedef struct
{
  uint32_t OCMode;


  uint32_t Pulse;


  uint32_t OCPolarity;


  uint32_t OCNPolarity;



  uint32_t OCFastMode;




  uint32_t OCIdleState;



  uint32_t OCNIdleState;


} TIM_OC_InitTypeDef;




typedef struct
{
  uint32_t OCMode;


  uint32_t Pulse;


  uint32_t OCPolarity;


  uint32_t OCNPolarity;



  uint32_t OCIdleState;



  uint32_t OCNIdleState;



  uint32_t ICPolarity;


  uint32_t ICSelection;


  uint32_t ICFilter;

} TIM_OnePulse_InitTypeDef;




typedef struct
{
  uint32_t ICPolarity;


  uint32_t ICSelection;


  uint32_t ICPrescaler;


  uint32_t ICFilter;

} TIM_IC_InitTypeDef;




typedef struct
{
  uint32_t EncoderMode;


  uint32_t IC1Polarity;


  uint32_t IC1Selection;


  uint32_t IC1Prescaler;


  uint32_t IC1Filter;


  uint32_t IC2Polarity;


  uint32_t IC2Selection;


  uint32_t IC2Prescaler;


  uint32_t IC2Filter;

} TIM_Encoder_InitTypeDef;




typedef struct
{
  uint32_t ClockSource;

  uint32_t ClockPolarity;

  uint32_t ClockPrescaler;

  uint32_t ClockFilter;

} TIM_ClockConfigTypeDef;




typedef struct
{
  uint32_t ClearInputState;

  uint32_t ClearInputSource;

  uint32_t ClearInputPolarity;

  uint32_t ClearInputPrescaler;

  uint32_t ClearInputFilter;

} TIM_ClearInputConfigTypeDef;






typedef struct
{
  uint32_t MasterOutputTrigger;

  uint32_t MasterOutputTrigger2;

  uint32_t MasterSlaveMode;

} TIM_MasterConfigTypeDef;




typedef struct
{
  uint32_t SlaveMode;

  uint32_t InputTrigger;

  uint32_t TriggerPolarity;

  uint32_t TriggerPrescaler;

  uint32_t TriggerFilter;


} TIM_SlaveConfigTypeDef;






typedef struct
{
  uint32_t OffStateRunMode;

  uint32_t OffStateIDLEMode;

  uint32_t LockLevel;

  uint32_t DeadTime;

  uint32_t BreakState;

  uint32_t BreakPolarity;

  uint32_t BreakFilter;

  uint32_t Break2State;

  uint32_t Break2Polarity;

  uint32_t Break2Filter;

  uint32_t AutomaticOutput;

} TIM_BreakDeadTimeConfigTypeDef;




typedef enum
{
  HAL_TIM_STATE_RESET = 0x00U,
  HAL_TIM_STATE_READY = 0x01U,
  HAL_TIM_STATE_BUSY = 0x02U,
  HAL_TIM_STATE_TIMEOUT = 0x03U,
  HAL_TIM_STATE_ERROR = 0x04U
} HAL_TIM_StateTypeDef;




typedef enum
{
  HAL_TIM_ACTIVE_CHANNEL_1 = 0x01U,
  HAL_TIM_ACTIVE_CHANNEL_2 = 0x02U,
  HAL_TIM_ACTIVE_CHANNEL_3 = 0x04U,
  HAL_TIM_ACTIVE_CHANNEL_4 = 0x08U,
  HAL_TIM_ACTIVE_CHANNEL_5 = 0x10U,
  HAL_TIM_ACTIVE_CHANNEL_6 = 0x20U,
  HAL_TIM_ACTIVE_CHANNEL_CLEARED = 0x00U
} HAL_TIM_ActiveChannel;







typedef struct

{
  TIM_TypeDef *Instance;
  TIM_Base_InitTypeDef Init;
  HAL_TIM_ActiveChannel Channel;
  DMA_HandleTypeDef *hdma[7];

  HAL_LockTypeDef Lock;
  volatile HAL_TIM_StateTypeDef State;
# 363 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_tim.h"
} TIM_HandleTypeDef;
# 1879 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_tim.h"
# 1 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_tim_ex.h" 1
# 48 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_tim_ex.h"
typedef struct
{
  uint32_t IC1Polarity;


  uint32_t IC1Prescaler;


  uint32_t IC1Filter;


  uint32_t Commutation_Delay;

} TIM_HallSensor_InitTypeDef;




typedef struct
{
  uint32_t Source;

  uint32_t Enable;

  uint32_t Polarity;


}
TIMEx_BreakInputConfigTypeDef;
# 289 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_tim_ex.h"
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, TIM_HallSensor_InitTypeDef *sConfig);
HAL_StatusTypeDef HAL_TIMEx_HallSensor_DeInit(TIM_HandleTypeDef *htim);

void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef *htim);
void HAL_TIMEx_HallSensor_MspDeInit(TIM_HandleTypeDef *htim);


HAL_StatusTypeDef HAL_TIMEx_HallSensor_Start(TIM_HandleTypeDef *htim);
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Stop(TIM_HandleTypeDef *htim);

HAL_StatusTypeDef HAL_TIMEx_HallSensor_Start_IT(TIM_HandleTypeDef *htim);
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Stop_IT(TIM_HandleTypeDef *htim);

HAL_StatusTypeDef HAL_TIMEx_HallSensor_Start_DMA(TIM_HandleTypeDef *htim, uint32_t *pData, uint16_t Length);
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Stop_DMA(TIM_HandleTypeDef *htim);
# 314 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_tim_ex.h"
HAL_StatusTypeDef HAL_TIMEx_OCN_Start(TIM_HandleTypeDef *htim, uint32_t Channel);
HAL_StatusTypeDef HAL_TIMEx_OCN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel);


HAL_StatusTypeDef HAL_TIMEx_OCN_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel);
HAL_StatusTypeDef HAL_TIMEx_OCN_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel);


HAL_StatusTypeDef HAL_TIMEx_OCN_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length);
HAL_StatusTypeDef HAL_TIMEx_OCN_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel);
# 334 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_tim_ex.h"
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel);
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel);


HAL_StatusTypeDef HAL_TIMEx_PWMN_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel);
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel);

HAL_StatusTypeDef HAL_TIMEx_PWMN_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length);
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel);
# 353 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_tim_ex.h"
HAL_StatusTypeDef HAL_TIMEx_OnePulseN_Start(TIM_HandleTypeDef *htim, uint32_t OutputChannel);
HAL_StatusTypeDef HAL_TIMEx_OnePulseN_Stop(TIM_HandleTypeDef *htim, uint32_t OutputChannel);


HAL_StatusTypeDef HAL_TIMEx_OnePulseN_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel);
HAL_StatusTypeDef HAL_TIMEx_OnePulseN_Stop_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel);
# 368 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_tim_ex.h"
HAL_StatusTypeDef HAL_TIMEx_ConfigCommutEvent(TIM_HandleTypeDef *htim, uint32_t InputTrigger,
                                              uint32_t CommutationSource);
HAL_StatusTypeDef HAL_TIMEx_ConfigCommutEvent_IT(TIM_HandleTypeDef *htim, uint32_t InputTrigger,
                                                 uint32_t CommutationSource);
HAL_StatusTypeDef HAL_TIMEx_ConfigCommutEvent_DMA(TIM_HandleTypeDef *htim, uint32_t InputTrigger,
                                                  uint32_t CommutationSource);
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig);
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig);
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakInput(TIM_HandleTypeDef *htim, uint32_t BreakInput,
                                             TIMEx_BreakInputConfigTypeDef *sBreakInputConfig);
HAL_StatusTypeDef HAL_TIMEx_GroupChannel5(TIM_HandleTypeDef *htim, uint32_t Channels);
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap);
# 391 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_tim_ex.h"
void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim);
void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim);
void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim);
void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim);
# 404 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_tim_ex.h"
HAL_TIM_StateTypeDef HAL_TIMEx_HallSensor_GetState(TIM_HandleTypeDef *htim);
# 418 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_tim_ex.h"
void TIMEx_DMACommutationCplt(DMA_HandleTypeDef *hdma);
void TIMEx_DMACommutationHalfCplt(DMA_HandleTypeDef *hdma);
# 1880 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_tim.h" 2
# 1891 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_tim.h"
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim);
HAL_StatusTypeDef HAL_TIM_Base_DeInit(TIM_HandleTypeDef *htim);
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim);
void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef *htim);

HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim);
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim);

HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim);
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim);

HAL_StatusTypeDef HAL_TIM_Base_Start_DMA(TIM_HandleTypeDef *htim, uint32_t *pData, uint16_t Length);
HAL_StatusTypeDef HAL_TIM_Base_Stop_DMA(TIM_HandleTypeDef *htim);
# 1913 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_tim.h"
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim);
HAL_StatusTypeDef HAL_TIM_OC_DeInit(TIM_HandleTypeDef *htim);
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim);
void HAL_TIM_OC_MspDeInit(TIM_HandleTypeDef *htim);

HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel);
HAL_StatusTypeDef HAL_TIM_OC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel);

HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel);
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel);

HAL_StatusTypeDef HAL_TIM_OC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length);
HAL_StatusTypeDef HAL_TIM_OC_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel);
# 1935 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_tim.h"
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim);
HAL_StatusTypeDef HAL_TIM_PWM_DeInit(TIM_HandleTypeDef *htim);
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim);
void HAL_TIM_PWM_MspDeInit(TIM_HandleTypeDef *htim);

HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel);
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel);

HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel);
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel);

HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length);
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel);
# 1957 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_tim.h"
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim);
HAL_StatusTypeDef HAL_TIM_IC_DeInit(TIM_HandleTypeDef *htim);
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim);
void HAL_TIM_IC_MspDeInit(TIM_HandleTypeDef *htim);

HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel);
HAL_StatusTypeDef HAL_TIM_IC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel);

HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel);
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel);

HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length);
HAL_StatusTypeDef HAL_TIM_IC_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel);
# 1979 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_tim.h"
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode);
HAL_StatusTypeDef HAL_TIM_OnePulse_DeInit(TIM_HandleTypeDef *htim);
void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim);
void HAL_TIM_OnePulse_MspDeInit(TIM_HandleTypeDef *htim);

HAL_StatusTypeDef HAL_TIM_OnePulse_Start(TIM_HandleTypeDef *htim, uint32_t OutputChannel);
HAL_StatusTypeDef HAL_TIM_OnePulse_Stop(TIM_HandleTypeDef *htim, uint32_t OutputChannel);

HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel);
HAL_StatusTypeDef HAL_TIM_OnePulse_Stop_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel);
# 1998 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_tim.h"
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, TIM_Encoder_InitTypeDef *sConfig);
HAL_StatusTypeDef HAL_TIM_Encoder_DeInit(TIM_HandleTypeDef *htim);
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef *htim);
void HAL_TIM_Encoder_MspDeInit(TIM_HandleTypeDef *htim);

HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel);
HAL_StatusTypeDef HAL_TIM_Encoder_Stop(TIM_HandleTypeDef *htim, uint32_t Channel);

HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel);
HAL_StatusTypeDef HAL_TIM_Encoder_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel);

HAL_StatusTypeDef HAL_TIM_Encoder_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData1,
                                            uint32_t *pData2, uint16_t Length);
HAL_StatusTypeDef HAL_TIM_Encoder_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel);
# 2021 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_tim.h"
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim);
# 2031 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_tim.h"
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef *sConfig, uint32_t Channel);
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef *sConfig, uint32_t Channel);
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel);
HAL_StatusTypeDef HAL_TIM_OnePulse_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OnePulse_InitTypeDef *sConfig,
                                                 uint32_t OutputChannel, uint32_t InputChannel);
HAL_StatusTypeDef HAL_TIM_ConfigOCrefClear(TIM_HandleTypeDef *htim, TIM_ClearInputConfigTypeDef *sClearInputConfig,
                                           uint32_t Channel);
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig);
HAL_StatusTypeDef HAL_TIM_ConfigTI1Input(TIM_HandleTypeDef *htim, uint32_t TI1_Selection);
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig);
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro_IT(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig);
HAL_StatusTypeDef HAL_TIM_DMABurst_WriteStart(TIM_HandleTypeDef *htim, uint32_t BurstBaseAddress,
                                              uint32_t BurstRequestSrc, uint32_t *BurstBuffer, uint32_t BurstLength);
HAL_StatusTypeDef HAL_TIM_DMABurst_WriteStop(TIM_HandleTypeDef *htim, uint32_t BurstRequestSrc);
HAL_StatusTypeDef HAL_TIM_DMABurst_ReadStart(TIM_HandleTypeDef *htim, uint32_t BurstBaseAddress,
                                             uint32_t BurstRequestSrc, uint32_t *BurstBuffer, uint32_t BurstLength);
HAL_StatusTypeDef HAL_TIM_DMABurst_ReadStop(TIM_HandleTypeDef *htim, uint32_t BurstRequestSrc);
HAL_StatusTypeDef HAL_TIM_GenerateEvent(TIM_HandleTypeDef *htim, uint32_t EventSource);
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel);
# 2059 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_tim.h"
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim);
void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim);
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim);
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim);
void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim);
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim);
void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim);
void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim);
void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim);
void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim);
# 2086 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_tim.h"
HAL_TIM_StateTypeDef HAL_TIM_Base_GetState(TIM_HandleTypeDef *htim);
HAL_TIM_StateTypeDef HAL_TIM_OC_GetState(TIM_HandleTypeDef *htim);
HAL_TIM_StateTypeDef HAL_TIM_PWM_GetState(TIM_HandleTypeDef *htim);
HAL_TIM_StateTypeDef HAL_TIM_IC_GetState(TIM_HandleTypeDef *htim);
HAL_TIM_StateTypeDef HAL_TIM_OnePulse_GetState(TIM_HandleTypeDef *htim);
HAL_TIM_StateTypeDef HAL_TIM_Encoder_GetState(TIM_HandleTypeDef *htim);
# 2105 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_tim.h"
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure);
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection, uint32_t TIM_ICFilter);
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config);
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter);

void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma);
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma);
void TIM_DMAError(DMA_HandleTypeDef *hdma);
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma);
void TIM_DMACaptureHalfCplt(DMA_HandleTypeDef *hdma);
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState);
# 50 "./boards/stm32l4xx_hal_conf_base.h" 2
# 1 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_uart.h" 1
# 47 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_uart.h"
typedef struct
{
  uint32_t BaudRate;
# 65 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_uart.h"
  uint32_t WordLength;


  uint32_t StopBits;


  uint32_t Parity;






  uint32_t Mode;


  uint32_t HwFlowCtl;



  uint32_t OverSampling;


  uint32_t OneBitSampling;




  uint32_t ClockPrescaler;



} UART_InitTypeDef;




typedef struct
{
  uint32_t AdvFeatureInit;



  uint32_t TxPinLevelInvert;


  uint32_t RxPinLevelInvert;


  uint32_t DataInvert;



  uint32_t Swap;


  uint32_t OverrunDisable;


  uint32_t DMADisableonRxError;


  uint32_t AutoBaudRateEnable;


  uint32_t AutoBaudRateMode;



  uint32_t MSBFirst;

} UART_AdvFeatureInitTypeDef;
# 179 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_uart.h"
typedef uint32_t HAL_UART_StateTypeDef;




typedef enum
{
  UART_CLOCKSOURCE_PCLK1 = 0x00U,
  UART_CLOCKSOURCE_PCLK2 = 0x01U,
  UART_CLOCKSOURCE_HSI = 0x02U,
  UART_CLOCKSOURCE_SYSCLK = 0x04U,
  UART_CLOCKSOURCE_LSE = 0x08U,
  UART_CLOCKSOURCE_UNDEFINED = 0x10U
} UART_ClockSourceTypeDef;




typedef struct __UART_HandleTypeDef
{
  USART_TypeDef *Instance;

  UART_InitTypeDef Init;

  UART_AdvFeatureInitTypeDef AdvancedInit;

  uint8_t *pTxBuffPtr;

  uint16_t TxXferSize;

  volatile uint16_t TxXferCount;

  uint8_t *pRxBuffPtr;

  uint16_t RxXferSize;

  volatile uint16_t RxXferCount;

  uint16_t Mask;


  uint32_t FifoMode;


  uint16_t NbRxDataToProcess;

  uint16_t NbTxDataToProcess;


  void (*RxISR)(struct __UART_HandleTypeDef *huart);

  void (*TxISR)(struct __UART_HandleTypeDef *huart);

  DMA_HandleTypeDef *hdmatx;

  DMA_HandleTypeDef *hdmarx;

  HAL_LockTypeDef Lock;

  volatile HAL_UART_StateTypeDef gState;



  volatile HAL_UART_StateTypeDef RxState;


  volatile uint32_t ErrorCode;
# 266 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_uart.h"
} UART_HandleTypeDef;
# 1555 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_uart.h"
# 1 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_uart_ex.h" 1
# 47 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_uart_ex.h"
typedef struct
{
  uint32_t WakeUpEvent;




  uint16_t AddressLength;


  uint8_t Address;
} UART_WakeUpTypeDef;
# 143 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_uart_ex.h"
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime);
# 154 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_uart_ex.h"
void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart);


void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart);
void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart);
# 170 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_uart_ex.h"
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection);
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart);
HAL_StatusTypeDef HAL_UARTEx_DisableStopMode(UART_HandleTypeDef *huart);




HAL_StatusTypeDef HAL_MultiProcessorEx_AddressLength_Set(UART_HandleTypeDef *huart, uint32_t AddressLength);

HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart);
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart);
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold);
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold);
# 1556 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_uart.h" 2
# 1568 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_uart.h"
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart);
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart);
HAL_StatusTypeDef HAL_LIN_Init(UART_HandleTypeDef *huart, uint32_t BreakDetectLength);
HAL_StatusTypeDef HAL_MultiProcessor_Init(UART_HandleTypeDef *huart, uint8_t Address, uint32_t WakeUpMethod);
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart);
void HAL_UART_MspInit(UART_HandleTypeDef *huart);
void HAL_UART_MspDeInit(UART_HandleTypeDef *huart);
# 1592 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_uart.h"
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout);
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout);
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size);
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size);
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size);
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size);
HAL_StatusTypeDef HAL_UART_DMAPause(UART_HandleTypeDef *huart);
HAL_StatusTypeDef HAL_UART_DMAResume(UART_HandleTypeDef *huart);
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart);

HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart);
HAL_StatusTypeDef HAL_UART_AbortTransmit(UART_HandleTypeDef *huart);
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart);
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart);
HAL_StatusTypeDef HAL_UART_AbortTransmit_IT(UART_HandleTypeDef *huart);
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart);

void HAL_UART_IRQHandler(UART_HandleTypeDef *huart);
void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart);
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart);
void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart);
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart);
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart);
void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart);
void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart);
void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart);
# 1628 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_uart.h"
HAL_StatusTypeDef HAL_LIN_SendBreak(UART_HandleTypeDef *huart);
HAL_StatusTypeDef HAL_MultiProcessor_EnableMuteMode(UART_HandleTypeDef *huart);
HAL_StatusTypeDef HAL_MultiProcessor_DisableMuteMode(UART_HandleTypeDef *huart);
void HAL_MultiProcessor_EnterMuteMode(UART_HandleTypeDef *huart);
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart);
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart);
# 1644 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_uart.h"
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart);
uint32_t HAL_UART_GetError(UART_HandleTypeDef *huart);
# 1662 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_uart.h"
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart);
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart);
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout);
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart);
# 51 "./boards/stm32l4xx_hal_conf_base.h" 2
# 1 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_usart.h" 1
# 47 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_usart.h"
typedef struct
{
  uint32_t BaudRate;







  uint32_t WordLength;


  uint32_t StopBits;


  uint32_t Parity;






  uint32_t Mode;


  uint32_t CLKPolarity;


  uint32_t CLKPhase;


  uint32_t CLKLastBit;




  uint32_t ClockPrescaler;


} USART_InitTypeDef;




typedef enum
{
  HAL_USART_STATE_RESET = 0x00U,
  HAL_USART_STATE_READY = 0x01U,
  HAL_USART_STATE_BUSY = 0x02U,
  HAL_USART_STATE_BUSY_TX = 0x12U,
  HAL_USART_STATE_BUSY_RX = 0x22U,
  HAL_USART_STATE_BUSY_TX_RX = 0x32U,
  HAL_USART_STATE_TIMEOUT = 0x03U,
  HAL_USART_STATE_ERROR = 0x04U
} HAL_USART_StateTypeDef;




typedef enum
{
  USART_CLOCKSOURCE_PCLK1 = 0x00U,
  USART_CLOCKSOURCE_PCLK2 = 0x01U,
  USART_CLOCKSOURCE_HSI = 0x02U,
  USART_CLOCKSOURCE_SYSCLK = 0x04U,
  USART_CLOCKSOURCE_LSE = 0x08U,
  USART_CLOCKSOURCE_UNDEFINED = 0x10U
} USART_ClockSourceTypeDef;




typedef struct __USART_HandleTypeDef
{
  USART_TypeDef *Instance;

  USART_InitTypeDef Init;

  uint8_t *pTxBuffPtr;

  uint16_t TxXferSize;

  volatile uint16_t TxXferCount;

  uint8_t *pRxBuffPtr;

  uint16_t RxXferSize;

  volatile uint16_t RxXferCount;

  uint16_t Mask;


  uint16_t NbRxDataToProcess;

  uint16_t NbTxDataToProcess;



  uint32_t SlaveMode;




  uint32_t FifoMode;



  void (*RxISR)(struct __USART_HandleTypeDef *husart);

  void (*TxISR)(struct __USART_HandleTypeDef *husart);

  DMA_HandleTypeDef *hdmatx;

  DMA_HandleTypeDef *hdmarx;

  HAL_LockTypeDef Lock;

  volatile HAL_USART_StateTypeDef State;

  volatile uint32_t ErrorCode;
# 187 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_usart.h"
} USART_HandleTypeDef;
# 871 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_usart.h"
# 1 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_usart_ex.h" 1
# 380 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_usart_ex.h"
void HAL_USARTEx_RxFifoFullCallback(USART_HandleTypeDef *husart);
void HAL_USARTEx_TxFifoEmptyCallback(USART_HandleTypeDef *husart);
# 394 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_usart_ex.h"
HAL_StatusTypeDef HAL_USARTEx_EnableSlaveMode(USART_HandleTypeDef *husart);
HAL_StatusTypeDef HAL_USARTEx_DisableSlaveMode(USART_HandleTypeDef *husart);
HAL_StatusTypeDef HAL_USARTEx_ConfigNSS(USART_HandleTypeDef *husart, uint32_t NSSConfig);


HAL_StatusTypeDef HAL_USARTEx_EnableFifoMode(USART_HandleTypeDef *husart);
HAL_StatusTypeDef HAL_USARTEx_DisableFifoMode(USART_HandleTypeDef *husart);
HAL_StatusTypeDef HAL_USARTEx_SetTxFifoThreshold(USART_HandleTypeDef *husart, uint32_t Threshold);
HAL_StatusTypeDef HAL_USARTEx_SetRxFifoThreshold(USART_HandleTypeDef *husart, uint32_t Threshold);
# 872 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_usart.h" 2
# 883 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_usart.h"
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart);
HAL_StatusTypeDef HAL_USART_DeInit(USART_HandleTypeDef *husart);
void HAL_USART_MspInit(USART_HandleTypeDef *husart);
void HAL_USART_MspDeInit(USART_HandleTypeDef *husart);
# 904 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_usart.h"
HAL_StatusTypeDef HAL_USART_Transmit(USART_HandleTypeDef *husart, uint8_t *pTxData, uint16_t Size, uint32_t Timeout);
HAL_StatusTypeDef HAL_USART_Receive(USART_HandleTypeDef *husart, uint8_t *pRxData, uint16_t Size, uint32_t Timeout);
HAL_StatusTypeDef HAL_USART_TransmitReceive(USART_HandleTypeDef *husart, uint8_t *pTxData, uint8_t *pRxData,
                                            uint16_t Size, uint32_t Timeout);
HAL_StatusTypeDef HAL_USART_Transmit_IT(USART_HandleTypeDef *husart, uint8_t *pTxData, uint16_t Size);
HAL_StatusTypeDef HAL_USART_Receive_IT(USART_HandleTypeDef *husart, uint8_t *pRxData, uint16_t Size);
HAL_StatusTypeDef HAL_USART_TransmitReceive_IT(USART_HandleTypeDef *husart, uint8_t *pTxData, uint8_t *pRxData,
                                               uint16_t Size);
HAL_StatusTypeDef HAL_USART_Transmit_DMA(USART_HandleTypeDef *husart, uint8_t *pTxData, uint16_t Size);
HAL_StatusTypeDef HAL_USART_Receive_DMA(USART_HandleTypeDef *husart, uint8_t *pRxData, uint16_t Size);
HAL_StatusTypeDef HAL_USART_TransmitReceive_DMA(USART_HandleTypeDef *husart, uint8_t *pTxData, uint8_t *pRxData,
                                                uint16_t Size);
HAL_StatusTypeDef HAL_USART_DMAPause(USART_HandleTypeDef *husart);
HAL_StatusTypeDef HAL_USART_DMAResume(USART_HandleTypeDef *husart);
HAL_StatusTypeDef HAL_USART_DMAStop(USART_HandleTypeDef *husart);

HAL_StatusTypeDef HAL_USART_Abort(USART_HandleTypeDef *husart);
HAL_StatusTypeDef HAL_USART_Abort_IT(USART_HandleTypeDef *husart);

void HAL_USART_IRQHandler(USART_HandleTypeDef *husart);
void HAL_USART_TxHalfCpltCallback(USART_HandleTypeDef *husart);
void HAL_USART_TxCpltCallback(USART_HandleTypeDef *husart);
void HAL_USART_RxCpltCallback(USART_HandleTypeDef *husart);
void HAL_USART_RxHalfCpltCallback(USART_HandleTypeDef *husart);
void HAL_USART_TxRxCpltCallback(USART_HandleTypeDef *husart);
void HAL_USART_ErrorCallback(USART_HandleTypeDef *husart);
void HAL_USART_AbortCpltCallback(USART_HandleTypeDef *husart);
# 941 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_usart.h"
HAL_USART_StateTypeDef HAL_USART_GetState(USART_HandleTypeDef *husart);
uint32_t HAL_USART_GetError(USART_HandleTypeDef *husart);
# 52 "./boards/stm32l4xx_hal_conf_base.h" 2
# 1 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_wwdg.h" 1
# 48 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_wwdg.h"
typedef struct
{
  uint32_t Prescaler;


  uint32_t Window;


  uint32_t Counter;


  uint32_t EWIMode ;


} WWDG_InitTypeDef;




typedef struct __WWDG_HandleTypeDef
{
  WWDG_TypeDef *Instance;

  WWDG_InitTypeDef Init;






} WWDG_HandleTypeDef;
# 254 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_wwdg.h"
HAL_StatusTypeDef HAL_WWDG_Init(WWDG_HandleTypeDef *hwwdg);
void HAL_WWDG_MspInit(WWDG_HandleTypeDef *hwwdg);
# 270 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_wwdg.h"
HAL_StatusTypeDef HAL_WWDG_Refresh(WWDG_HandleTypeDef *hwwdg);
void HAL_WWDG_IRQHandler(WWDG_HandleTypeDef *hwwdg);
void HAL_WWDG_EarlyWakeupCallback(WWDG_HandleTypeDef *hwwdg);
# 53 "./boards/stm32l4xx_hal_conf_base.h" 2

# 1 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_sram.h" 1
# 31 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_sram.h"
# 1 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_fmc.h" 1
# 161 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_fmc.h"
typedef struct
{
  uint32_t NSBank;


  uint32_t DataAddressMux;



  uint32_t MemoryType;



  uint32_t MemoryDataWidth;


  uint32_t BurstAccessMode;



  uint32_t WaitSignalPolarity;



  uint32_t WaitSignalActive;




  uint32_t WriteOperation;


  uint32_t WaitSignal;



  uint32_t ExtendedMode;


  uint32_t AsynchronousWait;



  uint32_t WriteBurst;


  uint32_t ContinuousClock;




  uint32_t WriteFifo;





  uint32_t PageSize;



  uint32_t NBLSetupTime;



}FMC_NORSRAM_InitTypeDef;




typedef struct
{
  uint32_t AddressSetupTime;




  uint32_t AddressHoldTime;




  uint32_t DataSetupTime;






  uint32_t DataHoldTime;





  uint32_t BusTurnAroundDuration;




  uint32_t CLKDivision;




  uint32_t DataLatency;







  uint32_t AccessMode;

}FMC_NORSRAM_TimingTypeDef;






typedef struct
{
  uint32_t NandBank;


  uint32_t Waitfeature;


  uint32_t MemoryDataWidth;


  uint32_t EccComputation;


  uint32_t ECCPageSize;


  uint32_t TCLRSetupTime;



  uint32_t TARSetupTime;


}FMC_NAND_InitTypeDef;




typedef struct
{
  uint32_t SetupTime;





  uint32_t WaitSetupTime;





  uint32_t HoldSetupTime;






  uint32_t HiZSetupTime;




}FMC_NAND_PCC_TimingTypeDef;
# 773 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_fmc.h"
HAL_StatusTypeDef FMC_NORSRAM_Init(FMC_Bank1_TypeDef *Device, FMC_NORSRAM_InitTypeDef *Init);
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_Bank1_TypeDef *Device, FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank);
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_Bank1E_TypeDef *Device, FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode);
HAL_StatusTypeDef FMC_NORSRAM_DeInit(FMC_Bank1_TypeDef *Device, FMC_Bank1E_TypeDef *ExDevice, uint32_t Bank);







HAL_StatusTypeDef FMC_NORSRAM_WriteOperation_Enable(FMC_Bank1_TypeDef *Device, uint32_t Bank);
HAL_StatusTypeDef FMC_NORSRAM_WriteOperation_Disable(FMC_Bank1_TypeDef *Device, uint32_t Bank);
# 801 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_fmc.h"
HAL_StatusTypeDef FMC_NAND_Init(FMC_Bank3_TypeDef *Device, FMC_NAND_InitTypeDef *Init);
HAL_StatusTypeDef FMC_NAND_CommonSpace_Timing_Init(FMC_Bank3_TypeDef *Device, FMC_NAND_PCC_TimingTypeDef *Timing, uint32_t Bank);
HAL_StatusTypeDef FMC_NAND_AttributeSpace_Timing_Init(FMC_Bank3_TypeDef *Device, FMC_NAND_PCC_TimingTypeDef *Timing, uint32_t Bank);
HAL_StatusTypeDef FMC_NAND_DeInit(FMC_Bank3_TypeDef *Device, uint32_t Bank);







HAL_StatusTypeDef FMC_NAND_ECC_Enable(FMC_Bank3_TypeDef *Device, uint32_t Bank);
HAL_StatusTypeDef FMC_NAND_ECC_Disable(FMC_Bank3_TypeDef *Device, uint32_t Bank);
HAL_StatusTypeDef FMC_NAND_GetECC(FMC_Bank3_TypeDef *Device, uint32_t *ECCval, uint32_t Bank, uint32_t Timeout);
# 32 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_sram.h" 2
# 48 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_sram.h"
typedef enum
{
  HAL_SRAM_STATE_RESET = 0x00U,
  HAL_SRAM_STATE_READY = 0x01U,
  HAL_SRAM_STATE_BUSY = 0x02U,
  HAL_SRAM_STATE_ERROR = 0x03U,
  HAL_SRAM_STATE_PROTECTED = 0x04U
}HAL_SRAM_StateTypeDef;




typedef struct
{
  FMC_Bank1_TypeDef *Instance;

  FMC_Bank1E_TypeDef *Extended;

  FMC_NORSRAM_InitTypeDef Init;

  HAL_LockTypeDef Lock;

  volatile HAL_SRAM_StateTypeDef State;

  DMA_HandleTypeDef *hdma;
}SRAM_HandleTypeDef;
# 106 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_sram.h"
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming);
HAL_StatusTypeDef HAL_SRAM_DeInit(SRAM_HandleTypeDef *hsram);
void HAL_SRAM_MspInit(SRAM_HandleTypeDef *hsram);
void HAL_SRAM_MspDeInit(SRAM_HandleTypeDef *hsram);
# 120 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_sram.h"
HAL_StatusTypeDef HAL_SRAM_Read_8b(SRAM_HandleTypeDef *hsram, uint32_t *pAddress, uint8_t *pDstBuffer, uint32_t BufferSize);
HAL_StatusTypeDef HAL_SRAM_Write_8b(SRAM_HandleTypeDef *hsram, uint32_t *pAddress, uint8_t *pSrcBuffer, uint32_t BufferSize);
HAL_StatusTypeDef HAL_SRAM_Read_16b(SRAM_HandleTypeDef *hsram, uint32_t *pAddress, uint16_t *pDstBuffer, uint32_t BufferSize);
HAL_StatusTypeDef HAL_SRAM_Write_16b(SRAM_HandleTypeDef *hsram, uint32_t *pAddress, uint16_t *pSrcBuffer, uint32_t BufferSize);
HAL_StatusTypeDef HAL_SRAM_Read_32b(SRAM_HandleTypeDef *hsram, uint32_t *pAddress, uint32_t *pDstBuffer, uint32_t BufferSize);
HAL_StatusTypeDef HAL_SRAM_Write_32b(SRAM_HandleTypeDef *hsram, uint32_t *pAddress, uint32_t *pSrcBuffer, uint32_t BufferSize);
HAL_StatusTypeDef HAL_SRAM_Read_DMA(SRAM_HandleTypeDef *hsram, uint32_t *pAddress, uint32_t *pDstBuffer, uint32_t BufferSize);
HAL_StatusTypeDef HAL_SRAM_Write_DMA(SRAM_HandleTypeDef *hsram, uint32_t *pAddress, uint32_t *pSrcBuffer, uint32_t BufferSize);

void HAL_SRAM_DMA_XferCpltCallback(DMA_HandleTypeDef *hdma);
void HAL_SRAM_DMA_XferErrorCallback(DMA_HandleTypeDef *hdma);
# 141 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_sram.h"
HAL_StatusTypeDef HAL_SRAM_WriteOperation_Enable(SRAM_HandleTypeDef *hsram);
HAL_StatusTypeDef HAL_SRAM_WriteOperation_Disable(SRAM_HandleTypeDef *hsram);
# 153 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_sram.h"
HAL_SRAM_StateTypeDef HAL_SRAM_GetState(SRAM_HandleTypeDef *hsram);
# 55 "./boards/stm32l4xx_hal_conf_base.h" 2
# 1 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_ltdc.h" 1
# 55 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_ltdc.h"
typedef struct
{
  uint8_t Blue;


  uint8_t Green;


  uint8_t Red;


  uint8_t Reserved;
} LTDC_ColorTypeDef;




typedef struct
{
  uint32_t HSPolarity;


  uint32_t VSPolarity;


  uint32_t DEPolarity;


  uint32_t PCPolarity;


  uint32_t HorizontalSync;


  uint32_t VerticalSync;


  uint32_t AccumulatedHBP;


  uint32_t AccumulatedVBP;


  uint32_t AccumulatedActiveW;


  uint32_t AccumulatedActiveH;


  uint32_t TotalWidth;


  uint32_t TotalHeigh;


  LTDC_ColorTypeDef Backcolor;
} LTDC_InitTypeDef;




typedef struct
{
  uint32_t WindowX0;


  uint32_t WindowX1;


  uint32_t WindowY0;


  uint32_t WindowY1;


  uint32_t PixelFormat;


  uint32_t Alpha;


  uint32_t Alpha0;


  uint32_t BlendingFactor1;


  uint32_t BlendingFactor2;


  uint32_t FBStartAdress;

  uint32_t ImageWidth;


  uint32_t ImageHeight;


  LTDC_ColorTypeDef Backcolor;
} LTDC_LayerCfgTypeDef;




typedef enum
{
  HAL_LTDC_STATE_RESET = 0x00U,
  HAL_LTDC_STATE_READY = 0x01U,
  HAL_LTDC_STATE_BUSY = 0x02U,
  HAL_LTDC_STATE_TIMEOUT = 0x03U,
  HAL_LTDC_STATE_ERROR = 0x04U
} HAL_LTDC_StateTypeDef;







typedef struct

{
  LTDC_TypeDef *Instance;

  LTDC_InitTypeDef Init;

  LTDC_LayerCfgTypeDef LayerCfg[2U];

  HAL_LockTypeDef Lock;

  volatile HAL_LTDC_StateTypeDef State;

  volatile uint32_t ErrorCode;
# 200 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_ltdc.h"
} LTDC_HandleTypeDef;
# 536 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_ltdc.h"
# 1 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_ltdc_ex.h" 1
# 33 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_ltdc_ex.h"
# 1 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_dsi.h" 1
# 46 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_dsi.h"
typedef struct
{
  uint32_t AutomaticClockLaneControl;


  uint32_t TXEscapeCkdiv;


  uint32_t NumberOfLanes;


} DSI_InitTypeDef;




typedef struct
{
  uint32_t PLLNDIV;


  uint32_t PLLIDF;


  uint32_t PLLODF;


} DSI_PLLInitTypeDef;




typedef struct
{
  uint32_t VirtualChannelID;

  uint32_t ColorCoding;


  uint32_t LooselyPacked;



  uint32_t Mode;


  uint32_t PacketSize;

  uint32_t NumberOfChunks;

  uint32_t NullPacketSize;

  uint32_t HSPolarity;


  uint32_t VSPolarity;


  uint32_t DEPolarity;


  uint32_t HorizontalSyncActive;

  uint32_t HorizontalBackPorch;

  uint32_t HorizontalLine;

  uint32_t VerticalSyncActive;

  uint32_t VerticalBackPorch;

  uint32_t VerticalFrontPorch;

  uint32_t VerticalActive;

  uint32_t LPCommandEnable;


  uint32_t LPLargestPacketSize;


  uint32_t LPVACTLargestPacketSize;


  uint32_t LPHorizontalFrontPorchEnable;


  uint32_t LPHorizontalBackPorchEnable;


  uint32_t LPVerticalActiveEnable;


  uint32_t LPVerticalFrontPorchEnable;


  uint32_t LPVerticalBackPorchEnable;


  uint32_t LPVerticalSyncActiveEnable;


  uint32_t FrameBTAAcknowledgeEnable;


} DSI_VidCfgTypeDef;




typedef struct
{
  uint32_t VirtualChannelID;

  uint32_t ColorCoding;


  uint32_t CommandSize;


  uint32_t TearingEffectSource;


  uint32_t TearingEffectPolarity;


  uint32_t HSPolarity;


  uint32_t VSPolarity;


  uint32_t DEPolarity;


  uint32_t VSyncPol;


  uint32_t AutomaticRefresh;


  uint32_t TEAcknowledgeRequest;


} DSI_CmdCfgTypeDef;




typedef struct
{
  uint32_t LPGenShortWriteNoP;


  uint32_t LPGenShortWriteOneP;


  uint32_t LPGenShortWriteTwoP;


  uint32_t LPGenShortReadNoP;


  uint32_t LPGenShortReadOneP;


  uint32_t LPGenShortReadTwoP;


  uint32_t LPGenLongWrite;


  uint32_t LPDcsShortWriteNoP;


  uint32_t LPDcsShortWriteOneP;


  uint32_t LPDcsShortReadNoP;


  uint32_t LPDcsLongWrite;


  uint32_t LPMaxReadPacket;


  uint32_t AcknowledgeRequest;


} DSI_LPCmdTypeDef;




typedef struct
{
  uint32_t ClockLaneHS2LPTime;


  uint32_t ClockLaneLP2HSTime;


  uint32_t DataLaneHS2LPTime;


  uint32_t DataLaneLP2HSTime;


  uint32_t DataLaneMaxReadTime;

  uint32_t StopWaitTime;


} DSI_PHY_TimerTypeDef;




typedef struct
{
  uint32_t TimeoutCkdiv;

  uint32_t HighSpeedTransmissionTimeout;

  uint32_t LowPowerReceptionTimeout;

  uint32_t HighSpeedReadTimeout;

  uint32_t LowPowerReadTimeout;

  uint32_t HighSpeedWriteTimeout;

  uint32_t HighSpeedWritePrespMode;


  uint32_t LowPowerWriteTimeout;

  uint32_t BTATimeout;

} DSI_HOST_TimeoutTypeDef;




typedef enum
{
  HAL_DSI_STATE_RESET = 0x00U,
  HAL_DSI_STATE_READY = 0x01U,
  HAL_DSI_STATE_ERROR = 0x02U,
  HAL_DSI_STATE_BUSY = 0x03U,
  HAL_DSI_STATE_TIMEOUT = 0x04U
} HAL_DSI_StateTypeDef;







typedef struct

{
  DSI_TypeDef *Instance;
  DSI_InitTypeDef Init;
  HAL_LockTypeDef Lock;
  volatile HAL_DSI_StateTypeDef State;
  volatile uint32_t ErrorCode;
  uint32_t ErrorMsk;
# 326 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_dsi.h"
} DSI_HandleTypeDef;
# 1124 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_dsi.h"
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit);
HAL_StatusTypeDef HAL_DSI_DeInit(DSI_HandleTypeDef *hdsi);
void HAL_DSI_MspInit(DSI_HandleTypeDef *hdsi);
void HAL_DSI_MspDeInit(DSI_HandleTypeDef *hdsi);

void HAL_DSI_IRQHandler(DSI_HandleTypeDef *hdsi);
void HAL_DSI_TearingEffectCallback(DSI_HandleTypeDef *hdsi);
void HAL_DSI_EndOfRefreshCallback(DSI_HandleTypeDef *hdsi);
void HAL_DSI_ErrorCallback(DSI_HandleTypeDef *hdsi);
# 1141 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_dsi.h"
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID);
HAL_StatusTypeDef HAL_DSI_ConfigVideoMode(DSI_HandleTypeDef *hdsi, DSI_VidCfgTypeDef *VidCfg);
HAL_StatusTypeDef HAL_DSI_ConfigAdaptedCommandMode(DSI_HandleTypeDef *hdsi, DSI_CmdCfgTypeDef *CmdCfg);
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd);
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl);
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers);
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts);
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi);
HAL_StatusTypeDef HAL_DSI_Stop(DSI_HandleTypeDef *hdsi);
HAL_StatusTypeDef HAL_DSI_Refresh(DSI_HandleTypeDef *hdsi);
HAL_StatusTypeDef HAL_DSI_ColorMode(DSI_HandleTypeDef *hdsi, uint32_t ColorMode);
HAL_StatusTypeDef HAL_DSI_Shutdown(DSI_HandleTypeDef *hdsi, uint32_t Shutdown);
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2);
HAL_StatusTypeDef HAL_DSI_LongWrite(DSI_HandleTypeDef *hdsi,
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable);
HAL_StatusTypeDef HAL_DSI_Read(DSI_HandleTypeDef *hdsi,
                               uint32_t ChannelNbr,
                               uint8_t *Array,
                               uint32_t Size,
                               uint32_t Mode,
                               uint32_t DCSCmd,
                               uint8_t *ParametersTable);
HAL_StatusTypeDef HAL_DSI_EnterULPMData(DSI_HandleTypeDef *hdsi);
HAL_StatusTypeDef HAL_DSI_ExitULPMData(DSI_HandleTypeDef *hdsi);
HAL_StatusTypeDef HAL_DSI_EnterULPM(DSI_HandleTypeDef *hdsi);
HAL_StatusTypeDef HAL_DSI_ExitULPM(DSI_HandleTypeDef *hdsi);

HAL_StatusTypeDef HAL_DSI_PatternGeneratorStart(DSI_HandleTypeDef *hdsi, uint32_t Mode, uint32_t Orientation);
HAL_StatusTypeDef HAL_DSI_PatternGeneratorStop(DSI_HandleTypeDef *hdsi);

HAL_StatusTypeDef HAL_DSI_SetSlewRateAndDelayTuning(DSI_HandleTypeDef *hdsi, uint32_t CommDelay, uint32_t Lane,
                                                    uint32_t Value);
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency);
HAL_StatusTypeDef HAL_DSI_SetSDD(DSI_HandleTypeDef *hdsi, FunctionalState State);
HAL_StatusTypeDef HAL_DSI_SetLanePinsConfiguration(DSI_HandleTypeDef *hdsi, uint32_t CustomLane, uint32_t Lane,
                                                   FunctionalState State);
HAL_StatusTypeDef HAL_DSI_SetPHYTimings(DSI_HandleTypeDef *hdsi, uint32_t Timing, FunctionalState State,
                                        uint32_t Value);
HAL_StatusTypeDef HAL_DSI_ForceTXStopMode(DSI_HandleTypeDef *hdsi, uint32_t Lane, FunctionalState State);
HAL_StatusTypeDef HAL_DSI_ForceRXLowPower(DSI_HandleTypeDef *hdsi, FunctionalState State);
HAL_StatusTypeDef HAL_DSI_ForceDataLanesInRX(DSI_HandleTypeDef *hdsi, FunctionalState State);
HAL_StatusTypeDef HAL_DSI_SetPullDown(DSI_HandleTypeDef *hdsi, FunctionalState State);
HAL_StatusTypeDef HAL_DSI_SetContentionDetectionOff(DSI_HandleTypeDef *hdsi, FunctionalState State);

uint32_t HAL_DSI_GetError(DSI_HandleTypeDef *hdsi);
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors);
HAL_DSI_StateTypeDef HAL_DSI_GetState(DSI_HandleTypeDef *hdsi);
# 34 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_ltdc_ex.h" 2
# 54 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_ltdc_ex.h"
HAL_StatusTypeDef HAL_LTDCEx_StructInitFromVideoConfig(LTDC_HandleTypeDef *hltdc, DSI_VidCfgTypeDef *VidCfg);
HAL_StatusTypeDef HAL_LTDCEx_StructInitFromAdaptedCommandConfig(LTDC_HandleTypeDef *hltdc, DSI_CmdCfgTypeDef *CmdCfg);
# 537 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_ltdc.h" 2
# 546 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_ltdc.h"
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc);
HAL_StatusTypeDef HAL_LTDC_DeInit(LTDC_HandleTypeDef *hltdc);
void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc);
void HAL_LTDC_MspDeInit(LTDC_HandleTypeDef *hltdc);
void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc);
void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc);
void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc);
# 568 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_ltdc.h"
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc);
# 577 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_ltdc.h"
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx);
HAL_StatusTypeDef HAL_LTDC_SetWindowSize(LTDC_HandleTypeDef *hltdc, uint32_t XSize, uint32_t YSize, uint32_t LayerIdx);
HAL_StatusTypeDef HAL_LTDC_SetWindowPosition(LTDC_HandleTypeDef *hltdc, uint32_t X0, uint32_t Y0, uint32_t LayerIdx);
HAL_StatusTypeDef HAL_LTDC_SetPixelFormat(LTDC_HandleTypeDef *hltdc, uint32_t Pixelformat, uint32_t LayerIdx);
HAL_StatusTypeDef HAL_LTDC_SetAlpha(LTDC_HandleTypeDef *hltdc, uint32_t Alpha, uint32_t LayerIdx);
HAL_StatusTypeDef HAL_LTDC_SetAddress(LTDC_HandleTypeDef *hltdc, uint32_t Address, uint32_t LayerIdx);
HAL_StatusTypeDef HAL_LTDC_SetPitch(LTDC_HandleTypeDef *hltdc, uint32_t LinePitchInPixels, uint32_t LayerIdx);
HAL_StatusTypeDef HAL_LTDC_ConfigColorKeying(LTDC_HandleTypeDef *hltdc, uint32_t RGBValue, uint32_t LayerIdx);
HAL_StatusTypeDef HAL_LTDC_ConfigCLUT(LTDC_HandleTypeDef *hltdc, uint32_t *pCLUT, uint32_t CLUTSize, uint32_t LayerIdx);
HAL_StatusTypeDef HAL_LTDC_EnableColorKeying(LTDC_HandleTypeDef *hltdc, uint32_t LayerIdx);
HAL_StatusTypeDef HAL_LTDC_DisableColorKeying(LTDC_HandleTypeDef *hltdc, uint32_t LayerIdx);
HAL_StatusTypeDef HAL_LTDC_EnableCLUT(LTDC_HandleTypeDef *hltdc, uint32_t LayerIdx);
HAL_StatusTypeDef HAL_LTDC_DisableCLUT(LTDC_HandleTypeDef *hltdc, uint32_t LayerIdx);
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line);
HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc);
HAL_StatusTypeDef HAL_LTDC_DisableDither(LTDC_HandleTypeDef *hltdc);
HAL_StatusTypeDef HAL_LTDC_Reload(LTDC_HandleTypeDef *hltdc, uint32_t ReloadType);
HAL_StatusTypeDef HAL_LTDC_ConfigLayer_NoReload(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx);
HAL_StatusTypeDef HAL_LTDC_SetWindowSize_NoReload(LTDC_HandleTypeDef *hltdc, uint32_t XSize, uint32_t YSize, uint32_t LayerIdx);
HAL_StatusTypeDef HAL_LTDC_SetWindowPosition_NoReload(LTDC_HandleTypeDef *hltdc, uint32_t X0, uint32_t Y0, uint32_t LayerIdx);
HAL_StatusTypeDef HAL_LTDC_SetPixelFormat_NoReload(LTDC_HandleTypeDef *hltdc, uint32_t Pixelformat, uint32_t LayerIdx);
HAL_StatusTypeDef HAL_LTDC_SetAlpha_NoReload(LTDC_HandleTypeDef *hltdc, uint32_t Alpha, uint32_t LayerIdx);
HAL_StatusTypeDef HAL_LTDC_SetAddress_NoReload(LTDC_HandleTypeDef *hltdc, uint32_t Address, uint32_t LayerIdx);
HAL_StatusTypeDef HAL_LTDC_SetPitch_NoReload(LTDC_HandleTypeDef *hltdc, uint32_t LinePitchInPixels, uint32_t LayerIdx);
HAL_StatusTypeDef HAL_LTDC_ConfigColorKeying_NoReload(LTDC_HandleTypeDef *hltdc, uint32_t RGBValue, uint32_t LayerIdx);
HAL_StatusTypeDef HAL_LTDC_EnableColorKeying_NoReload(LTDC_HandleTypeDef *hltdc, uint32_t LayerIdx);
HAL_StatusTypeDef HAL_LTDC_DisableColorKeying_NoReload(LTDC_HandleTypeDef *hltdc, uint32_t LayerIdx);
HAL_StatusTypeDef HAL_LTDC_EnableCLUT_NoReload(LTDC_HandleTypeDef *hltdc, uint32_t LayerIdx);
HAL_StatusTypeDef HAL_LTDC_DisableCLUT_NoReload(LTDC_HandleTypeDef *hltdc, uint32_t LayerIdx);
# 615 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_ltdc.h"
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc);
uint32_t HAL_LTDC_GetError(LTDC_HandleTypeDef *hltdc);
# 56 "./boards/stm32l4xx_hal_conf_base.h" 2
# 1 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_gfxmmu.h" 1
# 49 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_gfxmmu.h"
typedef enum
{
  HAL_GFXMMU_STATE_RESET = 0x00U,
  HAL_GFXMMU_STATE_READY = 0x01U,
}HAL_GFXMMU_StateTypeDef;




typedef struct
{
  uint32_t Buf0Address;
  uint32_t Buf1Address;
  uint32_t Buf2Address;
  uint32_t Buf3Address;
}GFXMMU_BuffersTypeDef;




typedef struct
{
  FunctionalState Activation;
  uint32_t UsedInterrupts;


}GFXMMU_InterruptsTypeDef;




typedef struct
{
  uint32_t BlocksPerLine;

  uint32_t DefaultValue;
  GFXMMU_BuffersTypeDef Buffers;
  GFXMMU_InterruptsTypeDef Interrupts;
}GFXMMU_InitTypeDef;







typedef struct

{
  GFXMMU_TypeDef *Instance;
  GFXMMU_InitTypeDef Init;
  HAL_GFXMMU_StateTypeDef State;
  volatile uint32_t ErrorCode;





}GFXMMU_HandleTypeDef;




typedef struct
{
  uint32_t LineNumber;

  uint32_t LineStatus;

  uint32_t FirstVisibleBlock;

  uint32_t LastVisibleBlock;

  int32_t LineOffset;



}GFXMMU_LutLineTypeDef;
# 239 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_gfxmmu.h"
HAL_StatusTypeDef HAL_GFXMMU_Init(GFXMMU_HandleTypeDef *hgfxmmu);
HAL_StatusTypeDef HAL_GFXMMU_DeInit(GFXMMU_HandleTypeDef *hgfxmmu);
void HAL_GFXMMU_MspInit(GFXMMU_HandleTypeDef *hgfxmmu);
void HAL_GFXMMU_MspDeInit(GFXMMU_HandleTypeDef *hgfxmmu);
# 259 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_gfxmmu.h"
HAL_StatusTypeDef HAL_GFXMMU_ConfigLut(GFXMMU_HandleTypeDef *hgfxmmu,
                                       uint32_t FirstLine,
                                       uint32_t LinesNumber,
                                       uint32_t Address);

HAL_StatusTypeDef HAL_GFXMMU_DisableLutLines(GFXMMU_HandleTypeDef *hgfxmmu,
                                             uint32_t FirstLine,
                                             uint32_t LinesNumber);

HAL_StatusTypeDef HAL_GFXMMU_ConfigLutLine(GFXMMU_HandleTypeDef *hgfxmmu, GFXMMU_LutLineTypeDef *lutLine);

HAL_StatusTypeDef HAL_GFXMMU_ModifyBuffers(GFXMMU_HandleTypeDef *hgfxmmu, GFXMMU_BuffersTypeDef *Buffers);

void HAL_GFXMMU_IRQHandler(GFXMMU_HandleTypeDef *hgfxmmu);

void HAL_GFXMMU_ErrorCallback(GFXMMU_HandleTypeDef *hgfxmmu);
# 283 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_gfxmmu.h"
HAL_GFXMMU_StateTypeDef HAL_GFXMMU_GetState(GFXMMU_HandleTypeDef *hgfxmmu);

uint32_t HAL_GFXMMU_GetError(GFXMMU_HandleTypeDef *hgfxmmu);
# 57 "./boards/stm32l4xx_hal_conf_base.h" 2
# 1 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_dma2d.h" 1
# 50 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_dma2d.h"
typedef struct
{
  uint32_t Blue;


  uint32_t Green;


  uint32_t Red;

} DMA2D_ColorTypeDef;




typedef struct
{
  uint32_t *pCLUT;

  uint32_t CLUTColorMode;


  uint32_t Size;

} DMA2D_CLUTCfgTypeDef;




typedef struct
{
  uint32_t Mode;


  uint32_t ColorMode;


  uint32_t OutputOffset;

  uint32_t AlphaInverted;


  uint32_t RedBlueSwap;





  uint32_t BytesSwap;




  uint32_t LineOffsetMode;



} DMA2D_InitTypeDef;





typedef struct
{
  uint32_t InputOffset;


  uint32_t InputColorMode;


  uint32_t AlphaMode;


  uint32_t InputAlpha;







  uint32_t AlphaInverted;


  uint32_t RedBlueSwap;



} DMA2D_LayerCfgTypeDef;




typedef enum
{
  HAL_DMA2D_STATE_RESET = 0x00U,
  HAL_DMA2D_STATE_READY = 0x01U,
  HAL_DMA2D_STATE_BUSY = 0x02U,
  HAL_DMA2D_STATE_TIMEOUT = 0x03U,
  HAL_DMA2D_STATE_ERROR = 0x04U,
  HAL_DMA2D_STATE_SUSPEND = 0x05U
}HAL_DMA2D_StateTypeDef;




typedef struct __DMA2D_HandleTypeDef
{
  DMA2D_TypeDef *Instance;

  DMA2D_InitTypeDef Init;

  void (* XferCpltCallback)(struct __DMA2D_HandleTypeDef * hdma2d);

  void (* XferErrorCallback)(struct __DMA2D_HandleTypeDef * hdma2d);
# 178 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_dma2d.h"
  DMA2D_LayerCfgTypeDef LayerCfg[2U];

  HAL_LockTypeDef Lock;

  volatile HAL_DMA2D_StateTypeDef State;

  volatile uint32_t ErrorCode;
} DMA2D_HandleTypeDef;
# 497 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_dma2d.h"
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d);
HAL_StatusTypeDef HAL_DMA2D_DeInit (DMA2D_HandleTypeDef *hdma2d);
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d);
void HAL_DMA2D_MspDeInit(DMA2D_HandleTypeDef* hdma2d);
# 517 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_dma2d.h"
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height);
HAL_StatusTypeDef HAL_DMA2D_BlendingStart(DMA2D_HandleTypeDef *hdma2d, uint32_t SrcAddress1, uint32_t SrcAddress2, uint32_t DstAddress, uint32_t Width, uint32_t Height);
HAL_StatusTypeDef HAL_DMA2D_Start_IT(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height);
HAL_StatusTypeDef HAL_DMA2D_BlendingStart_IT(DMA2D_HandleTypeDef *hdma2d, uint32_t SrcAddress1, uint32_t SrcAddress2, uint32_t DstAddress, uint32_t Width, uint32_t Height);
HAL_StatusTypeDef HAL_DMA2D_Suspend(DMA2D_HandleTypeDef *hdma2d);
HAL_StatusTypeDef HAL_DMA2D_Resume(DMA2D_HandleTypeDef *hdma2d);
HAL_StatusTypeDef HAL_DMA2D_Abort(DMA2D_HandleTypeDef *hdma2d);
HAL_StatusTypeDef HAL_DMA2D_EnableCLUT(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx);
HAL_StatusTypeDef HAL_DMA2D_CLUTLoad(DMA2D_HandleTypeDef *hdma2d, DMA2D_CLUTCfgTypeDef CLUTCfg, uint32_t LayerIdx);
HAL_StatusTypeDef HAL_DMA2D_CLUTLoad_IT(DMA2D_HandleTypeDef *hdma2d, DMA2D_CLUTCfgTypeDef CLUTCfg, uint32_t LayerIdx);
HAL_StatusTypeDef HAL_DMA2D_CLUTLoading_Abort(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx);
HAL_StatusTypeDef HAL_DMA2D_CLUTLoading_Suspend(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx);
HAL_StatusTypeDef HAL_DMA2D_CLUTLoading_Resume(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx);
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout);
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d);
void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d);
void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d);
# 544 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_dma2d.h"
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx);
HAL_StatusTypeDef HAL_DMA2D_ConfigCLUT(DMA2D_HandleTypeDef *hdma2d, DMA2D_CLUTCfgTypeDef CLUTCfg, uint32_t LayerIdx);
HAL_StatusTypeDef HAL_DMA2D_ProgramLineEvent(DMA2D_HandleTypeDef *hdma2d, uint32_t Line);
HAL_StatusTypeDef HAL_DMA2D_EnableDeadTime(DMA2D_HandleTypeDef *hdma2d);
HAL_StatusTypeDef HAL_DMA2D_DisableDeadTime(DMA2D_HandleTypeDef *hdma2d);
HAL_StatusTypeDef HAL_DMA2D_ConfigDeadTime(DMA2D_HandleTypeDef *hdma2d, uint8_t DeadTime);
# 560 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_dma2d.h"
HAL_DMA2D_StateTypeDef HAL_DMA2D_GetState(DMA2D_HandleTypeDef *hdma2d);
uint32_t HAL_DMA2D_GetError(DMA2D_HandleTypeDef *hdma2d);
# 58 "./boards/stm32l4xx_hal_conf_base.h" 2
# 1 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_sai.h" 1
# 49 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_sai.h"
typedef enum
{
  HAL_SAI_STATE_RESET = 0x00U,
  HAL_SAI_STATE_READY = 0x01U,
  HAL_SAI_STATE_BUSY = 0x02U,
  HAL_SAI_STATE_BUSY_TX = 0x12U,
  HAL_SAI_STATE_BUSY_RX = 0x22U,
} HAL_SAI_StateTypeDef;




typedef void (*SAIcallback)(void);






typedef struct
{
  FunctionalState Activation;
  uint32_t MicPairsNbr;

  uint32_t ClockEnable;

} SAI_PdmInitTypeDef;
# 85 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_sai.h"
typedef struct
{
  uint32_t AudioMode;


  uint32_t Synchro;


  uint32_t SynchroExt;





  uint32_t OutputDrive;




  uint32_t NoDivider;
# 120 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_sai.h"
  uint32_t FIFOThreshold;


  uint32_t AudioFrequency;


  uint32_t Mckdiv;






  uint32_t MckOverSampling;



  uint32_t MonoStereoMode;


  uint32_t CompandingMode;


  uint32_t TriState;



  SAI_PdmInitTypeDef PdmInit;





  uint32_t Protocol;


  uint32_t DataSize;


  uint32_t FirstBit;


  uint32_t ClockStrobing;

} SAI_InitTypeDef;
# 173 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_sai.h"
typedef struct
{

  uint32_t FrameLength;





  uint32_t ActiveFrameLength;




  uint32_t FSDefinition;


  uint32_t FSPolarity;


  uint32_t FSOffset;


} SAI_FrameInitTypeDef;
# 205 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_sai.h"
typedef struct
{
  uint32_t FirstBitOffset;


  uint32_t SlotSize;


  uint32_t SlotNumber;


  uint32_t SlotActive;

} SAI_SlotInitTypeDef;
# 227 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_sai.h"
typedef struct __SAI_HandleTypeDef
{
  SAI_Block_TypeDef *Instance;

  SAI_InitTypeDef Init;

  SAI_FrameInitTypeDef FrameInit;

  SAI_SlotInitTypeDef SlotInit;

  uint8_t *pBuffPtr;

  uint16_t XferSize;

  uint16_t XferCount;

  DMA_HandleTypeDef *hdmatx;

  DMA_HandleTypeDef *hdmarx;

  SAIcallback mutecallback;

  void (*InterruptServiceRoutine)(struct __SAI_HandleTypeDef *hsai);

  HAL_LockTypeDef Lock;

  volatile HAL_SAI_StateTypeDef State;

  volatile uint32_t ErrorCode;
# 266 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_sai.h"
} SAI_HandleTypeDef;
# 748 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_sai.h"
# 1 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_sai_ex.h" 1
# 49 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_sai_ex.h"
typedef struct
{
  uint32_t MicPair;


  uint32_t LeftDelay;


  uint32_t RightDelay;

} SAIEx_PdmMicDelayParamTypeDef;
# 75 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_sai_ex.h"
HAL_StatusTypeDef HAL_SAIEx_ConfigPdmMicDelay(SAI_HandleTypeDef *hsai, SAIEx_PdmMicDelayParamTypeDef *pdmMicDelay);
# 749 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_sai.h" 2
# 760 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_sai.h"
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot);
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai);
HAL_StatusTypeDef HAL_SAI_DeInit(SAI_HandleTypeDef *hsai);
void HAL_SAI_MspInit(SAI_HandleTypeDef *hsai);
void HAL_SAI_MspDeInit(SAI_HandleTypeDef *hsai);
# 783 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_sai.h"
HAL_StatusTypeDef HAL_SAI_Transmit(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size, uint32_t Timeout);
HAL_StatusTypeDef HAL_SAI_Receive(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size, uint32_t Timeout);


HAL_StatusTypeDef HAL_SAI_Transmit_IT(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size);
HAL_StatusTypeDef HAL_SAI_Receive_IT(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size);


HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size);
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size);
HAL_StatusTypeDef HAL_SAI_DMAPause(SAI_HandleTypeDef *hsai);
HAL_StatusTypeDef HAL_SAI_DMAResume(SAI_HandleTypeDef *hsai);
HAL_StatusTypeDef HAL_SAI_DMAStop(SAI_HandleTypeDef *hsai);


HAL_StatusTypeDef HAL_SAI_Abort(SAI_HandleTypeDef *hsai);


HAL_StatusTypeDef HAL_SAI_EnableTxMuteMode(SAI_HandleTypeDef *hsai, uint16_t val);
HAL_StatusTypeDef HAL_SAI_DisableTxMuteMode(SAI_HandleTypeDef *hsai);
HAL_StatusTypeDef HAL_SAI_EnableRxMuteMode(SAI_HandleTypeDef *hsai, SAIcallback callback, uint16_t counter);
HAL_StatusTypeDef HAL_SAI_DisableRxMuteMode(SAI_HandleTypeDef *hsai);


void HAL_SAI_IRQHandler(SAI_HandleTypeDef *hsai);
void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai);
void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai);
void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai);
void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai);
void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai);
# 821 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_sai.h"
HAL_SAI_StateTypeDef HAL_SAI_GetState(SAI_HandleTypeDef *hsai);
uint32_t HAL_SAI_GetError(SAI_HandleTypeDef *hsai);
# 59 "./boards/stm32l4xx_hal_conf_base.h" 2
# 1 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_dfsdm.h" 1
# 52 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_dfsdm.h"
typedef enum
{
  HAL_DFSDM_CHANNEL_STATE_RESET = 0x00U,
  HAL_DFSDM_CHANNEL_STATE_READY = 0x01U,
  HAL_DFSDM_CHANNEL_STATE_ERROR = 0xFFU
} HAL_DFSDM_Channel_StateTypeDef;




typedef struct
{
  FunctionalState Activation;
  uint32_t Selection;

  uint32_t Divider;

} DFSDM_Channel_OutputClockTypeDef;




typedef struct
{
  uint32_t Multiplexer;




  uint32_t DataPacking;

  uint32_t Pins;

} DFSDM_Channel_InputTypeDef;




typedef struct
{
  uint32_t Type;

  uint32_t SpiClock;

} DFSDM_Channel_SerialInterfaceTypeDef;




typedef struct
{
  uint32_t FilterOrder;

  uint32_t Oversampling;

} DFSDM_Channel_AwdTypeDef;




typedef struct
{
  DFSDM_Channel_OutputClockTypeDef OutputClock;
  DFSDM_Channel_InputTypeDef Input;
  DFSDM_Channel_SerialInterfaceTypeDef SerialInterface;
  DFSDM_Channel_AwdTypeDef Awd;
  int32_t Offset;

  uint32_t RightBitShift;

} DFSDM_Channel_InitTypeDef;







typedef struct

{
  DFSDM_Channel_TypeDef *Instance;
  DFSDM_Channel_InitTypeDef Init;
  HAL_DFSDM_Channel_StateTypeDef State;






} DFSDM_Channel_HandleTypeDef;
# 165 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_dfsdm.h"
typedef enum
{
  HAL_DFSDM_FILTER_STATE_RESET = 0x00U,
  HAL_DFSDM_FILTER_STATE_READY = 0x01U,
  HAL_DFSDM_FILTER_STATE_REG = 0x02U,
  HAL_DFSDM_FILTER_STATE_INJ = 0x03U,
  HAL_DFSDM_FILTER_STATE_REG_INJ = 0x04U,
  HAL_DFSDM_FILTER_STATE_ERROR = 0xFFU
} HAL_DFSDM_Filter_StateTypeDef;




typedef struct
{
  uint32_t Trigger;

  FunctionalState FastMode;
  FunctionalState DmaMode;
} DFSDM_Filter_RegularParamTypeDef;




typedef struct
{
  uint32_t Trigger;

  FunctionalState ScanMode;
  FunctionalState DmaMode;
  uint32_t ExtTrigger;

  uint32_t ExtTriggerEdge;

} DFSDM_Filter_InjectedParamTypeDef;




typedef struct
{
  uint32_t SincOrder;

  uint32_t Oversampling;

  uint32_t IntOversampling;

} DFSDM_Filter_FilterParamTypeDef;




typedef struct
{
  DFSDM_Filter_RegularParamTypeDef RegularParam;
  DFSDM_Filter_InjectedParamTypeDef InjectedParam;
  DFSDM_Filter_FilterParamTypeDef FilterParam;
} DFSDM_Filter_InitTypeDef;







typedef struct

{
  DFSDM_Filter_TypeDef *Instance;
  DFSDM_Filter_InitTypeDef Init;
  DMA_HandleTypeDef *hdmaReg;
  DMA_HandleTypeDef *hdmaInj;
  uint32_t RegularContMode;
  uint32_t RegularTrigger;
  uint32_t InjectedTrigger;
  uint32_t ExtTriggerEdge;
  FunctionalState InjectedScanMode;
  uint32_t InjectedChannelsNbr;
  uint32_t InjConvRemaining;
  HAL_DFSDM_Filter_StateTypeDef State;
  uint32_t ErrorCode;
# 257 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_dfsdm.h"
} DFSDM_Filter_HandleTypeDef;




typedef struct
{
  uint32_t DataSource;

  uint32_t Channel;

  int32_t HighThreshold;

  int32_t LowThreshold;

  uint32_t HighBreakSignal;

  uint32_t LowBreakSignal;

} DFSDM_Filter_AwdParamTypeDef;
# 590 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_dfsdm.h"
# 1 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_dfsdm_ex.h" 1
# 54 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_dfsdm_ex.h"
HAL_StatusTypeDef HAL_DFDSMEx_ChannelSetPulsesSkipping(DFSDM_Channel_HandleTypeDef *hdfsdm_channel, uint32_t PulsesValue);
HAL_StatusTypeDef HAL_DFDSMEx_ChannelGetPulsesSkipping(DFSDM_Channel_HandleTypeDef *hdfsdm_channel, uint32_t *PulsesValue);
# 591 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_dfsdm.h" 2
# 602 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_dfsdm.h"
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel);
HAL_StatusTypeDef HAL_DFSDM_ChannelDeInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel);
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel);
void HAL_DFSDM_ChannelMspDeInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel);
# 623 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_dfsdm.h"
HAL_StatusTypeDef HAL_DFSDM_ChannelCkabStart(DFSDM_Channel_HandleTypeDef *hdfsdm_channel);
HAL_StatusTypeDef HAL_DFSDM_ChannelCkabStart_IT(DFSDM_Channel_HandleTypeDef *hdfsdm_channel);
HAL_StatusTypeDef HAL_DFSDM_ChannelCkabStop(DFSDM_Channel_HandleTypeDef *hdfsdm_channel);
HAL_StatusTypeDef HAL_DFSDM_ChannelCkabStop_IT(DFSDM_Channel_HandleTypeDef *hdfsdm_channel);

HAL_StatusTypeDef HAL_DFSDM_ChannelScdStart(DFSDM_Channel_HandleTypeDef *hdfsdm_channel, uint32_t Threshold, uint32_t BreakSignal);
HAL_StatusTypeDef HAL_DFSDM_ChannelScdStart_IT(DFSDM_Channel_HandleTypeDef *hdfsdm_channel, uint32_t Threshold, uint32_t BreakSignal);
HAL_StatusTypeDef HAL_DFSDM_ChannelScdStop(DFSDM_Channel_HandleTypeDef *hdfsdm_channel);
HAL_StatusTypeDef HAL_DFSDM_ChannelScdStop_IT(DFSDM_Channel_HandleTypeDef *hdfsdm_channel);

int16_t HAL_DFSDM_ChannelGetAwdValue(DFSDM_Channel_HandleTypeDef *hdfsdm_channel);
HAL_StatusTypeDef HAL_DFSDM_ChannelModifyOffset(DFSDM_Channel_HandleTypeDef *hdfsdm_channel, int32_t Offset);

HAL_StatusTypeDef HAL_DFSDM_ChannelPollForCkab(DFSDM_Channel_HandleTypeDef *hdfsdm_channel, uint32_t Timeout);
HAL_StatusTypeDef HAL_DFSDM_ChannelPollForScd(DFSDM_Channel_HandleTypeDef *hdfsdm_channel, uint32_t Timeout);

void HAL_DFSDM_ChannelCkabCallback(DFSDM_Channel_HandleTypeDef *hdfsdm_channel);
void HAL_DFSDM_ChannelScdCallback(DFSDM_Channel_HandleTypeDef *hdfsdm_channel);
# 649 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_dfsdm.h"
HAL_DFSDM_Channel_StateTypeDef HAL_DFSDM_ChannelGetState(DFSDM_Channel_HandleTypeDef *hdfsdm_channel);
# 658 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_dfsdm.h"
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter);
HAL_StatusTypeDef HAL_DFSDM_FilterDeInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter);
void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter);
void HAL_DFSDM_FilterMspDeInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter);
# 682 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_dfsdm.h"
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t Channel,
                                                   uint32_t ContinuousMode);
HAL_StatusTypeDef HAL_DFSDM_FilterConfigInjChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t Channel);
# 695 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_dfsdm.h"
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStart(DFSDM_Filter_HandleTypeDef *hdfsdm_filter);
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStart_IT(DFSDM_Filter_HandleTypeDef *hdfsdm_filter);
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStart_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter, int32_t *pData, uint32_t Length);
HAL_StatusTypeDef HAL_DFSDM_FilterRegularMsbStart_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter, int16_t *pData, uint32_t Length);
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStop(DFSDM_Filter_HandleTypeDef *hdfsdm_filter);
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStop_IT(DFSDM_Filter_HandleTypeDef *hdfsdm_filter);
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStop_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter);
HAL_StatusTypeDef HAL_DFSDM_FilterInjectedStart(DFSDM_Filter_HandleTypeDef *hdfsdm_filter);
HAL_StatusTypeDef HAL_DFSDM_FilterInjectedStart_IT(DFSDM_Filter_HandleTypeDef *hdfsdm_filter);
HAL_StatusTypeDef HAL_DFSDM_FilterInjectedStart_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter, int32_t *pData, uint32_t Length);
HAL_StatusTypeDef HAL_DFSDM_FilterInjectedMsbStart_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter, int16_t *pData, uint32_t Length);
HAL_StatusTypeDef HAL_DFSDM_FilterInjectedStop(DFSDM_Filter_HandleTypeDef *hdfsdm_filter);
HAL_StatusTypeDef HAL_DFSDM_FilterInjectedStop_IT(DFSDM_Filter_HandleTypeDef *hdfsdm_filter);
HAL_StatusTypeDef HAL_DFSDM_FilterInjectedStop_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter);
HAL_StatusTypeDef HAL_DFSDM_FilterAwdStart_IT(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                              DFSDM_Filter_AwdParamTypeDef *awdParam);
HAL_StatusTypeDef HAL_DFSDM_FilterAwdStop_IT(DFSDM_Filter_HandleTypeDef *hdfsdm_filter);
HAL_StatusTypeDef HAL_DFSDM_FilterExdStart(DFSDM_Filter_HandleTypeDef *hdfsdm_filter, uint32_t Channel);
HAL_StatusTypeDef HAL_DFSDM_FilterExdStop(DFSDM_Filter_HandleTypeDef *hdfsdm_filter);

int32_t HAL_DFSDM_FilterGetRegularValue(DFSDM_Filter_HandleTypeDef *hdfsdm_filter, uint32_t *Channel);
int32_t HAL_DFSDM_FilterGetInjectedValue(DFSDM_Filter_HandleTypeDef *hdfsdm_filter, uint32_t *Channel);
int32_t HAL_DFSDM_FilterGetExdMaxValue(DFSDM_Filter_HandleTypeDef *hdfsdm_filter, uint32_t *Channel);
int32_t HAL_DFSDM_FilterGetExdMinValue(DFSDM_Filter_HandleTypeDef *hdfsdm_filter, uint32_t *Channel);
uint32_t HAL_DFSDM_FilterGetConvTimeValue(DFSDM_Filter_HandleTypeDef *hdfsdm_filter);

void HAL_DFSDM_IRQHandler(DFSDM_Filter_HandleTypeDef *hdfsdm_filter);

HAL_StatusTypeDef HAL_DFSDM_FilterPollForRegConversion(DFSDM_Filter_HandleTypeDef *hdfsdm_filter, uint32_t Timeout);
HAL_StatusTypeDef HAL_DFSDM_FilterPollForInjConversion(DFSDM_Filter_HandleTypeDef *hdfsdm_filter, uint32_t Timeout);

void HAL_DFSDM_FilterRegConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter);
void HAL_DFSDM_FilterRegConvHalfCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter);
void HAL_DFSDM_FilterInjConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter);
void HAL_DFSDM_FilterInjConvHalfCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter);
void HAL_DFSDM_FilterAwdCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter, uint32_t Channel, uint32_t Threshold);
void HAL_DFSDM_FilterErrorCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter);
# 740 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_dfsdm.h"
HAL_DFSDM_Filter_StateTypeDef HAL_DFSDM_FilterGetState(DFSDM_Filter_HandleTypeDef *hdfsdm_filter);
uint32_t HAL_DFSDM_FilterGetError(DFSDM_Filter_HandleTypeDef *hdfsdm_filter);
# 60 "./boards/stm32l4xx_hal_conf_base.h" 2
# 1 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_ospi.h" 1
# 49 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_ospi.h"
typedef struct
{
  uint32_t FifoThreshold;



  uint32_t DualQuad;


  uint32_t MemoryType;

  uint32_t DeviceSize;



  uint32_t ChipSelectHighTime;


  uint32_t FreeRunningClock;

  uint32_t ClockMode;

  uint32_t WrapSize;

  uint32_t ClockPrescaler;


  uint32_t SampleShifting;


  uint32_t DelayHoldQuarterCycle;

  uint32_t ChipSelectBoundary;


}OSPI_InitTypeDef;




typedef struct __OSPI_HandleTypeDef
{
  OCTOSPI_TypeDef *Instance;
  OSPI_InitTypeDef Init;
  uint8_t *pBuffPtr;
  volatile uint32_t XferSize;
  volatile uint32_t XferCount;
  DMA_HandleTypeDef *hdma;
  volatile uint32_t State;
  volatile uint32_t ErrorCode;
  uint32_t Timeout;
# 115 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_ospi.h"
}OSPI_HandleTypeDef;




typedef struct
{
  uint32_t OperationType;



  uint32_t FlashId;


  uint32_t Instruction;

  uint32_t InstructionMode;

  uint32_t InstructionSize;

  uint32_t InstructionDtrMode;

  uint32_t Address;

  uint32_t AddressMode;

  uint32_t AddressSize;

  uint32_t AddressDtrMode;

  uint32_t AlternateBytes;

  uint32_t AlternateBytesMode;

  uint32_t AlternateBytesSize;

  uint32_t AlternateBytesDtrMode;

  uint32_t DataMode;

  uint32_t NbData;


  uint32_t DataDtrMode;

  uint32_t DummyCycles;

  uint32_t DQSMode;

  uint32_t SIOOMode;

}OSPI_RegularCmdTypeDef;




typedef struct
{
  uint32_t RWRecoveryTime;

  uint32_t AccessTime;

  uint32_t WriteZeroLatency;

  uint32_t LatencyMode;

}OSPI_HyperbusCfgTypeDef;




typedef struct
{
  uint32_t AddressSpace;

  uint32_t Address;

  uint32_t AddressSize;

  uint32_t NbData;



  uint32_t DQSMode;

}OSPI_HyperbusCmdTypeDef;




typedef struct
{
  uint32_t Match;

  uint32_t Mask;

  uint32_t MatchMode;

  uint32_t AutomaticStop;

  uint32_t Interval;

}OSPI_AutoPollingTypeDef;




typedef struct
{
  uint32_t TimeOutActivation;

  uint32_t TimeOutPeriod;

}OSPI_MemoryMappedTypeDef;




typedef struct
{
  uint32_t ClkPort;

  uint32_t DQSPort;

  uint32_t NCSPort;

  uint32_t IOLowPort;

  uint32_t IOHighPort;

}OSPIM_CfgTypeDef;
# 754 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_ospi.h"
HAL_StatusTypeDef HAL_OSPI_Init (OSPI_HandleTypeDef *hospi);
void HAL_OSPI_MspInit (OSPI_HandleTypeDef *hospi);
HAL_StatusTypeDef HAL_OSPI_DeInit (OSPI_HandleTypeDef *hospi);
void HAL_OSPI_MspDeInit (OSPI_HandleTypeDef *hospi);
# 768 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_ospi.h"
void HAL_OSPI_IRQHandler (OSPI_HandleTypeDef *hospi);


HAL_StatusTypeDef HAL_OSPI_Command (OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd, uint32_t Timeout);
HAL_StatusTypeDef HAL_OSPI_Command_IT (OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd);
HAL_StatusTypeDef HAL_OSPI_HyperbusCfg (OSPI_HandleTypeDef *hospi, OSPI_HyperbusCfgTypeDef *cfg, uint32_t Timeout);
HAL_StatusTypeDef HAL_OSPI_HyperbusCmd (OSPI_HandleTypeDef *hospi, OSPI_HyperbusCmdTypeDef *cmd, uint32_t Timeout);


HAL_StatusTypeDef HAL_OSPI_Transmit (OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout);
HAL_StatusTypeDef HAL_OSPI_Receive (OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout);
HAL_StatusTypeDef HAL_OSPI_Transmit_IT (OSPI_HandleTypeDef *hospi, uint8_t *pData);
HAL_StatusTypeDef HAL_OSPI_Receive_IT (OSPI_HandleTypeDef *hospi, uint8_t *pData);
HAL_StatusTypeDef HAL_OSPI_Transmit_DMA (OSPI_HandleTypeDef *hospi, uint8_t *pData);
HAL_StatusTypeDef HAL_OSPI_Receive_DMA (OSPI_HandleTypeDef *hospi, uint8_t *pData);


HAL_StatusTypeDef HAL_OSPI_AutoPolling (OSPI_HandleTypeDef *hospi, OSPI_AutoPollingTypeDef *cfg, uint32_t Timeout);
HAL_StatusTypeDef HAL_OSPI_AutoPolling_IT (OSPI_HandleTypeDef *hospi, OSPI_AutoPollingTypeDef *cfg);


HAL_StatusTypeDef HAL_OSPI_MemoryMapped (OSPI_HandleTypeDef *hospi, OSPI_MemoryMappedTypeDef *cfg);


void HAL_OSPI_ErrorCallback (OSPI_HandleTypeDef *hospi);
void HAL_OSPI_AbortCpltCallback (OSPI_HandleTypeDef *hospi);
void HAL_OSPI_FifoThresholdCallback(OSPI_HandleTypeDef *hospi);


void HAL_OSPI_CmdCpltCallback (OSPI_HandleTypeDef *hospi);
void HAL_OSPI_RxCpltCallback (OSPI_HandleTypeDef *hospi);
void HAL_OSPI_TxCpltCallback (OSPI_HandleTypeDef *hospi);
void HAL_OSPI_RxHalfCpltCallback (OSPI_HandleTypeDef *hospi);
void HAL_OSPI_TxHalfCpltCallback (OSPI_HandleTypeDef *hospi);


void HAL_OSPI_StatusMatchCallback (OSPI_HandleTypeDef *hospi);


void HAL_OSPI_TimeOutCallback (OSPI_HandleTypeDef *hospi);
# 822 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_ospi.h"
HAL_StatusTypeDef HAL_OSPI_Abort (OSPI_HandleTypeDef *hospi);
HAL_StatusTypeDef HAL_OSPI_Abort_IT (OSPI_HandleTypeDef *hospi);
HAL_StatusTypeDef HAL_OSPI_SetFifoThreshold (OSPI_HandleTypeDef *hospi, uint32_t Threshold);
uint32_t HAL_OSPI_GetFifoThreshold (OSPI_HandleTypeDef *hospi);
HAL_StatusTypeDef HAL_OSPI_SetTimeout (OSPI_HandleTypeDef *hospi, uint32_t Timeout);
uint32_t HAL_OSPI_GetError (OSPI_HandleTypeDef *hospi);
uint32_t HAL_OSPI_GetState (OSPI_HandleTypeDef *hospi);
# 838 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_ospi.h"
HAL_StatusTypeDef HAL_OSPIM_Config (OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout);
# 61 "./boards/stm32l4xx_hal_conf_base.h" 2
# 1 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_dsi.h" 1
# 62 "./boards/stm32l4xx_hal_conf_base.h" 2
# 4 "boards/STM32L4R9IDISC/stm32l4xx_hal_conf.h" 2
# 31 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal.h" 2
# 591 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal.h"
extern volatile uint32_t uwTick;
extern uint32_t uwTickPrio;
extern uint32_t uwTickFreq;
# 609 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal.h"
HAL_StatusTypeDef HAL_Init(void);
HAL_StatusTypeDef HAL_DeInit(void);
void HAL_MspInit(void);
void HAL_MspDeInit(void);
HAL_StatusTypeDef HAL_InitTick (uint32_t TickPriority);
# 624 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal.h"
void HAL_IncTick(void);
void HAL_Delay(uint32_t Delay);
uint32_t HAL_GetTick(void);
uint32_t HAL_GetTickPrio(void);
HAL_StatusTypeDef HAL_SetTickFreq(uint32_t Freq);
uint32_t HAL_GetTickFreq(void);
void HAL_SuspendTick(void);
void HAL_ResumeTick(void);
uint32_t HAL_GetHalVersion(void);
uint32_t HAL_GetREVID(void);
uint32_t HAL_GetDEVID(void);
uint32_t HAL_GetUIDw0(void);
uint32_t HAL_GetUIDw1(void);
uint32_t HAL_GetUIDw2(void);
# 648 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal.h"
void HAL_DBGMCU_EnableDBGSleepMode(void);
void HAL_DBGMCU_DisableDBGSleepMode(void);
void HAL_DBGMCU_EnableDBGStopMode(void);
void HAL_DBGMCU_DisableDBGStopMode(void);
void HAL_DBGMCU_EnableDBGStandbyMode(void);
void HAL_DBGMCU_DisableDBGStandbyMode(void);
# 664 "../../lib/stm32lib/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal.h"
void HAL_SYSCFG_SRAM2Erase(void);
void HAL_SYSCFG_EnableMemorySwappingBank(void);
void HAL_SYSCFG_DisableMemorySwappingBank(void);


void HAL_SYSCFG_VREFBUF_VoltageScalingConfig(uint32_t VoltageScaling);
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode);
void HAL_SYSCFG_VREFBUF_TrimmingConfig(uint32_t TrimmingValue);
HAL_StatusTypeDef HAL_SYSCFG_EnableVREFBUF(void);
void HAL_SYSCFG_DisableVREFBUF(void);


void HAL_SYSCFG_EnableIOAnalogSwitchBooster(void);
void HAL_SYSCFG_DisableIOAnalogSwitchBooster(void);
# 31 "./mpconfigboard_common.h" 2
# 33 "./mpconfigport.h" 2
# 202 "./mpconfigport.h"
extern const struct _mp_obj_module_t machine_module;
extern const struct _mp_obj_module_t pyb_module;
extern const struct _mp_obj_module_t stm_module;
extern const struct _mp_obj_module_t mp_module_ubinascii;
extern const struct _mp_obj_module_t mp_module_ure;
extern const struct _mp_obj_module_t mp_module_uzlib;
extern const struct _mp_obj_module_t mp_module_ujson;
extern const struct _mp_obj_module_t mp_module_uheapq;
extern const struct _mp_obj_module_t mp_module_uhashlib;
extern const struct _mp_obj_module_t mp_module_uos;
extern const struct _mp_obj_module_t mp_module_utime;
extern const struct _mp_obj_module_t mp_module_usocket;
extern const struct _mp_obj_module_t mp_module_network;
extern const struct _mp_obj_module_t mp_module_onewire;
extern const struct _mp_obj_module_t mp_module_lvgl;
# 270 "./mpconfigport.h"
# 1 "../../lib/lv_bindings/lvgl/src/lv_misc/lv_gc.h" 1
# 20 "../../lib/lv_bindings/lvgl/src/lv_misc/lv_gc.h"
# 1 "../../lib/lv_bindings/lvgl/src/lv_misc/../../../lv_conf.h" 1
# 61 "../../lib/lv_bindings/lvgl/src/lv_misc/../../../lv_conf.h"
typedef int16_t lv_coord_t;
# 134 "../../lib/lv_bindings/lvgl/src/lv_misc/../../../lv_conf.h"
typedef void * lv_anim_user_data_t;
# 144 "../../lib/lv_bindings/lvgl/src/lv_misc/../../../lv_conf.h"
typedef void * lv_group_user_data_t;
# 154 "../../lib/lv_bindings/lvgl/src/lv_misc/../../../lv_conf.h"
typedef void * lv_fs_drv_user_data_t;
# 179 "../../lib/lv_bindings/lvgl/src/lv_misc/../../../lv_conf.h"
typedef void * lv_img_decoder_user_data_t;
# 219 "../../lib/lv_bindings/lvgl/src/lv_misc/../../../lv_conf.h"
typedef void * lv_disp_drv_user_data_t;
typedef void * lv_indev_drv_user_data_t;
# 356 "../../lib/lv_bindings/lvgl/src/lv_misc/../../../lv_conf.h"
typedef void * lv_font_user_data_t;
# 413 "../../lib/lv_bindings/lvgl/src/lv_misc/../../../lv_conf.h"
typedef void * lv_obj_user_data_t;
# 602 "../../lib/lv_bindings/lvgl/src/lv_misc/../../../lv_conf.h"
# 1 "../../lib/lv_bindings/lvgl/src/lv_misc/../../../lvgl/src/lv_conf_checker.h" 1
# 603 "../../lib/lv_bindings/lvgl/src/lv_misc/../../../lv_conf.h" 2
# 21 "../../lib/lv_bindings/lvgl/src/lv_misc/lv_gc.h" 2



# 1 "/usr/lib/gcc/arm-none-eabi/4.9.3/include/stdbool.h" 1 3 4
# 25 "../../lib/lv_bindings/lvgl/src/lv_misc/lv_gc.h" 2
# 1 "../../lib/lv_bindings/lvgl/src/lv_misc/lv_mem.h" 1
# 23 "../../lib/lv_bindings/lvgl/src/lv_misc/lv_mem.h"
# 1 "/usr/lib/gcc/arm-none-eabi/4.9.3/include/stddef.h" 1 3 4
# 24 "../../lib/lv_bindings/lvgl/src/lv_misc/lv_mem.h" 2
# 1 "../../lib/lv_bindings/lvgl/src/lv_misc/lv_log.h" 1
# 36 "../../lib/lv_bindings/lvgl/src/lv_misc/lv_log.h"
enum {ENUM_LV_LOG_LEVEL_TRACE = 0};
enum {ENUM_LV_LOG_LEVEL_INFO = 1};
enum {ENUM_LV_LOG_LEVEL_WARN = 2};
enum {ENUM_LV_LOG_LEVEL_ERROR = 3};
enum {ENUM_LV_LOG_LEVEL_NONE = 4};

typedef int8_t lv_log_level_t;
# 52 "../../lib/lv_bindings/lvgl/src/lv_misc/lv_log.h"
typedef void (*lv_log_print_g_cb_t)(lv_log_level_t level, const char *, uint32_t, const char *);
# 64 "../../lib/lv_bindings/lvgl/src/lv_misc/lv_log.h"
void lv_log_register_print_cb(lv_log_print_g_cb_t print_cb);
# 73 "../../lib/lv_bindings/lvgl/src/lv_misc/lv_log.h"
void lv_log_add(lv_log_level_t level, const char * file, int line, const char * dsc);
# 25 "../../lib/lv_bindings/lvgl/src/lv_misc/lv_mem.h" 2
# 1 "../../lib/lv_bindings/lvgl/src/lv_misc/lv_types.h" 1
# 39 "../../lib/lv_bindings/lvgl/src/lv_misc/lv_types.h"
enum {
    LV_RES_INV = 0,

    LV_RES_OK,
};
typedef uint8_t lv_res_t;




typedef uint32_t lv_uintptr_t;
# 26 "../../lib/lv_bindings/lvgl/src/lv_misc/lv_mem.h" 2
# 38 "../../lib/lv_bindings/lvgl/src/lv_misc/lv_mem.h"
typedef struct
{
    uint32_t total_size;
    uint32_t free_cnt;
    uint32_t free_size;
    uint32_t free_biggest_size;
    uint32_t used_cnt;
    uint8_t used_pct;
    uint8_t frag_pct;
} lv_mem_monitor_t;
# 56 "../../lib/lv_bindings/lvgl/src/lv_misc/lv_mem.h"
void lv_mem_init(void);






void * lv_mem_alloc(size_t size);





void lv_mem_free(const void * data);
# 78 "../../lib/lv_bindings/lvgl/src/lv_misc/lv_mem.h"
void * lv_mem_realloc(void * data_p, size_t new_size);




void lv_mem_defrag(void);






void lv_mem_monitor(lv_mem_monitor_t * mon_p);






uint32_t lv_mem_get_size(const void * data);
# 26 "../../lib/lv_bindings/lvgl/src/lv_misc/lv_gc.h" 2
# 1 "../../lib/lv_bindings/lvgl/src/lv_misc/lv_ll.h" 1
# 18 "../../lib/lv_bindings/lvgl/src/lv_misc/lv_ll.h"
# 1 "/usr/lib/gcc/arm-none-eabi/4.9.3/include/stddef.h" 1 3 4
# 19 "../../lib/lv_bindings/lvgl/src/lv_misc/lv_ll.h" 2
# 30 "../../lib/lv_bindings/lvgl/src/lv_misc/lv_ll.h"
typedef uint8_t lv_ll_node_t;


typedef struct
{
    uint32_t n_size;
    lv_ll_node_t * head;
    lv_ll_node_t * tail;
} lv_ll_t;
# 49 "../../lib/lv_bindings/lvgl/src/lv_misc/lv_ll.h"
void lv_ll_init(lv_ll_t * ll_p, uint32_t node_size);






void * lv_ll_ins_head(lv_ll_t * ll_p);







void * lv_ll_ins_prev(lv_ll_t * ll_p, void * n_act);






void * lv_ll_ins_tail(lv_ll_t * ll_p);







void lv_ll_rem(lv_ll_t * ll_p, void * node_p);





void lv_ll_clear(lv_ll_t * ll_p);
# 95 "../../lib/lv_bindings/lvgl/src/lv_misc/lv_ll.h"
void lv_ll_chg_list(lv_ll_t * ll_ori_p, lv_ll_t * ll_new_p, void * node, _Bool head);






void * lv_ll_get_head(const lv_ll_t * ll_p);






void * lv_ll_get_tail(const lv_ll_t * ll_p);







void * lv_ll_get_next(const lv_ll_t * ll_p, const void * n_act);







void * lv_ll_get_prev(const lv_ll_t * ll_p, const void * n_act);






uint32_t lv_ll_get_len(const lv_ll_t * ll_p);







void lv_ll_move_before(lv_ll_t * ll_p, void * n_act, void * n_after);






_Bool lv_ll_is_empty(lv_ll_t * ll_p);
# 27 "../../lib/lv_bindings/lvgl/src/lv_misc/lv_gc.h" 2
# 1 "../../lib/lv_bindings/lvgl/src/lv_misc/../lv_draw/lv_img_cache.h" 1
# 16 "../../lib/lv_bindings/lvgl/src/lv_misc/../lv_draw/lv_img_cache.h"
# 1 "../../lib/lv_bindings/lvgl/src/lv_misc/../lv_draw/lv_img_decoder.h" 1
# 19 "../../lib/lv_bindings/lvgl/src/lv_misc/../lv_draw/lv_img_decoder.h"
# 1 "../../lib/lv_bindings/lvgl/src/lv_misc/../lv_draw/../../../lv_conf.h" 1
# 20 "../../lib/lv_bindings/lvgl/src/lv_misc/../lv_draw/lv_img_decoder.h" 2



# 1 "../../lib/lv_bindings/lvgl/src/lv_misc/../lv_draw/../lv_misc/lv_fs.h" 1
# 19 "../../lib/lv_bindings/lvgl/src/lv_misc/../lv_draw/../lv_misc/lv_fs.h"
# 1 "../../lib/lv_bindings/lvgl/src/lv_misc/../lv_draw/../lv_misc/../../../lv_conf.h" 1
# 20 "../../lib/lv_bindings/lvgl/src/lv_misc/../lv_draw/../lv_misc/lv_fs.h" 2






# 1 "../../lib/lv_bindings/lvgl/src/lv_misc/../lv_draw/../lv_misc/lv_mem.h" 1
# 27 "../../lib/lv_bindings/lvgl/src/lv_misc/../lv_draw/../lv_misc/lv_fs.h" 2
# 40 "../../lib/lv_bindings/lvgl/src/lv_misc/../lv_draw/../lv_misc/lv_fs.h"
enum {
    LV_FS_RES_OK = 0,
    LV_FS_RES_HW_ERR,
    LV_FS_RES_FS_ERR,
    LV_FS_RES_NOT_EX,
    LV_FS_RES_FULL,
    LV_FS_RES_LOCKED,
    LV_FS_RES_DENIED,
    LV_FS_RES_BUSY,
    LV_FS_RES_TOUT,
    LV_FS_RES_NOT_IMP,
    LV_FS_RES_OUT_OF_MEM,
    LV_FS_RES_INV_PARAM,
    LV_FS_RES_UNKNOWN,
};
typedef uint8_t lv_fs_res_t;




enum {
    LV_FS_MODE_WR = 0x01,
    LV_FS_MODE_RD = 0x02,
};
typedef uint8_t lv_fs_mode_t;

typedef struct _lv_fs_drv_t
{
    char letter;
    uint16_t file_size;
    uint16_t rddir_size;
    _Bool (*ready_cb)(struct _lv_fs_drv_t * drv);

    lv_fs_res_t (*open_cb)(struct _lv_fs_drv_t * drv, void * file_p, const char * path, lv_fs_mode_t mode);
    lv_fs_res_t (*close_cb)(struct _lv_fs_drv_t * drv, void * file_p);
    lv_fs_res_t (*remove_cb)(struct _lv_fs_drv_t * drv, const char * fn);
    lv_fs_res_t (*read_cb)(struct _lv_fs_drv_t * drv, void * file_p, void * buf, uint32_t btr, uint32_t * br);
    lv_fs_res_t (*write_cb)(struct _lv_fs_drv_t * drv, void * file_p, const void * buf, uint32_t btw, uint32_t * bw);
    lv_fs_res_t (*seek_cb)(struct _lv_fs_drv_t * drv, void * file_p, uint32_t pos);
    lv_fs_res_t (*tell_cb)(struct _lv_fs_drv_t * drv, void * file_p, uint32_t * pos_p);
    lv_fs_res_t (*trunc_cb)(struct _lv_fs_drv_t * drv, void * file_p);
    lv_fs_res_t (*size_cb)(struct _lv_fs_drv_t * drv, void * file_p, uint32_t * size_p);
    lv_fs_res_t (*rename_cb)(struct _lv_fs_drv_t * drv, const char * oldname, const char * newname);
    lv_fs_res_t (*free_space_cb)(struct _lv_fs_drv_t * drv, uint32_t * total_p, uint32_t * free_p);

    lv_fs_res_t (*dir_open_cb)(struct _lv_fs_drv_t * drv, void * rddir_p, const char * path);
    lv_fs_res_t (*dir_read_cb)(struct _lv_fs_drv_t * drv, void * rddir_p, char * fn);
    lv_fs_res_t (*dir_close_cb)(struct _lv_fs_drv_t * drv, void * rddir_p);


    lv_fs_drv_user_data_t user_data;

} lv_fs_drv_t;

typedef struct
{
    void * file_d;
    lv_fs_drv_t * drv;
} lv_fs_file_t;

typedef struct
{
    void * dir_d;
    lv_fs_drv_t * drv;
} lv_fs_dir_t;
# 113 "../../lib/lv_bindings/lvgl/src/lv_misc/../lv_draw/../lv_misc/lv_fs.h"
void lv_fs_init(void);







void lv_fs_drv_init(lv_fs_drv_t * drv);






void lv_fs_drv_register(lv_fs_drv_t * drv_p);






lv_fs_drv_t * lv_fs_get_drv(char letter);







_Bool lv_fs_is_ready(char letter);
# 152 "../../lib/lv_bindings/lvgl/src/lv_misc/../lv_draw/../lv_misc/lv_fs.h"
lv_fs_res_t lv_fs_open(lv_fs_file_t * file_p, const char * path, lv_fs_mode_t mode);






lv_fs_res_t lv_fs_close(lv_fs_file_t * file_p);






lv_fs_res_t lv_fs_remove(const char * path);
# 176 "../../lib/lv_bindings/lvgl/src/lv_misc/../lv_draw/../lv_misc/lv_fs.h"
lv_fs_res_t lv_fs_read(lv_fs_file_t * file_p, void * buf, uint32_t btr, uint32_t * br);
# 186 "../../lib/lv_bindings/lvgl/src/lv_misc/../lv_draw/../lv_misc/lv_fs.h"
lv_fs_res_t lv_fs_write(lv_fs_file_t * file_p, const void * buf, uint32_t btw, uint32_t * bw);







lv_fs_res_t lv_fs_seek(lv_fs_file_t * file_p, uint32_t pos);







lv_fs_res_t lv_fs_tell(lv_fs_file_t * file_p, uint32_t * pos);







lv_fs_res_t lv_fs_trunc(lv_fs_file_t * file_p);







lv_fs_res_t lv_fs_size(lv_fs_file_t * file_p, uint32_t * size);







lv_fs_res_t lv_fs_rename(const char * oldname, const char * newname);







lv_fs_res_t lv_fs_dir_open(lv_fs_dir_t * rddir_p, const char * path);
# 243 "../../lib/lv_bindings/lvgl/src/lv_misc/../lv_draw/../lv_misc/lv_fs.h"
lv_fs_res_t lv_fs_dir_read(lv_fs_dir_t * rddir_p, char * fn);






lv_fs_res_t lv_fs_dir_close(lv_fs_dir_t * rddir_p);
# 259 "../../lib/lv_bindings/lvgl/src/lv_misc/../lv_draw/../lv_misc/lv_fs.h"
lv_fs_res_t lv_fs_free_space(char letter, uint32_t * total_p, uint32_t * free_p);






char * lv_fs_get_letters(char * buf);






const char * lv_fs_get_ext(const char * fn);






char * lv_fs_up(char * path);






const char * lv_fs_get_last(const char * path);
# 24 "../../lib/lv_bindings/lvgl/src/lv_misc/../lv_draw/lv_img_decoder.h" 2
# 1 "../../lib/lv_bindings/lvgl/src/lv_misc/../lv_draw/../lv_misc/lv_types.h" 1
# 25 "../../lib/lv_bindings/lvgl/src/lv_misc/../lv_draw/lv_img_decoder.h" 2
# 1 "../../lib/lv_bindings/lvgl/src/lv_misc/../lv_draw/../lv_misc/lv_area.h" 1
# 16 "../../lib/lv_bindings/lvgl/src/lv_misc/../lv_draw/../lv_misc/lv_area.h"
# 1 "/usr/include/newlib/string.h" 1 3
# 10 "/usr/include/newlib/string.h" 3
# 1 "/usr/include/newlib/_ansi.h" 1 3
# 15 "/usr/include/newlib/_ansi.h" 3
# 1 "/usr/include/newlib/newlib.h" 1 3
# 16 "/usr/include/newlib/_ansi.h" 2 3
# 1 "/usr/include/newlib/sys/config.h" 1 3



# 1 "/usr/include/newlib/machine/ieeefp.h" 1 3
# 5 "/usr/include/newlib/sys/config.h" 2 3
# 17 "/usr/include/newlib/_ansi.h" 2 3
# 11 "/usr/include/newlib/string.h" 2 3
# 1 "/usr/include/newlib/sys/reent.h" 1 3
# 13 "/usr/include/newlib/sys/reent.h" 3
# 1 "/usr/include/newlib/_ansi.h" 1 3
# 14 "/usr/include/newlib/sys/reent.h" 2 3
# 1 "/usr/lib/gcc/arm-none-eabi/4.9.3/include/stddef.h" 1 3 4
# 15 "/usr/include/newlib/sys/reent.h" 2 3
# 1 "/usr/include/newlib/sys/_types.h" 1 3
# 12 "/usr/include/newlib/sys/_types.h" 3
# 1 "/usr/include/newlib/machine/_types.h" 1 3
# 13 "/usr/include/newlib/sys/_types.h" 2 3
# 1 "/usr/include/newlib/sys/lock.h" 1 3





typedef int _LOCK_T;
typedef int _LOCK_RECURSIVE_T;
# 14 "/usr/include/newlib/sys/_types.h" 2 3


typedef long _off_t;



typedef short __dev_t;



typedef unsigned short __uid_t;


typedef unsigned short __gid_t;



__extension__ typedef long long _off64_t;







typedef long _fpos_t;
# 55 "/usr/include/newlib/sys/_types.h" 3
typedef signed int _ssize_t;
# 67 "/usr/include/newlib/sys/_types.h" 3
# 1 "/usr/lib/gcc/arm-none-eabi/4.9.3/include/stddef.h" 1 3 4
# 353 "/usr/lib/gcc/arm-none-eabi/4.9.3/include/stddef.h" 3 4
typedef unsigned int wint_t;
# 68 "/usr/include/newlib/sys/_types.h" 2 3



typedef struct
{
  int __count;
  union
  {
    wint_t __wch;
    unsigned char __wchb[4];
  } __value;
} _mbstate_t;



typedef _LOCK_RECURSIVE_T _flock_t;




typedef void *_iconv_t;
# 16 "/usr/include/newlib/sys/reent.h" 2 3






typedef unsigned long __ULong;
# 38 "/usr/include/newlib/sys/reent.h" 3
struct _reent;






struct _Bigint
{
  struct _Bigint *_next;
  int _k, _maxwds, _sign, _wds;
  __ULong _x[1];
};


struct __tm
{
  int __tm_sec;
  int __tm_min;
  int __tm_hour;
  int __tm_mday;
  int __tm_mon;
  int __tm_year;
  int __tm_wday;
  int __tm_yday;
  int __tm_isdst;
};







struct _on_exit_args {
 void * _fnargs[32];
 void * _dso_handle[32];

 __ULong _fntypes;


 __ULong _is_cxa;
};
# 91 "/usr/include/newlib/sys/reent.h" 3
struct _atexit {
 struct _atexit *_next;
 int _ind;

 void (*_fns[32])(void);
        struct _on_exit_args _on_exit_args;
};
# 115 "/usr/include/newlib/sys/reent.h" 3
struct __sbuf {
 unsigned char *_base;
 int _size;
};
# 179 "/usr/include/newlib/sys/reent.h" 3
struct __sFILE {
  unsigned char *_p;
  int _r;
  int _w;
  short _flags;
  short _file;
  struct __sbuf _bf;
  int _lbfsize;






  void * _cookie;

  int (* _read) (struct _reent *, void *, char *, int)
                                          ;
  int (* _write) (struct _reent *, void *, const char *, int)

                                   ;
  _fpos_t (* _seek) (struct _reent *, void *, _fpos_t, int);
  int (* _close) (struct _reent *, void *);


  struct __sbuf _ub;
  unsigned char *_up;
  int _ur;


  unsigned char _ubuf[3];
  unsigned char _nbuf[1];


  struct __sbuf _lb;


  int _blksize;
  _off_t _offset;


  struct _reent *_data;



  _flock_t _lock;

  _mbstate_t _mbstate;
  int _flags2;
};
# 285 "/usr/include/newlib/sys/reent.h" 3
typedef struct __sFILE __FILE;



struct _glue
{
  struct _glue *_next;
  int _niobs;
  __FILE *_iobs;
};
# 317 "/usr/include/newlib/sys/reent.h" 3
struct _rand48 {
  unsigned short _seed[3];
  unsigned short _mult[3];
  unsigned short _add;




};
# 569 "/usr/include/newlib/sys/reent.h" 3
struct _reent
{
  int _errno;




  __FILE *_stdin, *_stdout, *_stderr;

  int _inc;
  char _emergency[25];

  int _current_category;
  const char *_current_locale;

  int __sdidinit;

  void (* __cleanup) (struct _reent *);


  struct _Bigint *_result;
  int _result_k;
  struct _Bigint *_p5s;
  struct _Bigint **_freelist;


  int _cvtlen;
  char *_cvtbuf;

  union
    {
      struct
        {
          unsigned int _unused_rand;
          char * _strtok_last;
          char _asctime_buf[26];
          struct __tm _localtime_buf;
          int _gamma_signgam;
          __extension__ unsigned long long _rand_next;
          struct _rand48 _r48;
          _mbstate_t _mblen_state;
          _mbstate_t _mbtowc_state;
          _mbstate_t _wctomb_state;
          char _l64a_buf[8];
          char _signal_buf[24];
          int _getdate_err;
          _mbstate_t _mbrlen_state;
          _mbstate_t _mbrtowc_state;
          _mbstate_t _mbsrtowcs_state;
          _mbstate_t _wcrtomb_state;
          _mbstate_t _wcsrtombs_state;
   int _h_errno;
        } _reent;



      struct
        {

          unsigned char * _nextf[30];
          unsigned int _nmalloc[30];
        } _unused;
    } _new;



  struct _atexit *_atexit;
  struct _atexit _atexit0;



  void (**(_sig_func))(int);




  struct _glue __sglue;
  __FILE __sf[3];
};
# 762 "/usr/include/newlib/sys/reent.h" 3
extern struct _reent *_impure_ptr ;
extern struct _reent *const _global_impure_ptr ;

void _reclaim_reent (struct _reent *);
# 12 "/usr/include/newlib/string.h" 2 3
# 1 "/usr/include/newlib/sys/cdefs.h" 1 3
# 45 "/usr/include/newlib/sys/cdefs.h" 3
# 1 "/usr/lib/gcc/arm-none-eabi/4.9.3/include/stddef.h" 1 3 4
# 46 "/usr/include/newlib/sys/cdefs.h" 2 3
# 13 "/usr/include/newlib/string.h" 2 3




# 1 "/usr/lib/gcc/arm-none-eabi/4.9.3/include/stddef.h" 1 3 4
# 18 "/usr/include/newlib/string.h" 2 3



void * memchr (const void *, int, size_t);
int memcmp (const void *, const void *, size_t);
void * memcpy (void * restrict, const void * restrict, size_t);
void * memmove (void *, const void *, size_t);
void * memset (void *, int, size_t);
char *strcat (char *restrict, const char *restrict);
char *strchr (const char *, int);
int strcmp (const char *, const char *);
int strcoll (const char *, const char *);
char *strcpy (char *restrict, const char *restrict);
size_t strcspn (const char *, const char *);
char *strerror (int);
size_t strlen (const char *);
char *strncat (char *restrict, const char *restrict, size_t);
int strncmp (const char *, const char *, size_t);
char *strncpy (char *restrict, const char *restrict, size_t);
char *strpbrk (const char *, const char *);
char *strrchr (const char *, int);
size_t strspn (const char *, const char *);
char *strstr (const char *, const char *);

char *strtok (char *restrict, const char *restrict);

size_t strxfrm (char *restrict, const char *restrict, size_t);


char *strtok_r (char *restrict, const char *restrict, char **restrict);


int bcmp (const void *, const void *, size_t);
void bcopy (const void *, void *, size_t);
void bzero (void *, size_t);
int ffs (int);
char *index (const char *, int);


void * memccpy (void * restrict, const void * restrict, int, size_t);





void * memrchr (const void *, int, size_t);




char *rindex (const char *, int);

char *stpcpy (char *restrict, const char *restrict);
char *stpncpy (char *restrict, const char *restrict, size_t);

int strcasecmp (const char *, const char *);






char *strdup (const char *);


char *_strdup_r (struct _reent *, const char *);


char *strndup (const char *, size_t);



char *_strndup_r (struct _reent *, const char *, size_t);
# 106 "/usr/include/newlib/string.h" 3
int strerror_r (int, char *, size_t)

             __asm__ ("" "__xpg_strerror_r")

  ;







char * _strerror_r (struct _reent *, int, int, int *);


size_t strlcat (char *, const char *, size_t);
size_t strlcpy (char *, const char *, size_t);


int strncasecmp (const char *, const char *, size_t);



size_t strnlen (const char *, size_t);


char *strsep (char **, const char *);







char *strlwr (char *);
char *strupr (char *);



char *strsignal (int __signo);
# 182 "/usr/include/newlib/string.h" 3
# 1 "/usr/include/newlib/sys/string.h" 1 3
# 183 "/usr/include/newlib/string.h" 2 3


# 17 "../../lib/lv_bindings/lvgl/src/lv_misc/../lv_draw/../lv_misc/lv_area.h" 2
# 32 "../../lib/lv_bindings/lvgl/src/lv_misc/../lv_draw/../lv_misc/lv_area.h"
enum {ENUM_LV_COORD_MAX = ((lv_coord_t)((uint32_t)((uint32_t)1 << (8 * sizeof(lv_coord_t) - 1)) - 1000))};
enum {ENUM_LV_COORD_MIN = (-((lv_coord_t)((uint32_t)((uint32_t)1 << (8 * sizeof(lv_coord_t) - 1)) - 1000)))};
# 42 "../../lib/lv_bindings/lvgl/src/lv_misc/../lv_draw/../lv_misc/lv_area.h"
typedef struct
{
    lv_coord_t x;
    lv_coord_t y;
} lv_point_t;


typedef struct
{
    lv_coord_t x1;
    lv_coord_t y1;
    lv_coord_t x2;
    lv_coord_t y2;
} lv_area_t;
# 69 "../../lib/lv_bindings/lvgl/src/lv_misc/../lv_draw/../lv_misc/lv_area.h"
void lv_area_set(lv_area_t * area_p, lv_coord_t x1, lv_coord_t y1, lv_coord_t x2, lv_coord_t y2);






inline static void lv_area_copy(lv_area_t * dest, const lv_area_t * src)
{
    memcpy(dest, src, sizeof(lv_area_t));
}






static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
}






static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
}






void lv_area_set_width(lv_area_t * area_p, lv_coord_t w);






void lv_area_set_height(lv_area_t * area_p, lv_coord_t h);







void lv_area_set_pos(lv_area_t * area_p, lv_coord_t x, lv_coord_t y);






uint32_t lv_area_get_size(const lv_area_t * area_p);
# 137 "../../lib/lv_bindings/lvgl/src/lv_misc/../lv_draw/../lv_misc/lv_area.h"
_Bool lv_area_intersect(lv_area_t * res_p, const lv_area_t * a1_p, const lv_area_t * a2_p);







void lv_area_join(lv_area_t * a_res_p, const lv_area_t * a1_p, const lv_area_t * a2_p);







_Bool lv_area_is_point_on(const lv_area_t * a_p, const lv_point_t * p_p);







_Bool lv_area_is_on(const lv_area_t * a1_p, const lv_area_t * a2_p);







_Bool lv_area_is_in(const lv_area_t * ain_p, const lv_area_t * aholder_p);






void lv_area_increment(lv_area_t * a_p, const lv_coord_t amount);
# 26 "../../lib/lv_bindings/lvgl/src/lv_misc/../lv_draw/lv_img_decoder.h" 2
# 1 "../../lib/lv_bindings/lvgl/src/lv_misc/../lv_draw/../lv_core/lv_style.h" 1
# 17 "../../lib/lv_bindings/lvgl/src/lv_misc/../lv_draw/../lv_core/lv_style.h"
# 1 "../../lib/lv_bindings/lvgl/src/lv_misc/../lv_draw/../lv_core/../lv_font/lv_font.h" 1
# 19 "../../lib/lv_bindings/lvgl/src/lv_misc/../lv_draw/../lv_core/../lv_font/lv_font.h"
# 1 "../../lib/lv_bindings/lvgl/src/lv_misc/../lv_draw/../lv_core/../lv_font/../../../lv_conf.h" 1
# 20 "../../lib/lv_bindings/lvgl/src/lv_misc/../lv_draw/../lv_core/../lv_font/lv_font.h" 2



# 1 "/usr/lib/gcc/arm-none-eabi/4.9.3/include/stddef.h" 1 3 4
# 24 "../../lib/lv_bindings/lvgl/src/lv_misc/../lv_draw/../lv_core/../lv_font/lv_font.h" 2


# 1 "../../lib/lv_bindings/lvgl/src/lv_misc/../lv_draw/../lv_core/../lv_font/lv_symbol_def.h" 1
# 88 "../../lib/lv_bindings/lvgl/src/lv_misc/../lv_draw/../lv_core/../lv_font/lv_symbol_def.h"
enum {
    _LV_STR_SYMBOL_AUDIO,
    _LV_STR_SYMBOL_VIDEO,
    _LV_STR_SYMBOL_LIST,
    _LV_STR_SYMBOL_OK,
    _LV_STR_SYMBOL_CLOSE,
    _LV_STR_SYMBOL_POWER,
    _LV_STR_SYMBOL_SETTINGS,
    _LV_STR_SYMBOL_TRASH,
    _LV_STR_SYMBOL_HOME,
    _LV_STR_SYMBOL_DOWNLOAD,
    _LV_STR_SYMBOL_DRIVE,
    _LV_STR_SYMBOL_REFRESH,
    _LV_STR_SYMBOL_MUTE,
    _LV_STR_SYMBOL_VOLUME_MID,
    _LV_STR_SYMBOL_VOLUME_MAX,
    _LV_STR_SYMBOL_IMAGE,
    _LV_STR_SYMBOL_EDIT,
    _LV_STR_SYMBOL_PREV,
    _LV_STR_SYMBOL_PLAY,
    _LV_STR_SYMBOL_PAUSE,
    _LV_STR_SYMBOL_STOP,
    _LV_STR_SYMBOL_NEXT,
    _LV_STR_SYMBOL_EJECT,
    _LV_STR_SYMBOL_LEFT,
    _LV_STR_SYMBOL_RIGHT,
    _LV_STR_SYMBOL_PLUS,
    _LV_STR_SYMBOL_MINUS,
    _LV_STR_SYMBOL_WARNING,
    _LV_STR_SYMBOL_SHUFFLE,
    _LV_STR_SYMBOL_UP,
    _LV_STR_SYMBOL_DOWN,
    _LV_STR_SYMBOL_LOOP,
    _LV_STR_SYMBOL_DIRECTORY,
    _LV_STR_SYMBOL_UPLOAD,
    _LV_STR_SYMBOL_CALL,
    _LV_STR_SYMBOL_CUT,
    _LV_STR_SYMBOL_COPY,
    _LV_STR_SYMBOL_SAVE,
    _LV_STR_SYMBOL_CHARGE,
    _LV_STR_SYMBOL_BELL,
    _LV_STR_SYMBOL_KEYBOARD,
    _LV_STR_SYMBOL_GPS,
    _LV_STR_SYMBOL_FILE,
    _LV_STR_SYMBOL_WIFI,
    _LV_STR_SYMBOL_BATTERY_FULL,
    _LV_STR_SYMBOL_BATTERY_3,
    _LV_STR_SYMBOL_BATTERY_2,
    _LV_STR_SYMBOL_BATTERY_1,
    _LV_STR_SYMBOL_BATTERY_EMPTY,
    _LV_STR_SYMBOL_BLUETOOTH,
    _LV_STR_SYMBOL_DUMMY,
};
# 27 "../../lib/lv_bindings/lvgl/src/lv_misc/../lv_draw/../lv_core/../lv_font/lv_font.h" 2
# 46 "../../lib/lv_bindings/lvgl/src/lv_misc/../lv_draw/../lv_core/../lv_font/lv_font.h"
typedef struct
{
    uint16_t adv_w;
    uint8_t box_w;
    uint8_t box_h;
    int8_t ofs_x;
    int8_t ofs_y;
    uint8_t bpp;
}lv_font_glyph_dsc_t;



enum {
    LV_FONT_SUBPX_NONE,
    LV_FONT_SUBPX_HOR,
    LV_FONT_SUBPX_VER,
    LV_FONT_SUBPX_BOTH,
};

typedef uint8_t lv_font_subpx_t;


typedef struct _lv_font_struct
{

    _Bool (*get_glyph_dsc)(const struct _lv_font_struct *, lv_font_glyph_dsc_t *, uint32_t letter, uint32_t letter_next);


    const uint8_t * (*get_glyph_bitmap)(const struct _lv_font_struct *, uint32_t);


    uint8_t line_height;
    uint8_t base_line;
    uint8_t subpx :2;
    void * dsc;

    lv_font_user_data_t user_data;



} lv_font_t;
# 98 "../../lib/lv_bindings/lvgl/src/lv_misc/../lv_draw/../lv_core/../lv_font/lv_font.h"
const uint8_t * lv_font_get_glyph_bitmap(const lv_font_t * font_p, uint32_t letter);
# 108 "../../lib/lv_bindings/lvgl/src/lv_misc/../lv_draw/../lv_core/../lv_font/lv_font.h"
_Bool lv_font_get_glyph_dsc(const lv_font_t * font_p, lv_font_glyph_dsc_t * dsc_out, uint32_t letter, uint32_t letter_next);
# 117 "../../lib/lv_bindings/lvgl/src/lv_misc/../lv_draw/../lv_core/../lv_font/lv_font.h"
uint16_t lv_font_get_glyph_width(const lv_font_t * font, uint32_t letter, uint32_t letter_next);






static inline uint8_t lv_font_get_line_height(const lv_font_t * font_p)
{
    return font_p->line_height;
}
# 140 "../../lib/lv_bindings/lvgl/src/lv_misc/../lv_draw/../lv_core/../lv_font/lv_font.h"
extern lv_font_t lv_font_roboto_16;







extern lv_font_t lv_font_roboto_28;
# 157 "../../lib/lv_bindings/lvgl/src/lv_misc/../lv_draw/../lv_core/../lv_font/lv_font.h"

# 18 "../../lib/lv_bindings/lvgl/src/lv_misc/../lv_draw/../lv_core/lv_style.h" 2
# 1 "../../lib/lv_bindings/lvgl/src/lv_misc/../lv_draw/../lv_core/../lv_misc/lv_color.h" 1
# 19 "../../lib/lv_bindings/lvgl/src/lv_misc/../lv_draw/../lv_core/../lv_misc/lv_color.h"
# 1 "../../lib/lv_bindings/lvgl/src/lv_misc/../lv_draw/../lv_core/../lv_misc/../../../lv_conf.h" 1
# 20 "../../lib/lv_bindings/lvgl/src/lv_misc/../lv_draw/../lv_core/../lv_misc/lv_color.h" 2
# 62 "../../lib/lv_bindings/lvgl/src/lv_misc/../lv_draw/../lv_core/../lv_misc/lv_color.h"
enum {
    LV_OPA_TRANSP = 0,
    LV_OPA_0 = 0,
    LV_OPA_10 = 25,
    LV_OPA_20 = 51,
    LV_OPA_30 = 76,
    LV_OPA_40 = 102,
    LV_OPA_50 = 127,
    LV_OPA_60 = 153,
    LV_OPA_70 = 178,
    LV_OPA_80 = 204,
    LV_OPA_90 = 229,
    LV_OPA_100 = 255,
    LV_OPA_COVER = 255,
};
# 201 "../../lib/lv_bindings/lvgl/src/lv_misc/../lv_draw/../lv_core/../lv_misc/lv_color.h"
typedef union
{
    struct
    {
        uint8_t blue : 1;
        uint8_t green : 1;
        uint8_t red : 1;
    } ch;
    uint8_t full;
} lv_color1_t;

typedef union
{
    struct
    {
        uint8_t blue : 2;
        uint8_t green : 3;
        uint8_t red : 3;
    } ch;
    uint8_t full;
} lv_color8_t;

typedef union
{
    struct
    {

        uint16_t blue : 5;
        uint16_t green : 6;
        uint16_t red : 5;






    } ch;
    uint16_t full;
} lv_color16_t;

typedef union
{
    struct
    {
        uint8_t blue;
        uint8_t green;
        uint8_t red;
        uint8_t alpha;
    } ch;
    uint32_t full;
} lv_color32_t;
# 263 "../../lib/lv_bindings/lvgl/src/lv_misc/../lv_draw/../lv_core/../lv_misc/lv_color.h"
typedef uint32_t lv_color_int_t;
typedef lv_color32_t lv_color_t;




typedef uint8_t lv_opa_t;

typedef struct
{
    uint16_t h;
    uint8_t s;
    uint8_t v;
} lv_color_hsv_t;
# 296 "../../lib/lv_bindings/lvgl/src/lv_misc/../lv_draw/../lv_core/../lv_misc/lv_color.h"
static inline uint8_t lv_color_to1(lv_color_t color)
{
# 313 "../../lib/lv_bindings/lvgl/src/lv_misc/../lv_draw/../lv_core/../lv_misc/lv_color.h"
    if(((color).ch.red & 0x80) || ((color).ch.green & 0x80) || ((color).ch.blue & 0x80)) {
        return 1;
    } else {
        return 0;
    }

}

static inline uint8_t lv_color_to8(lv_color_t color)
{
# 337 "../../lib/lv_bindings/lvgl/src/lv_misc/../lv_draw/../lv_core/../lv_misc/lv_color.h"
    lv_color8_t ret;
    (ret).ch.red = (uint8_t)((color).ch.red >> 5) & 0x7U;;
    (ret).ch.green = (uint8_t)((color).ch.green >> 5) & 0x7U;;
    (ret).ch.blue = (uint8_t)((color).ch.blue >> 6) & 0x3U;;
    return ret.full;

}

static inline uint16_t lv_color_to16(lv_color_t color)
{
# 366 "../../lib/lv_bindings/lvgl/src/lv_misc/../lv_draw/../lv_core/../lv_misc/lv_color.h"
    lv_color16_t ret;
    (ret).ch.red = (uint8_t)((color).ch.red >> 3) & 0x1FU;;


    (ret).ch.green = (uint8_t)((color).ch.green >> 2) & 0x3FU;;



    (ret).ch.blue = (uint8_t)((color).ch.blue >> 3) & 0x1FU;;
    return ret.full;


    return 0;
}

static inline uint32_t lv_color_to32(lv_color_t color)
{
# 431 "../../lib/lv_bindings/lvgl/src/lv_misc/../lv_draw/../lv_core/../lv_misc/lv_color.h"
    return color.full;

}

static inline lv_color_t lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t mix)
{
    lv_color_t ret;


    (ret).ch.red = (uint32_t)(((uint16_t)((uint16_t) (c1).ch.red * mix + (c2).ch.red * (255 - mix)) >> 8) & 0xFF);;
    (ret).ch.green = (uint32_t)(((uint16_t)((uint16_t) (c1).ch.green * mix + (c2).ch.green * (255 - mix)) >> 8) & 0xFF);;
    (ret).ch.blue = (uint32_t)(((uint16_t)((uint16_t) (c1).ch.blue * mix + (c2).ch.blue * (255 - mix)) >> 8) & 0xFF);;
    (ret).ch.alpha = (uint32_t)((0xFF) & 0xFF);;





    return ret;
}






static inline uint8_t lv_color_brightness(lv_color_t color)
{
    lv_color32_t c32;
    c32.full = lv_color_to32(color);
    uint16_t bright = (uint16_t)(3u * (c32).ch.red + (c32).ch.blue + 4u * (c32).ch.green);
    return (uint8_t)(bright >> 3);
}
# 480 "../../lib/lv_bindings/lvgl/src/lv_misc/../lv_draw/../lv_core/../lv_misc/lv_color.h"
static inline lv_color_t lv_color_make(uint8_t r, uint8_t g, uint8_t b)
{
    return ((lv_color_t){{b, g, r, 0xff}});
}

static inline lv_color_t lv_color_hex(uint32_t c)
{
    return lv_color_make((uint8_t)((c >> 16) & 0xFF), (uint8_t)((c >> 8) & 0xFF), (uint8_t)(c & 0xFF));
}

static inline lv_color_t lv_color_hex3(uint32_t c)
{
    return lv_color_make((uint8_t)(((c >> 4) & 0xF0) | ((c >> 8) & 0xF)), (uint8_t)((c & 0xF0) | ((c & 0xF0) >> 4)),
                         (uint8_t)((c & 0xF) | ((c & 0xF) << 4)));
}
# 503 "../../lib/lv_bindings/lvgl/src/lv_misc/../lv_draw/../lv_core/../lv_misc/lv_color.h"
lv_color_t lv_color_hsv_to_rgb(uint16_t h, uint8_t s, uint8_t v);
# 512 "../../lib/lv_bindings/lvgl/src/lv_misc/../lv_draw/../lv_core/../lv_misc/lv_color.h"
lv_color_hsv_t lv_color_rgb_to_hsv(uint8_t r8, uint8_t g8, uint8_t b8);






lv_color_hsv_t lv_color_to_hsv(lv_color_t color);
# 19 "../../lib/lv_bindings/lvgl/src/lv_misc/../lv_draw/../lv_core/lv_style.h" 2
# 1 "../../lib/lv_bindings/lvgl/src/lv_misc/../lv_draw/../lv_core/../lv_misc/lv_area.h" 1
# 20 "../../lib/lv_bindings/lvgl/src/lv_misc/../lv_draw/../lv_core/lv_style.h" 2
# 1 "../../lib/lv_bindings/lvgl/src/lv_misc/../lv_draw/../lv_core/../lv_misc/lv_anim.h" 1
# 35 "../../lib/lv_bindings/lvgl/src/lv_misc/../lv_draw/../lv_core/../lv_misc/lv_anim.h"
enum {
    LV_ANIM_OFF,
    LV_ANIM_ON,
};

typedef uint8_t lv_anim_enable_t;


typedef lv_coord_t lv_anim_value_t;



struct _lv_anim_t;







typedef void (*lv_anim_exec_xcb_t)(void *, lv_anim_value_t);



typedef void (*lv_anim_custom_exec_cb_t)(struct _lv_anim_t *, lv_anim_value_t);


typedef lv_anim_value_t (*lv_anim_path_cb_t)(const struct _lv_anim_t *);


typedef void (*lv_anim_ready_cb_t)(struct _lv_anim_t *);


typedef struct _lv_anim_t
{
    void * var;
    lv_anim_exec_xcb_t exec_cb;
    lv_anim_path_cb_t path_cb;
    lv_anim_ready_cb_t ready_cb;
    int32_t start;
    int32_t end;
    uint16_t time;
    int16_t act_time;
    uint16_t playback_pause;
    uint16_t repeat_pause;

    lv_anim_user_data_t user_data;


    uint8_t playback : 1;
    uint8_t repeat : 1;

    uint8_t playback_now : 1;
    uint32_t has_run : 1;
} lv_anim_t;
# 99 "../../lib/lv_bindings/lvgl/src/lv_misc/../lv_draw/../lv_core/../lv_misc/lv_anim.h"
void lv_anim_core_init(void);
# 110 "../../lib/lv_bindings/lvgl/src/lv_misc/../lv_draw/../lv_core/../lv_misc/lv_anim.h"
void lv_anim_init(lv_anim_t * a);
# 120 "../../lib/lv_bindings/lvgl/src/lv_misc/../lv_draw/../lv_core/../lv_misc/lv_anim.h"
static inline void lv_anim_set_exec_cb(lv_anim_t * a, void * var, lv_anim_exec_xcb_t exec_cb)
{
    a->var = var;
    a->exec_cb = exec_cb;
}







static inline void lv_anim_set_time(lv_anim_t * a, uint16_t duration, int16_t delay)
{
    a->time = duration;
    a->act_time = (int16_t)(-delay);
}







static inline void lv_anim_set_values(lv_anim_t * a, lv_anim_value_t start, lv_anim_value_t end)
{
    a->start = start;
    a->end = end;
}
# 158 "../../lib/lv_bindings/lvgl/src/lv_misc/../lv_draw/../lv_core/../lv_misc/lv_anim.h"
static inline void lv_anim_set_custom_exec_cb(lv_anim_t * a, lv_anim_custom_exec_cb_t exec_cb)
{
    a->var = a;
    a->exec_cb = (lv_anim_exec_xcb_t)exec_cb;
}







static inline void lv_anim_set_path_cb(lv_anim_t * a, lv_anim_path_cb_t path_cb)
{
    a->path_cb = path_cb;
}






static inline void lv_anim_set_ready_cb(lv_anim_t * a, lv_anim_ready_cb_t ready_cb)
{
    a->ready_cb = ready_cb;
}






static inline void lv_anim_set_playback(lv_anim_t * a, uint16_t wait_time)
{
    a->playback = 1;
    a->playback_pause = wait_time;
}





static inline void lv_anim_clear_playback(lv_anim_t * a)
{
    a->playback = 0;
}






static inline void lv_anim_set_repeat(lv_anim_t * a, uint16_t wait_time)
{
    a->repeat = 1;
    a->repeat_pause = wait_time;
}





static inline void lv_anim_clear_repeat(lv_anim_t * a)
{
    a->repeat = 0;
}





void lv_anim_create(lv_anim_t * a);
# 238 "../../lib/lv_bindings/lvgl/src/lv_misc/../lv_draw/../lv_core/../lv_misc/lv_anim.h"
_Bool lv_anim_del(void * var, lv_anim_exec_xcb_t exec_cb);
# 251 "../../lib/lv_bindings/lvgl/src/lv_misc/../lv_draw/../lv_core/../lv_misc/lv_anim.h"
static inline _Bool lv_anim_custom_del(lv_anim_t * a, lv_anim_custom_exec_cb_t exec_cb)
{
    return lv_anim_del(a->var, (lv_anim_exec_xcb_t)exec_cb);
}





uint16_t lv_anim_count_running(void);
# 269 "../../lib/lv_bindings/lvgl/src/lv_misc/../lv_draw/../lv_core/../lv_misc/lv_anim.h"
uint16_t lv_anim_speed_to_time(uint16_t speed, lv_anim_value_t start, lv_anim_value_t end);






lv_anim_value_t lv_anim_path_linear(const lv_anim_t * a);






lv_anim_value_t lv_anim_path_ease_in(const lv_anim_t * a);






lv_anim_value_t lv_anim_path_ease_out(const lv_anim_t * a);






lv_anim_value_t lv_anim_path_ease_in_out(const lv_anim_t * a);






lv_anim_value_t lv_anim_path_overshoot(const lv_anim_t * a);






lv_anim_value_t lv_anim_path_bounce(const lv_anim_t * a);







lv_anim_value_t lv_anim_path_step(const lv_anim_t * a);
# 21 "../../lib/lv_bindings/lvgl/src/lv_misc/../lv_draw/../lv_core/lv_style.h" 2







enum {ENUM_LV_RADIUS_CIRCLE = (((lv_coord_t)((uint32_t)((uint32_t)1 << (8 * sizeof(lv_coord_t) - 1)) - 1000)))};






enum {
    LV_BORDER_NONE = 0x00,
    LV_BORDER_BOTTOM = 0x01,
    LV_BORDER_TOP = 0x02,
    LV_BORDER_LEFT = 0x04,
    LV_BORDER_RIGHT = 0x08,
    LV_BORDER_FULL = 0x0F,
    LV_BORDER_INTERNAL = 0x10,
};
typedef uint8_t lv_border_part_t;


enum {
    LV_SHADOW_BOTTOM = 0,
    LV_SHADOW_FULL,
};
typedef uint8_t lv_shadow_type_t;
# 60 "../../lib/lv_bindings/lvgl/src/lv_misc/../lv_draw/../lv_core/lv_style.h"
typedef struct
{
    uint8_t glass : 1;


    struct
    {
        lv_color_t main_color;
        lv_color_t grad_color;
        lv_coord_t radius;
        lv_opa_t opa;

        struct
        {
            lv_color_t color;
            lv_coord_t width;
            lv_border_part_t part;
            lv_opa_t opa;
        } border;


        struct
        {
            lv_color_t color;
            lv_coord_t width;
            lv_shadow_type_t type;
        } shadow;

        struct
        {
            lv_coord_t top;
            lv_coord_t bottom;
            lv_coord_t left;
            lv_coord_t right;
            lv_coord_t inner;
        } padding;
    } body;


    struct
    {
        lv_color_t color;
        lv_color_t sel_color;
        const lv_font_t * font;
        lv_coord_t letter_space;
        lv_coord_t line_space;
        lv_opa_t opa;
    } text;


    struct
    {
        lv_color_t color;
        lv_opa_t intense;
        lv_opa_t opa;
    } image;


    struct
    {
        lv_color_t color;
        lv_coord_t width;
        lv_opa_t opa;
        uint8_t rounded : 1;
    } line;



    uint32_t debug_sentinel;



} lv_style_t;



typedef struct
{
    lv_style_t style_start;

    lv_style_t style_end;
    lv_style_t * style_anim;
    lv_anim_ready_cb_t ready_cb;
} lv_style_anim_dsc_t;
# 153 "../../lib/lv_bindings/lvgl/src/lv_misc/../lv_draw/../lv_core/lv_style.h"
void lv_style_init(void);






void lv_style_copy(lv_style_t * dest, const lv_style_t * src);
# 169 "../../lib/lv_bindings/lvgl/src/lv_misc/../lv_draw/../lv_core/lv_style.h"
void lv_style_mix(const lv_style_t * start, const lv_style_t * end, lv_style_t * res, uint16_t ratio);
# 182 "../../lib/lv_bindings/lvgl/src/lv_misc/../lv_draw/../lv_core/lv_style.h"
void lv_style_anim_init(lv_anim_t * a);
# 191 "../../lib/lv_bindings/lvgl/src/lv_misc/../lv_draw/../lv_core/lv_style.h"
void lv_style_anim_set_styles(lv_anim_t * a, lv_style_t * to_anim, const lv_style_t * start, const lv_style_t * end);







static inline void lv_style_anim_set_time(lv_anim_t * a, uint16_t duration, int16_t delay)
{
    lv_anim_set_time(a, duration, delay);
}






static inline void lv_style_anim_set_ready_cb(lv_anim_t * a, lv_anim_ready_cb_t ready_cb)
{
    lv_style_anim_dsc_t * dsc = (lv_style_anim_dsc_t *)a->var;
    dsc->ready_cb = ready_cb;
}






static inline void lv_style_anim_set_playback(lv_anim_t * a, uint16_t wait_time)
{
    lv_anim_set_playback(a, wait_time);
}





static inline void lv_style_anim_clear_playback(lv_anim_t * a)
{
    lv_anim_clear_playback(a);
}






static inline void lv_style_anim_set_repeat(lv_anim_t * a, uint16_t wait_time)
{
    lv_anim_set_repeat(a, wait_time);
}





static inline void lv_style_anim_clear_repeat(lv_anim_t * a)
{
    lv_anim_clear_repeat(a);
}





static inline void lv_style_anim_create(lv_anim_t * a)
{
    lv_anim_create(a);
}






extern lv_style_t lv_style_scr;
extern lv_style_t lv_style_transp;
extern lv_style_t lv_style_transp_fit;
extern lv_style_t lv_style_transp_tight;
extern lv_style_t lv_style_plain;
extern lv_style_t lv_style_plain_color;
extern lv_style_t lv_style_pretty;
extern lv_style_t lv_style_pretty_color;
extern lv_style_t lv_style_btn_rel;
extern lv_style_t lv_style_btn_pr;
extern lv_style_t lv_style_btn_tgl_rel;
extern lv_style_t lv_style_btn_tgl_pr;
extern lv_style_t lv_style_btn_ina;
# 27 "../../lib/lv_bindings/lvgl/src/lv_misc/../lv_draw/lv_img_decoder.h" 2
# 46 "../../lib/lv_bindings/lvgl/src/lv_misc/../lv_draw/lv_img_decoder.h"
enum {
    LV_IMG_SRC_VARIABLE,
    LV_IMG_SRC_FILE,
    LV_IMG_SRC_SYMBOL,
    LV_IMG_SRC_UNKNOWN,
};

typedef uint8_t lv_img_src_t;



typedef struct
{



    uint32_t cf : 5;
    uint32_t always_zero : 3;


    uint32_t reserved : 2;

    uint32_t w : 11;
    uint32_t h : 11;
} lv_img_header_t;


enum {
    LV_IMG_CF_UNKNOWN = 0,

    LV_IMG_CF_RAW,
    LV_IMG_CF_RAW_ALPHA,

    LV_IMG_CF_RAW_CHROMA_KEYED,


    LV_IMG_CF_TRUE_COLOR,
    LV_IMG_CF_TRUE_COLOR_ALPHA,
    LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED,


    LV_IMG_CF_INDEXED_1BIT,
    LV_IMG_CF_INDEXED_2BIT,
    LV_IMG_CF_INDEXED_4BIT,
    LV_IMG_CF_INDEXED_8BIT,

    LV_IMG_CF_ALPHA_1BIT,
    LV_IMG_CF_ALPHA_2BIT,
    LV_IMG_CF_ALPHA_4BIT,
    LV_IMG_CF_ALPHA_8BIT,

    LV_IMG_CF_RESERVED_15,
    LV_IMG_CF_RESERVED_16,
    LV_IMG_CF_RESERVED_17,
    LV_IMG_CF_RESERVED_18,
    LV_IMG_CF_RESERVED_19,
    LV_IMG_CF_RESERVED_20,
    LV_IMG_CF_RESERVED_21,
    LV_IMG_CF_RESERVED_22,
    LV_IMG_CF_RESERVED_23,

    LV_IMG_CF_USER_ENCODED_0,
    LV_IMG_CF_USER_ENCODED_1,
    LV_IMG_CF_USER_ENCODED_2,
    LV_IMG_CF_USER_ENCODED_3,
    LV_IMG_CF_USER_ENCODED_4,
    LV_IMG_CF_USER_ENCODED_5,
    LV_IMG_CF_USER_ENCODED_6,
    LV_IMG_CF_USER_ENCODED_7,
};
typedef uint8_t lv_img_cf_t;



typedef struct
{
    lv_img_header_t header;
    uint32_t data_size;
    const uint8_t * data;
} lv_img_dsc_t;



struct _lv_img_decoder;
struct _lv_img_decoder_dsc;
# 139 "../../lib/lv_bindings/lvgl/src/lv_misc/../lv_draw/lv_img_decoder.h"
typedef lv_res_t (*lv_img_decoder_info_f_t)(struct _lv_img_decoder * decoder, const void * src,
                                            lv_img_header_t * header);






typedef lv_res_t (*lv_img_decoder_open_f_t)(struct _lv_img_decoder * decoder, struct _lv_img_decoder_dsc * dsc);
# 160 "../../lib/lv_bindings/lvgl/src/lv_misc/../lv_draw/lv_img_decoder.h"
typedef lv_res_t (*lv_img_decoder_read_line_f_t)(struct _lv_img_decoder * decoder, struct _lv_img_decoder_dsc * dsc,
                                                 lv_coord_t x, lv_coord_t y, lv_coord_t len, uint8_t * buf);






typedef void (*lv_img_decoder_close_f_t)(struct _lv_img_decoder * decoder, struct _lv_img_decoder_dsc * dsc);

typedef struct _lv_img_decoder
{
    lv_img_decoder_info_f_t info_cb;
    lv_img_decoder_open_f_t open_cb;
    lv_img_decoder_read_line_f_t read_line_cb;
    lv_img_decoder_close_f_t close_cb;


    lv_img_decoder_user_data_t user_data;

} lv_img_decoder_t;


typedef struct _lv_img_decoder_dsc
{

    lv_img_decoder_t * decoder;


    const void * src;


    const lv_style_t * style;


    lv_img_src_t src_type;


    lv_img_header_t header;



    const uint8_t * img_data;



    uint32_t time_to_open;



    const char * error_msg;


    void * user_data;
} lv_img_decoder_dsc_t;
# 223 "../../lib/lv_bindings/lvgl/src/lv_misc/../lv_draw/lv_img_decoder.h"
void lv_img_decoder_init(void);
# 235 "../../lib/lv_bindings/lvgl/src/lv_misc/../lv_draw/lv_img_decoder.h"
lv_res_t lv_img_decoder_get_info(const char * src, lv_img_header_t * header);
# 249 "../../lib/lv_bindings/lvgl/src/lv_misc/../lv_draw/lv_img_decoder.h"
lv_res_t lv_img_decoder_open(lv_img_decoder_dsc_t * dsc, const void * src, const lv_style_t * style);
# 260 "../../lib/lv_bindings/lvgl/src/lv_misc/../lv_draw/lv_img_decoder.h"
lv_res_t lv_img_decoder_read_line(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y, lv_coord_t len,
                                  uint8_t * buf);





void lv_img_decoder_close(lv_img_decoder_dsc_t * dsc);





lv_img_decoder_t * lv_img_decoder_create(void);





void lv_img_decoder_delete(lv_img_decoder_t * decoder);






void lv_img_decoder_set_info_cb(lv_img_decoder_t * decoder, lv_img_decoder_info_f_t info_cb);






void lv_img_decoder_set_open_cb(lv_img_decoder_t * decoder, lv_img_decoder_open_f_t open_cb);






void lv_img_decoder_set_read_line_cb(lv_img_decoder_t * decoder, lv_img_decoder_read_line_f_t read_line_cb);






void lv_img_decoder_set_close_cb(lv_img_decoder_t * decoder, lv_img_decoder_close_f_t close_cb);
# 318 "../../lib/lv_bindings/lvgl/src/lv_misc/../lv_draw/lv_img_decoder.h"
lv_res_t lv_img_decoder_built_in_info(lv_img_decoder_t * decoder, const void * src, lv_img_header_t * header);







lv_res_t lv_img_decoder_built_in_open(lv_img_decoder_t * decoder, lv_img_decoder_dsc_t * dsc);
# 339 "../../lib/lv_bindings/lvgl/src/lv_misc/../lv_draw/lv_img_decoder.h"
lv_res_t lv_img_decoder_built_in_read_line(lv_img_decoder_t * decoder, lv_img_decoder_dsc_t * dsc, lv_coord_t x,
                                                  lv_coord_t y, lv_coord_t len, uint8_t * buf);






void lv_img_decoder_built_in_close(lv_img_decoder_t * decoder, lv_img_decoder_dsc_t * dsc);
# 17 "../../lib/lv_bindings/lvgl/src/lv_misc/../lv_draw/lv_img_cache.h" 2
# 31 "../../lib/lv_bindings/lvgl/src/lv_misc/../lv_draw/lv_img_cache.h"
typedef struct
{
    lv_img_decoder_dsc_t dec_dsc;




    int32_t life;
} lv_img_cache_entry_t;
# 53 "../../lib/lv_bindings/lvgl/src/lv_misc/../lv_draw/lv_img_cache.h"
lv_img_cache_entry_t * lv_img_cache_open(const void * src, const lv_style_t * style);







void lv_img_cache_set_size(uint16_t new_slot_num);






void lv_img_cache_invalidate_src(const void * src);
# 28 "../../lib/lv_bindings/lvgl/src/lv_misc/lv_gc.h" 2
# 271 "./mpconfigport.h" 2
# 333 "./mpconfigport.h"
typedef int mp_int_t;
typedef unsigned int mp_uint_t;
typedef long mp_off_t;
# 347 "./mpconfigport.h"
static inline void enable_irq(mp_uint_t state) {
    __set_PRIMASK(state);
}

static inline mp_uint_t disable_irq(void) {
    mp_uint_t state = __get_PRIMASK();
    __disable_irq();
    return state;
}
# 395 "./mpconfigport.h"
# 1 "/usr/include/newlib/alloca.h" 1 3
# 395 "./mpconfigport.h" 2
# 63 "../../py/mpconfig.h" 2
# 646 "../../py/mpconfig.h"
typedef float mp_float_t;
# 30 "../Testing_module/JOYSTICK/../../../py/obj.h" 2
# 1 "../../py/misc.h" 1
# 35 "../../py/misc.h"
# 1 "/usr/lib/gcc/arm-none-eabi/4.9.3/include/stddef.h" 1 3 4
# 36 "../../py/misc.h" 2

typedef unsigned char byte;
typedef unsigned int uint;
# 87 "../../py/misc.h"
void *m_malloc(size_t num_bytes);
void *m_malloc_maybe(size_t num_bytes);
void *m_malloc_with_finaliser(size_t num_bytes);
void *m_malloc0(size_t num_bytes);





void *m_realloc(void *ptr, size_t new_num_bytes);
void *m_realloc_maybe(void *ptr, size_t new_num_bytes, _Bool allow_move);
void m_free(void *ptr);

__attribute__((noreturn)) void m_malloc_fail(size_t num_bytes);
# 120 "../../py/misc.h"
typedef uint32_t unichar;







unichar utf8_get_char(const byte *s);
const byte *utf8_next_char(const byte *s);
size_t utf8_charlen(const byte *str, size_t len);






_Bool unichar_isspace(unichar c);
_Bool unichar_isalpha(unichar c);
_Bool unichar_isprint(unichar c);
_Bool unichar_isdigit(unichar c);
_Bool unichar_isxdigit(unichar c);
_Bool unichar_isident(unichar c);
_Bool unichar_isupper(unichar c);
_Bool unichar_islower(unichar c);
unichar unichar_tolower(unichar c);
unichar unichar_toupper(unichar c);
mp_uint_t unichar_xdigit_value(unichar c);





typedef struct _vstr_t {
    size_t alloc;
    size_t len;
    char *buf;
    _Bool fixed_buf : 1;
} vstr_t;




void vstr_init(vstr_t *vstr, size_t alloc);
void vstr_init_len(vstr_t *vstr, size_t len);
void vstr_init_fixed_buf(vstr_t *vstr, size_t alloc, char *buf);
struct _mp_print_t;
void vstr_init_print(vstr_t *vstr, size_t alloc, struct _mp_print_t *print);
void vstr_clear(vstr_t *vstr);
vstr_t *vstr_new(size_t alloc);
void vstr_free(vstr_t *vstr);
static inline void vstr_reset(vstr_t *vstr) { vstr->len = 0; }
static inline char *vstr_str(vstr_t *vstr) { return vstr->buf; }
static inline size_t vstr_len(vstr_t *vstr) { return vstr->len; }
void vstr_hint_size(vstr_t *vstr, size_t size);
char *vstr_extend(vstr_t *vstr, size_t size);
char *vstr_add_len(vstr_t *vstr, size_t len);
char *vstr_null_terminated_str(vstr_t *vstr);
void vstr_add_byte(vstr_t *vstr, byte v);
void vstr_add_char(vstr_t *vstr, unichar chr);
void vstr_add_str(vstr_t *vstr, const char *str);
void vstr_add_strn(vstr_t *vstr, const char *str, size_t len);
void vstr_ins_byte(vstr_t *vstr, size_t byte_pos, byte b);
void vstr_ins_char(vstr_t *vstr, size_t char_pos, unichar chr);
void vstr_cut_head_bytes(vstr_t *vstr, size_t bytes_to_cut);
void vstr_cut_tail_bytes(vstr_t *vstr, size_t bytes_to_cut);
void vstr_cut_out_bytes(vstr_t *vstr, size_t byte_pos, size_t bytes_to_cut);
void vstr_printf(vstr_t *vstr, const char *fmt, ...);
# 206 "../../py/misc.h"
int DEBUG_printf(const char *fmt, ...);

extern mp_uint_t mp_verbose_flag;
# 31 "../Testing_module/JOYSTICK/../../../py/obj.h" 2
# 1 "../../py/qstr.h" 1
# 39 "../../py/qstr.h"
enum {





    MP_QSTRnumber_of,
};

typedef size_t qstr;

typedef struct _qstr_pool_t {
    struct _qstr_pool_t *prev;
    size_t total_prev_len;
    size_t alloc;
    size_t len;
    const byte *qstrs[];
} qstr_pool_t;




void qstr_init(void);

mp_uint_t qstr_compute_hash(const byte *data, size_t len);
qstr qstr_find_strn(const char *str, size_t str_len);

qstr qstr_from_str(const char *str);
qstr qstr_from_strn(const char *str, size_t len);

mp_uint_t qstr_hash(qstr q);
const char *qstr_str(qstr q);
size_t qstr_len(qstr q);
const byte *qstr_data(qstr q, size_t *len);

void qstr_pool_info(size_t *n_pool, size_t *n_qstr, size_t *n_str_data_bytes, size_t *n_total_bytes);
void qstr_dump_data(void);
# 32 "../Testing_module/JOYSTICK/../../../py/obj.h" 2
# 1 "../../py/mpprint.h" 1
# 48 "../../py/mpprint.h"
typedef void (*mp_print_strn_t)(void *data, const char *str, size_t len);

typedef struct _mp_print_t {
    void *data;
    mp_print_strn_t print_strn;
} mp_print_t;



extern const mp_print_t mp_plat_print;


extern const mp_print_t mp_sys_stdout_print;


int mp_print_str(const mp_print_t *print, const char *str);
int mp_print_strn(const mp_print_t *print, const char *str, size_t len, int flags, char fill, int width);

int mp_print_float(const mp_print_t *print, mp_float_t f, char fmt, int flags, char fill, int width, int prec);


int mp_printf(const mp_print_t *print, const char *fmt, ...);
# 33 "../Testing_module/JOYSTICK/../../../py/obj.h" 2
# 1 "../../py/runtime0.h" 1
# 61 "../../py/runtime0.h"
typedef enum {


    MP_UNARY_OP_POSITIVE,
    MP_UNARY_OP_NEGATIVE,
    MP_UNARY_OP_INVERT,
    MP_UNARY_OP_NOT,


    MP_UNARY_OP_BOOL,
    MP_UNARY_OP_LEN,
    MP_UNARY_OP_HASH,
    MP_UNARY_OP_ABS,
    MP_UNARY_OP_INT,
    MP_UNARY_OP_SIZEOF,
} mp_unary_op_t;

typedef enum {




    MP_BINARY_OP_LESS,
    MP_BINARY_OP_MORE,
    MP_BINARY_OP_EQUAL,
    MP_BINARY_OP_LESS_EQUAL,
    MP_BINARY_OP_MORE_EQUAL,
    MP_BINARY_OP_NOT_EQUAL,
    MP_BINARY_OP_IN,
    MP_BINARY_OP_IS,
    MP_BINARY_OP_EXCEPTION_MATCH,


    MP_BINARY_OP_INPLACE_OR,
    MP_BINARY_OP_INPLACE_XOR,
    MP_BINARY_OP_INPLACE_AND,
    MP_BINARY_OP_INPLACE_LSHIFT,
    MP_BINARY_OP_INPLACE_RSHIFT,
    MP_BINARY_OP_INPLACE_ADD,
    MP_BINARY_OP_INPLACE_SUBTRACT,
    MP_BINARY_OP_INPLACE_MULTIPLY,
    MP_BINARY_OP_INPLACE_MAT_MULTIPLY,
    MP_BINARY_OP_INPLACE_FLOOR_DIVIDE,
    MP_BINARY_OP_INPLACE_TRUE_DIVIDE,
    MP_BINARY_OP_INPLACE_MODULO,
    MP_BINARY_OP_INPLACE_POWER,


    MP_BINARY_OP_OR,
    MP_BINARY_OP_XOR,
    MP_BINARY_OP_AND,
    MP_BINARY_OP_LSHIFT,
    MP_BINARY_OP_RSHIFT,
    MP_BINARY_OP_ADD,
    MP_BINARY_OP_SUBTRACT,
    MP_BINARY_OP_MULTIPLY,
    MP_BINARY_OP_MAT_MULTIPLY,
    MP_BINARY_OP_FLOOR_DIVIDE,
    MP_BINARY_OP_TRUE_DIVIDE,
    MP_BINARY_OP_MODULO,
    MP_BINARY_OP_POWER,






    MP_BINARY_OP_DIVMOD,



    MP_BINARY_OP_CONTAINS,



    MP_BINARY_OP_REVERSE_OR,
    MP_BINARY_OP_REVERSE_XOR,
    MP_BINARY_OP_REVERSE_AND,
    MP_BINARY_OP_REVERSE_LSHIFT,
    MP_BINARY_OP_REVERSE_RSHIFT,
    MP_BINARY_OP_REVERSE_ADD,
    MP_BINARY_OP_REVERSE_SUBTRACT,
    MP_BINARY_OP_REVERSE_MULTIPLY,
    MP_BINARY_OP_REVERSE_MAT_MULTIPLY,
    MP_BINARY_OP_REVERSE_FLOOR_DIVIDE,
    MP_BINARY_OP_REVERSE_TRUE_DIVIDE,
    MP_BINARY_OP_REVERSE_MODULO,
    MP_BINARY_OP_REVERSE_POWER,


    MP_BINARY_OP_NOT_IN,
    MP_BINARY_OP_IS_NOT,
} mp_binary_op_t;

typedef enum {
    MP_F_CONST_NONE_OBJ = 0,
    MP_F_CONST_FALSE_OBJ,
    MP_F_CONST_TRUE_OBJ,
    MP_F_CONVERT_OBJ_TO_NATIVE,
    MP_F_CONVERT_NATIVE_TO_OBJ,
    MP_F_NATIVE_SWAP_GLOBALS,
    MP_F_LOAD_NAME,
    MP_F_LOAD_GLOBAL,
    MP_F_LOAD_BUILD_CLASS,
    MP_F_LOAD_ATTR,
    MP_F_LOAD_METHOD,
    MP_F_LOAD_SUPER_METHOD,
    MP_F_STORE_NAME,
    MP_F_STORE_GLOBAL,
    MP_F_STORE_ATTR,
    MP_F_OBJ_SUBSCR,
    MP_F_OBJ_IS_TRUE,
    MP_F_UNARY_OP,
    MP_F_BINARY_OP,
    MP_F_BUILD_TUPLE,
    MP_F_BUILD_LIST,
    MP_F_BUILD_MAP,
    MP_F_BUILD_SET,
    MP_F_STORE_SET,
    MP_F_LIST_APPEND,
    MP_F_STORE_MAP,
    MP_F_MAKE_FUNCTION_FROM_RAW_CODE,
    MP_F_NATIVE_CALL_FUNCTION_N_KW,
    MP_F_CALL_METHOD_N_KW,
    MP_F_CALL_METHOD_N_KW_VAR,
    MP_F_NATIVE_GETITER,
    MP_F_NATIVE_ITERNEXT,
    MP_F_NLR_PUSH,
    MP_F_NLR_POP,
    MP_F_NATIVE_RAISE,
    MP_F_IMPORT_NAME,
    MP_F_IMPORT_FROM,
    MP_F_IMPORT_ALL,
    MP_F_NEW_SLICE,
    MP_F_UNPACK_SEQUENCE,
    MP_F_UNPACK_EX,
    MP_F_DELETE_NAME,
    MP_F_DELETE_GLOBAL,
    MP_F_MAKE_CLOSURE_FROM_RAW_CODE,
    MP_F_ARG_CHECK_NUM_SIG,
    MP_F_SETUP_CODE_STATE,
    MP_F_SMALL_INT_FLOOR_DIVIDE,
    MP_F_SMALL_INT_MODULO,
    MP_F_NATIVE_YIELD_FROM,
    MP_F_SETJMP,
    MP_F_NUMBER_OF,
} mp_fun_kind_t;

extern const void *const mp_fun_table[MP_F_NUMBER_OF];
# 34 "../Testing_module/JOYSTICK/../../../py/obj.h" 2
# 42 "../Testing_module/JOYSTICK/../../../py/obj.h"
typedef void *mp_obj_t;
typedef const void *mp_const_obj_t;




typedef struct _mp_obj_type_t mp_obj_type_t;



struct _mp_obj_base_t {
    const mp_obj_type_t *type ;
};
typedef struct _mp_obj_base_t mp_obj_base_t;
# 84 "../Testing_module/JOYSTICK/../../../py/obj.h"
static inline _Bool mp_obj_is_small_int(mp_const_obj_t o)
    { return ((((mp_int_t)(o)) & 1) != 0); }



static inline _Bool mp_obj_is_qstr(mp_const_obj_t o)
    { return ((((mp_int_t)(o)) & 3) == 2); }






extern const struct _mp_obj_float_t mp_const_float_e_obj;
extern const struct _mp_obj_float_t mp_const_float_pi_obj;


mp_float_t mp_obj_float_get(mp_obj_t self_in);
mp_obj_t mp_obj_new_float(mp_float_t value);


static inline _Bool mp_obj_is_obj(mp_const_obj_t o)
    { return ((((mp_int_t)(o)) & 3) == 0); }
# 246 "../Testing_module/JOYSTICK/../../../py/obj.h"
typedef mp_const_obj_t mp_rom_obj_t;
# 338 "../Testing_module/JOYSTICK/../../../py/obj.h"
typedef struct _mp_map_elem_t {
    mp_obj_t key;
    mp_obj_t value;
} mp_map_elem_t;

typedef struct _mp_rom_map_elem_t {
    mp_rom_obj_t key;
    mp_rom_obj_t value;
} mp_rom_map_elem_t;






typedef struct _mp_map_t {
    size_t all_keys_are_qstrs : 1;
    size_t is_fixed : 1;
    size_t is_ordered : 1;
    size_t used : (8 * sizeof(size_t) - 3);
    size_t alloc;
    mp_map_elem_t *table;
} mp_map_t;


typedef enum _mp_map_lookup_kind_t {
    MP_MAP_LOOKUP = 0,
    MP_MAP_LOOKUP_ADD_IF_NOT_FOUND = 1,
    MP_MAP_LOOKUP_REMOVE_IF_FOUND = 2,
    MP_MAP_LOOKUP_ADD_IF_NOT_FOUND_OR_REMOVE_IF_FOUND = 3,
} mp_map_lookup_kind_t;

extern const mp_map_t mp_const_empty_map;

static inline _Bool mp_map_slot_is_filled(const mp_map_t *map, size_t pos) { return ((map)->table[pos].key != (((mp_obj_t)(void*)0)) && (map)->table[pos].key != (((mp_obj_t)(void*)4))); }

void mp_map_init(mp_map_t *map, size_t n);
void mp_map_init_fixed_table(mp_map_t *map, size_t n, const mp_obj_t *table);
mp_map_t *mp_map_new(size_t n);
void mp_map_deinit(mp_map_t *map);
void mp_map_free(mp_map_t *map);
mp_map_elem_t *mp_map_lookup(mp_map_t *map, mp_obj_t index, mp_map_lookup_kind_t lookup_kind);
void mp_map_clear(mp_map_t *map);
void mp_map_dump(mp_map_t *map);



typedef struct _mp_set_t {
    size_t alloc;
    size_t used;
    mp_obj_t *table;
} mp_set_t;

static inline _Bool mp_set_slot_is_filled(const mp_set_t *set, size_t pos) { return ((set)->table[pos] != (((mp_obj_t)(void*)0)) && (set)->table[pos] != (((mp_obj_t)(void*)4))); }

void mp_set_init(mp_set_t *set, size_t n);
mp_obj_t mp_set_lookup(mp_set_t *set, mp_obj_t index, mp_map_lookup_kind_t lookup_kind);
mp_obj_t mp_set_remove_first(mp_set_t *set);
void mp_set_clear(mp_set_t *set);



typedef mp_obj_t (*mp_fun_0_t)(void);
typedef mp_obj_t (*mp_fun_1_t)(mp_obj_t);
typedef mp_obj_t (*mp_fun_2_t)(mp_obj_t, mp_obj_t);
typedef mp_obj_t (*mp_fun_3_t)(mp_obj_t, mp_obj_t, mp_obj_t);
typedef mp_obj_t (*mp_fun_var_t)(size_t n, const mp_obj_t *);


typedef mp_obj_t (*mp_fun_kw_t)(size_t n, const mp_obj_t *, mp_map_t *);

typedef enum {
    PRINT_STR = 0,
    PRINT_REPR = 1,
    PRINT_EXC = 2,
    PRINT_JSON = 3,
    PRINT_RAW = 4,
    PRINT_EXC_SUBCLASS = 0x80,
} mp_print_kind_t;

typedef struct _mp_obj_iter_buf_t {
    mp_obj_base_t base;
    mp_obj_t buf[3];
} mp_obj_iter_buf_t;





typedef void (*mp_print_fun_t)(const mp_print_t *print, mp_obj_t o, mp_print_kind_t kind);
typedef mp_obj_t (*mp_make_new_fun_t)(const mp_obj_type_t *type, size_t n_args, size_t n_kw, const mp_obj_t *args);
typedef mp_obj_t (*mp_call_fun_t)(mp_obj_t fun, size_t n_args, size_t n_kw, const mp_obj_t *args);
typedef mp_obj_t (*mp_unary_op_fun_t)(mp_unary_op_t op, mp_obj_t);
typedef mp_obj_t (*mp_binary_op_fun_t)(mp_binary_op_t op, mp_obj_t, mp_obj_t);
typedef void (*mp_attr_fun_t)(mp_obj_t self_in, qstr attr, mp_obj_t *dest);
typedef mp_obj_t (*mp_subscr_fun_t)(mp_obj_t self_in, mp_obj_t index, mp_obj_t value);
typedef mp_obj_t (*mp_getiter_fun_t)(mp_obj_t self_in, mp_obj_iter_buf_t *iter_buf);


typedef struct _mp_buffer_info_t {





    void *buf;
    size_t len;
    int typecode;




} mp_buffer_info_t;



typedef struct _mp_buffer_p_t {
    mp_int_t (*get_buffer)(mp_obj_t obj, mp_buffer_info_t *bufinfo, mp_uint_t flags);
} mp_buffer_p_t;
_Bool mp_get_buffer(mp_obj_t obj, mp_buffer_info_t *bufinfo, mp_uint_t flags);
void mp_get_buffer_raise(mp_obj_t obj, mp_buffer_info_t *bufinfo, mp_uint_t flags);

struct _mp_obj_type_t {

    mp_obj_base_t base;


    uint16_t flags;


    uint16_t name;


    mp_print_fun_t print;


    mp_make_new_fun_t make_new;


    mp_call_fun_t call;



    mp_unary_op_fun_t unary_op;
    mp_binary_op_fun_t binary_op;
# 495 "../Testing_module/JOYSTICK/../../../py/obj.h"
    mp_attr_fun_t attr;






    mp_subscr_fun_t subscr;




    mp_getiter_fun_t getiter;



    mp_fun_1_t iternext;


    mp_buffer_p_t buffer_p;


    const void *protocol;





    const void *parent;


    struct _mp_obj_dict_t *locals_dict;
};


extern const mp_obj_type_t mp_type_type;
extern const mp_obj_type_t mp_type_object;
extern const mp_obj_type_t mp_type_NoneType;
extern const mp_obj_type_t mp_type_bool;
extern const mp_obj_type_t mp_type_int;
extern const mp_obj_type_t mp_type_str;
extern const mp_obj_type_t mp_type_bytes;
extern const mp_obj_type_t mp_type_bytearray;
extern const mp_obj_type_t mp_type_memoryview;
extern const mp_obj_type_t mp_type_float;
extern const mp_obj_type_t mp_type_complex;
extern const mp_obj_type_t mp_type_tuple;
extern const mp_obj_type_t mp_type_list;
extern const mp_obj_type_t mp_type_map;
extern const mp_obj_type_t mp_type_enumerate;
extern const mp_obj_type_t mp_type_filter;
extern const mp_obj_type_t mp_type_deque;
extern const mp_obj_type_t mp_type_dict;
extern const mp_obj_type_t mp_type_ordereddict;
extern const mp_obj_type_t mp_type_range;
extern const mp_obj_type_t mp_type_set;
extern const mp_obj_type_t mp_type_frozenset;
extern const mp_obj_type_t mp_type_slice;
extern const mp_obj_type_t mp_type_zip;
extern const mp_obj_type_t mp_type_array;
extern const mp_obj_type_t mp_type_super;
extern const mp_obj_type_t mp_type_gen_wrap;
extern const mp_obj_type_t mp_type_native_gen_wrap;
extern const mp_obj_type_t mp_type_gen_instance;
extern const mp_obj_type_t mp_type_fun_builtin_0;
extern const mp_obj_type_t mp_type_fun_builtin_1;
extern const mp_obj_type_t mp_type_fun_builtin_2;
extern const mp_obj_type_t mp_type_fun_builtin_3;
extern const mp_obj_type_t mp_type_fun_builtin_var;
extern const mp_obj_type_t mp_type_fun_bc;
extern const mp_obj_type_t mp_type_module;
extern const mp_obj_type_t mp_type_staticmethod;
extern const mp_obj_type_t mp_type_classmethod;
extern const mp_obj_type_t mp_type_property;
extern const mp_obj_type_t mp_type_stringio;
extern const mp_obj_type_t mp_type_bytesio;
extern const mp_obj_type_t mp_type_reversed;
extern const mp_obj_type_t mp_type_polymorph_iter;


extern const mp_obj_type_t mp_type_BaseException;
extern const mp_obj_type_t mp_type_ArithmeticError;
extern const mp_obj_type_t mp_type_AssertionError;
extern const mp_obj_type_t mp_type_AttributeError;
extern const mp_obj_type_t mp_type_EOFError;
extern const mp_obj_type_t mp_type_Exception;
extern const mp_obj_type_t mp_type_GeneratorExit;
extern const mp_obj_type_t mp_type_ImportError;
extern const mp_obj_type_t mp_type_IndentationError;
extern const mp_obj_type_t mp_type_IndexError;
extern const mp_obj_type_t mp_type_KeyboardInterrupt;
extern const mp_obj_type_t mp_type_KeyError;
extern const mp_obj_type_t mp_type_LookupError;
extern const mp_obj_type_t mp_type_MemoryError;
extern const mp_obj_type_t mp_type_NameError;
extern const mp_obj_type_t mp_type_NotImplementedError;
extern const mp_obj_type_t mp_type_OSError;
extern const mp_obj_type_t mp_type_TimeoutError;
extern const mp_obj_type_t mp_type_OverflowError;
extern const mp_obj_type_t mp_type_RuntimeError;
extern const mp_obj_type_t mp_type_StopAsyncIteration;
extern const mp_obj_type_t mp_type_StopIteration;
extern const mp_obj_type_t mp_type_SyntaxError;
extern const mp_obj_type_t mp_type_SystemExit;
extern const mp_obj_type_t mp_type_TypeError;
extern const mp_obj_type_t mp_type_UnicodeError;
extern const mp_obj_type_t mp_type_ValueError;
extern const mp_obj_type_t mp_type_ViperTypeError;
extern const mp_obj_type_t mp_type_ZeroDivisionError;
# 613 "../Testing_module/JOYSTICK/../../../py/obj.h"
extern const struct _mp_obj_none_t mp_const_none_obj;
extern const struct _mp_obj_bool_t mp_const_false_obj;
extern const struct _mp_obj_bool_t mp_const_true_obj;
extern const struct _mp_obj_str_t mp_const_empty_bytes_obj;
extern const struct _mp_obj_tuple_t mp_const_empty_tuple_obj;
extern const struct _mp_obj_singleton_t mp_const_ellipsis_obj;
extern const struct _mp_obj_singleton_t mp_const_notimplemented_obj;
extern const struct _mp_obj_exception_t mp_const_GeneratorExit_obj;
# 634 "../Testing_module/JOYSTICK/../../../py/obj.h"
mp_obj_t mp_obj_new_type(qstr name, mp_obj_t bases_tuple, mp_obj_t locals_dict);
static inline mp_obj_t mp_obj_new_bool(mp_int_t x) { return x ? (((mp_obj_t)&mp_const_true_obj)) : (((mp_obj_t)&mp_const_false_obj)); }
mp_obj_t mp_obj_new_cell(mp_obj_t obj);
mp_obj_t mp_obj_new_int(mp_int_t value);
mp_obj_t mp_obj_new_int_from_uint(mp_uint_t value);
mp_obj_t mp_obj_new_int_from_str_len(const char **str, size_t len, _Bool neg, unsigned int base);
mp_obj_t mp_obj_new_int_from_ll(long long val);
mp_obj_t mp_obj_new_int_from_ull(unsigned long long val);
mp_obj_t mp_obj_new_str(const char* data, size_t len);
mp_obj_t mp_obj_new_str_via_qstr(const char* data, size_t len);
mp_obj_t mp_obj_new_str_from_vstr(const mp_obj_type_t *type, vstr_t *vstr);
mp_obj_t mp_obj_new_bytes(const byte* data, size_t len);
mp_obj_t mp_obj_new_bytearray(size_t n, void *items);
mp_obj_t mp_obj_new_bytearray_by_ref(size_t n, void *items);

mp_obj_t mp_obj_new_int_from_float(mp_float_t val);
mp_obj_t mp_obj_new_complex(mp_float_t real, mp_float_t imag);

mp_obj_t mp_obj_new_exception(const mp_obj_type_t *exc_type);
mp_obj_t mp_obj_new_exception_arg1(const mp_obj_type_t *exc_type, mp_obj_t arg);
mp_obj_t mp_obj_new_exception_args(const mp_obj_type_t *exc_type, size_t n_args, const mp_obj_t *args);
mp_obj_t mp_obj_new_exception_msg(const mp_obj_type_t *exc_type, const char *msg);
mp_obj_t mp_obj_new_exception_msg_varg(const mp_obj_type_t *exc_type, const char *fmt, ...);
mp_obj_t mp_obj_new_fun_bc(mp_obj_t def_args, mp_obj_t def_kw_args, const byte *code, const mp_uint_t *const_table);
mp_obj_t mp_obj_new_fun_native(mp_obj_t def_args_in, mp_obj_t def_kw_args, const void *fun_data, const mp_uint_t *const_table);
mp_obj_t mp_obj_new_fun_asm(size_t n_args, const void *fun_data, mp_uint_t type_sig);
mp_obj_t mp_obj_new_gen_wrap(mp_obj_t fun);
mp_obj_t mp_obj_new_closure(mp_obj_t fun, size_t n_closed, const mp_obj_t *closed);
mp_obj_t mp_obj_new_tuple(size_t n, const mp_obj_t *items);
mp_obj_t mp_obj_new_list(size_t n, mp_obj_t *items);
mp_obj_t mp_obj_new_dict(size_t n_args);
mp_obj_t mp_obj_new_set(size_t n_args, mp_obj_t *items);
mp_obj_t mp_obj_new_slice(mp_obj_t start, mp_obj_t stop, mp_obj_t step);
mp_obj_t mp_obj_new_bound_meth(mp_obj_t meth, mp_obj_t self);
mp_obj_t mp_obj_new_getitem_iter(mp_obj_t *args, mp_obj_iter_buf_t *iter_buf);
mp_obj_t mp_obj_new_module(qstr module_name);
mp_obj_t mp_obj_new_memoryview(byte typecode, size_t nitems, void *items);

mp_obj_type_t *mp_obj_get_type(mp_const_obj_t o_in);
const char *mp_obj_get_type_str(mp_const_obj_t o_in);
_Bool mp_obj_is_subclass_fast(mp_const_obj_t object, mp_const_obj_t classinfo);
mp_obj_t mp_instance_cast_to_native_base(mp_const_obj_t self_in, mp_const_obj_t native_type);

void mp_obj_print_helper(const mp_print_t *print, mp_obj_t o_in, mp_print_kind_t kind);
void mp_obj_print(mp_obj_t o, mp_print_kind_t kind);
void mp_obj_print_exception(const mp_print_t *print, mp_obj_t exc);

_Bool mp_obj_is_true(mp_obj_t arg);
_Bool mp_obj_is_callable(mp_obj_t o_in);
_Bool mp_obj_equal(mp_obj_t o1, mp_obj_t o2);

static inline _Bool mp_obj_is_integer(mp_const_obj_t o) { return (mp_obj_is_small_int(o) || (mp_obj_is_obj(o) && (((mp_obj_base_t*)((void*)o))->type == (&mp_type_int)))) || (mp_obj_is_obj(o) && (((mp_obj_base_t*)((void*)o))->type == (&mp_type_bool))); }
mp_int_t mp_obj_get_int(mp_const_obj_t arg);
mp_int_t mp_obj_get_int_truncated(mp_const_obj_t arg);
_Bool mp_obj_get_int_maybe(mp_const_obj_t arg, mp_int_t *value);

mp_float_t mp_obj_get_float(mp_obj_t self_in);
_Bool mp_obj_get_float_maybe(mp_obj_t arg, mp_float_t *value);
void mp_obj_get_complex(mp_obj_t self_in, mp_float_t *real, mp_float_t *imag);

void mp_obj_get_array(mp_obj_t o, size_t *len, mp_obj_t **items);
void mp_obj_get_array_fixed_n(mp_obj_t o, size_t len, mp_obj_t **items);
size_t mp_get_index(const mp_obj_type_t *type, size_t len, mp_obj_t index, _Bool is_slice);
mp_obj_t mp_obj_id(mp_obj_t o_in);
mp_obj_t mp_obj_len(mp_obj_t o_in);
mp_obj_t mp_obj_len_maybe(mp_obj_t o_in);
mp_obj_t mp_obj_subscr(mp_obj_t base, mp_obj_t index, mp_obj_t val);
mp_obj_t mp_generic_unary_op(mp_unary_op_t op, mp_obj_t o_in);


mp_obj_t mp_obj_cell_get(mp_obj_t self_in);
void mp_obj_cell_set(mp_obj_t self_in, mp_obj_t obj);



mp_int_t mp_obj_int_get_truncated(mp_const_obj_t self_in);

mp_int_t mp_obj_int_get_checked(mp_const_obj_t self_in);



_Bool mp_obj_is_exception_type(mp_obj_t self_in);
_Bool mp_obj_is_exception_instance(mp_obj_t self_in);
_Bool mp_obj_exception_match(mp_obj_t exc, mp_const_obj_t exc_type);
void mp_obj_exception_clear_traceback(mp_obj_t self_in);
void mp_obj_exception_add_traceback(mp_obj_t self_in, qstr file, size_t line, qstr block);
void mp_obj_exception_get_traceback(mp_obj_t self_in, size_t *n, size_t **values);
mp_obj_t mp_obj_exception_get_value(mp_obj_t self_in);
mp_obj_t mp_obj_exception_make_new(const mp_obj_type_t *type_in, size_t n_args, size_t n_kw, const mp_obj_t *args);
mp_obj_t mp_alloc_emergency_exception_buf(mp_obj_t size_in);
void mp_init_emergency_exception_buf(void);


_Bool mp_obj_str_equal(mp_obj_t s1, mp_obj_t s2);
qstr mp_obj_str_get_qstr(mp_obj_t self_in);
const char *mp_obj_str_get_str(mp_obj_t self_in);
const char *mp_obj_str_get_data(mp_obj_t self_in, size_t *len);
mp_obj_t mp_obj_str_intern(mp_obj_t str);
mp_obj_t mp_obj_str_intern_checked(mp_obj_t obj);
void mp_str_print_quoted(const mp_print_t *print, const byte *str_data, size_t str_len, _Bool is_bytes);






static inline mp_int_t mp_float_hash(mp_float_t val) { return (mp_int_t)val; }

mp_obj_t mp_obj_float_binary_op(mp_binary_op_t op, mp_float_t lhs_val, mp_obj_t rhs);


void mp_obj_complex_get(mp_obj_t self_in, mp_float_t *real, mp_float_t *imag);
mp_obj_t mp_obj_complex_binary_op(mp_binary_op_t op, mp_float_t lhs_real, mp_float_t lhs_imag, mp_obj_t rhs_in);





void mp_obj_tuple_get(mp_obj_t self_in, size_t *len, mp_obj_t **items);
void mp_obj_tuple_del(mp_obj_t self_in);
mp_int_t mp_obj_tuple_hash(mp_obj_t self_in);


mp_obj_t mp_obj_list_append(mp_obj_t self_in, mp_obj_t arg);
mp_obj_t mp_obj_list_remove(mp_obj_t self_in, mp_obj_t value);
void mp_obj_list_get(mp_obj_t self_in, size_t *len, mp_obj_t **items);
void mp_obj_list_set_len(mp_obj_t self_in, size_t len);
void mp_obj_list_store(mp_obj_t self_in, mp_obj_t index, mp_obj_t value);
mp_obj_t mp_obj_list_sort(size_t n_args, const mp_obj_t *args, mp_map_t *kwargs);


typedef struct _mp_obj_dict_t {
    mp_obj_base_t base;
    mp_map_t map;
} mp_obj_dict_t;
void mp_obj_dict_init(mp_obj_dict_t *dict, size_t n_args);
size_t mp_obj_dict_len(mp_obj_t self_in);
mp_obj_t mp_obj_dict_get(mp_obj_t self_in, mp_obj_t index);
mp_obj_t mp_obj_dict_store(mp_obj_t self_in, mp_obj_t key, mp_obj_t value);
mp_obj_t mp_obj_dict_delete(mp_obj_t self_in, mp_obj_t key);
static inline mp_map_t *mp_obj_dict_get_map(mp_obj_t dict) {
    return &((mp_obj_dict_t*)((void*)dict))->map;
}


void mp_obj_set_store(mp_obj_t self_in, mp_obj_t item);


void mp_obj_slice_get(mp_obj_t self_in, mp_obj_t *start, mp_obj_t *stop, mp_obj_t *step);



typedef struct _mp_obj_fun_builtin_fixed_t {
    mp_obj_base_t base;
    union {
        mp_fun_0_t _0;
        mp_fun_1_t _1;
        mp_fun_2_t _2;
        mp_fun_3_t _3;
    } fun;
} mp_obj_fun_builtin_fixed_t;

typedef struct _mp_obj_fun_builtin_var_t {
    mp_obj_base_t base;
    uint32_t sig;
    union {
        mp_fun_var_t var;
        mp_fun_kw_t kw;
    } fun;
} mp_obj_fun_builtin_var_t;

qstr mp_obj_fun_get_name(mp_const_obj_t fun);
qstr mp_obj_code_get_name(const byte *code_info);

mp_obj_t mp_identity(mp_obj_t self);
extern const mp_obj_fun_builtin_fixed_t mp_identity_obj;
mp_obj_t mp_identity_getiter(mp_obj_t self, mp_obj_iter_buf_t *iter_buf);


typedef struct _mp_obj_module_t {
    mp_obj_base_t base;
    mp_obj_dict_t *globals;
} mp_obj_module_t;
static inline mp_obj_dict_t *mp_obj_module_get_globals(mp_obj_t module) {
    return ((mp_obj_module_t*)((void*)module))->globals;
}

_Bool mp_obj_is_package(mp_obj_t module);



typedef struct _mp_obj_static_class_method_t {
    mp_obj_base_t base;
    mp_obj_t fun;
} mp_obj_static_class_method_t;
typedef struct _mp_rom_obj_static_class_method_t {
    mp_obj_base_t base;
    mp_rom_obj_t fun;
} mp_rom_obj_static_class_method_t;


const mp_obj_t *mp_obj_property_get(mp_obj_t self_in);




typedef struct {
    mp_uint_t start;
    mp_uint_t stop;
    mp_int_t step;
} mp_bound_slice_t;

void mp_seq_multiply(const void *items, size_t item_sz, size_t len, size_t times, void *dest);

_Bool mp_seq_get_fast_slice_indexes(mp_uint_t len, mp_obj_t slice, mp_bound_slice_t *indexes);



_Bool mp_seq_cmp_bytes(mp_uint_t op, const byte *data1, size_t len1, const byte *data2, size_t len2);
_Bool mp_seq_cmp_objs(mp_uint_t op, const mp_obj_t *items1, size_t len1, const mp_obj_t *items2, size_t len2);
mp_obj_t mp_seq_index_obj(const mp_obj_t *items, size_t len, size_t n_args, const mp_obj_t *args);
mp_obj_t mp_seq_count_obj(const mp_obj_t *items, size_t len, mp_obj_t value);
mp_obj_t mp_seq_extract_slice(size_t len, const mp_obj_t *seq, mp_bound_slice_t *indexes);
# 2 "../Testing_module/JOYSTICK/joystick.c" 2
# 1 "../Testing_module/JOYSTICK/../../../py/runtime.h" 1
# 29 "../Testing_module/JOYSTICK/../../../py/runtime.h"
# 1 "../../py/mpstate.h" 1
# 32 "../../py/mpstate.h"
# 1 "../../py/mpthread.h" 1
# 33 "../../py/mpstate.h" 2

# 1 "../../py/nlr.h" 1
# 32 "../../py/nlr.h"
# 1 "/usr/lib/gcc/arm-none-eabi/4.9.3/include-fixed/limits.h" 1 3 4
# 33 "../../py/nlr.h" 2
# 1 "/usr/include/newlib/assert.h" 1 3
# 39 "/usr/include/newlib/assert.h" 3
void __assert (const char *, int, const char *) __attribute__ ((__noreturn__))
                                 ;
void __assert_func (const char *, int, const char *, const char *) __attribute__ ((__noreturn__))
                                 ;
# 34 "../../py/nlr.h" 2
# 90 "../../py/nlr.h"
typedef struct _nlr_buf_t nlr_buf_t;
struct _nlr_buf_t {

    nlr_buf_t *prev;
    void *ret_val;




    void *regs[((10 + 6))];





};
# 133 "../../py/nlr.h"
unsigned int nlr_push(nlr_buf_t *);


unsigned int nlr_push_tail(nlr_buf_t *top);
void nlr_pop(void);
__attribute__((noreturn)) void nlr_jump(void *val);




__attribute__((noreturn)) void nlr_jump_fail(void *val);
# 35 "../../py/mpstate.h" 2
# 1 "../../py/obj.h" 1
# 36 "../../py/mpstate.h" 2
# 1 "../../py/objlist.h" 1
# 31 "../../py/objlist.h"
typedef struct _mp_obj_list_t {
    mp_obj_base_t base;
    size_t alloc;
    size_t len;
    mp_obj_t *items;
} mp_obj_list_t;

void mp_obj_list_init(mp_obj_list_t *o, size_t n);
# 37 "../../py/mpstate.h" 2
# 1 "../../py/objexcept.h" 1
# 30 "../../py/objexcept.h"
# 1 "../../py/objtuple.h" 1
# 31 "../../py/objtuple.h"
typedef struct _mp_obj_tuple_t {
    mp_obj_base_t base;
    size_t len;
    mp_obj_t items[];
} mp_obj_tuple_t;

typedef struct _mp_rom_obj_tuple_t {
    mp_obj_base_t base;
    size_t len;
    mp_rom_obj_t items[];
} mp_rom_obj_tuple_t;

void mp_obj_tuple_print(const mp_print_t *print, mp_obj_t o_in, mp_print_kind_t kind);
mp_obj_t mp_obj_tuple_unary_op(mp_unary_op_t op, mp_obj_t self_in);
mp_obj_t mp_obj_tuple_binary_op(mp_binary_op_t op, mp_obj_t lhs, mp_obj_t rhs);
mp_obj_t mp_obj_tuple_subscr(mp_obj_t base, mp_obj_t index, mp_obj_t value);
mp_obj_t mp_obj_tuple_getiter(mp_obj_t o_in, mp_obj_iter_buf_t *iter_buf);

extern const mp_obj_type_t mp_type_attrtuple;
# 59 "../../py/objtuple.h"
void mp_obj_attrtuple_print_helper(const mp_print_t *print, const qstr *fields, mp_obj_tuple_t *o);


mp_obj_t mp_obj_new_attrtuple(const qstr *fields, size_t n, const mp_obj_t *items);
# 31 "../../py/objexcept.h" 2

typedef struct _mp_obj_exception_t {
    mp_obj_base_t base;
    size_t traceback_alloc : (8 * sizeof(size_t) / 2);
    size_t traceback_len : (8 * sizeof(size_t) / 2);
    size_t *traceback_data;
    mp_obj_tuple_t *args;
} mp_obj_exception_t;

void mp_obj_exception_print(const mp_print_t *print, mp_obj_t o_in, mp_print_kind_t kind);
void mp_obj_exception_attr(mp_obj_t self_in, qstr attr, mp_obj_t *dest);
# 38 "../../py/mpstate.h" 2
# 60 "../../py/mpstate.h"
typedef struct _mp_sched_item_t {
    mp_obj_t func;
    mp_obj_t arg;
} mp_sched_item_t;


typedef struct _mp_state_mem_t {






    byte *gc_alloc_table_start;
    size_t gc_alloc_table_byte_len;

    byte *gc_finaliser_table_start;

    byte *gc_pool_start;
    byte *gc_pool_end;

    int gc_stack_overflow;
    uint16_t gc_stack[(64)];
    uint16_t gc_lock_depth;




    uint16_t gc_auto_collect_enabled;


    size_t gc_alloc_amount;
    size_t gc_alloc_threshold;


    size_t gc_last_free_atb_index;
# 105 "../../py/mpstate.h"
} mp_state_mem_t;



typedef struct _mp_state_vm_t {







    qstr_pool_t *last_pool;


    mp_obj_exception_t mp_emergency_exception_obj;
# 129 "../../py/mpstate.h"
    byte *mp_emergency_exception_buf;





    mp_obj_exception_t mp_kbd_exception;



    mp_obj_dict_t mp_loaded_modules_dict;


    volatile mp_obj_t mp_pending_exception;


    mp_sched_item_t sched_queue[(8)];
# 159 "../../py/mpstate.h"
    mp_obj_dict_t dict_main;


    mp_obj_list_t mp_sys_path_obj;
    mp_obj_list_t mp_sys_argv_obj;



    mp_obj_dict_t *mp_module_builtins_override_dict;



    lv_ll_t _lv_task_ll; lv_ll_t _lv_disp_ll; lv_ll_t _lv_indev_ll; lv_ll_t _lv_drv_ll; lv_ll_t _lv_file_ll; lv_ll_t _lv_anim_ll; lv_ll_t _lv_group_ll; lv_ll_t _lv_img_defoder_ll; lv_img_cache_entry_t * _lv_img_cache_array; void * _lv_task_act; void * _lv_draw_buf; void *mp_lv_user_data; const char *readline_hist[8]; mp_obj_t pyb_hid_report_desc; mp_obj_t pyb_config_main; mp_obj_t pyb_switch_callback; mp_obj_t pin_class_mapper; mp_obj_t pin_class_map_dict; mp_obj_t pyb_extint_callback[(23)]; struct _soft_timer_entry_t *soft_timer_head; struct _pyb_timer_obj_t *pyb_timer_obj_all[(17)]; struct _pyb_uart_obj_t *pyb_stdio_uart; struct _pyb_uart_obj_t *pyb_uart_obj_all[(6)]; struct _pyb_can_obj_t *pyb_can_obj_all[(0)]; mp_obj_list_t mod_network_nic_list;
# 180 "../../py/mpstate.h"
    mp_obj_t dupterm_objs[(3)];







    struct _mp_vfs_mount_t *vfs_cur;
    struct _mp_vfs_mount_t *vfs_mount_table;
# 202 "../../py/mpstate.h"
    byte *qstr_last_chunk;
    size_t qstr_last_alloc;
    size_t qstr_last_used;







    mp_uint_t mp_optimise_value;

    uint8_t default_emit_opt;





    mp_int_t mp_emergency_exception_buf_size;



    volatile int16_t sched_state;
    uint8_t sched_len;
    uint8_t sched_idx;






} mp_state_vm_t;



typedef struct _mp_state_thread_t {

    char *stack_top;


    size_t stack_limit;
# 257 "../../py/mpstate.h"
    mp_obj_dict_t *dict_locals;
    mp_obj_dict_t *dict_globals;

    nlr_buf_t *nlr_top;






} mp_state_thread_t;



typedef struct _mp_state_ctx_t {
    mp_state_thread_t thread;
    mp_state_vm_t vm;
    mp_state_mem_t mem;
} mp_state_ctx_t;

extern mp_state_ctx_t mp_state_ctx;
# 30 "../Testing_module/JOYSTICK/../../../py/runtime.h" 2
# 1 "../../py/pystack.h" 1
# 80 "../../py/pystack.h"
static inline void mp_local_free(void *ptr) {
    (void)ptr;
}

static inline void *mp_nonlocal_alloc(size_t n_bytes) {
    return ((uint8_t*)(m_malloc(sizeof(uint8_t) * (n_bytes))));
}

static inline void *mp_nonlocal_realloc(void *ptr, size_t old_n_bytes, size_t new_n_bytes) {
    return ((uint8_t*)(m_realloc((ptr), sizeof(uint8_t) * (new_n_bytes))));
}

static inline void mp_nonlocal_free(void *ptr, size_t n_bytes) {
    ((void)(n_bytes), m_free(ptr));
}
# 31 "../Testing_module/JOYSTICK/../../../py/runtime.h" 2

typedef enum {
    MP_VM_RETURN_NORMAL,
    MP_VM_RETURN_YIELD,
    MP_VM_RETURN_EXCEPTION,
} mp_vm_return_kind_t;

typedef enum {
    MP_ARG_BOOL = 0x001,
    MP_ARG_INT = 0x002,
    MP_ARG_OBJ = 0x003,
    MP_ARG_KIND_MASK = 0x0ff,
    MP_ARG_REQUIRED = 0x100,
    MP_ARG_KW_ONLY = 0x200,
} mp_arg_flag_t;

typedef union _mp_arg_val_t {
    _Bool u_bool;
    mp_int_t u_int;
    mp_obj_t u_obj;
    mp_rom_obj_t u_rom_obj;
} mp_arg_val_t;

typedef struct _mp_arg_t {
    uint16_t qst;
    uint16_t flags;
    mp_arg_val_t defval;
} mp_arg_t;


extern const byte mp_unary_op_method_name[];
extern const byte mp_binary_op_method_name[];

void mp_init(void);
void mp_deinit(void);

void mp_handle_pending(void);
void mp_handle_pending_tail(mp_uint_t atomic_state);


void mp_sched_lock(void);
void mp_sched_unlock(void);
static inline unsigned int mp_sched_num_pending(void) { return (mp_state_ctx.vm.sched_len); }
_Bool mp_sched_schedule(mp_obj_t function, mp_obj_t arg);



int mp_print_mp_int(const mp_print_t *print, mp_obj_t x, int base, int base_char, int flags, char fill, int width, int prec);

void mp_arg_check_num_sig(size_t n_args, size_t n_kw, uint32_t sig);
static inline void mp_arg_check_num(size_t n_args, size_t n_kw, size_t n_args_min, size_t n_args_max, _Bool takes_kw) {
    mp_arg_check_num_sig(n_args, n_kw, ((uint32_t)((((uint32_t)(n_args_min)) << 17) | (((uint32_t)(n_args_max)) << 1) | ((takes_kw) ? 1 : 0))));
}
void mp_arg_parse_all(size_t n_pos, const mp_obj_t *pos, mp_map_t *kws, size_t n_allowed, const mp_arg_t *allowed, mp_arg_val_t *out_vals);
void mp_arg_parse_all_kw_array(size_t n_pos, size_t n_kw, const mp_obj_t *args, size_t n_allowed, const mp_arg_t *allowed, mp_arg_val_t *out_vals);
__attribute__((noreturn)) void mp_arg_error_terse_mismatch(void);
__attribute__((noreturn)) void mp_arg_error_unimpl_kw(void);

static inline mp_obj_dict_t *mp_locals_get(void) { return (mp_state_ctx.thread.dict_locals); }
static inline void mp_locals_set(mp_obj_dict_t *d) { (mp_state_ctx.thread.dict_locals) = d; }
static inline mp_obj_dict_t *mp_globals_get(void) { return (mp_state_ctx.thread.dict_globals); }
static inline void mp_globals_set(mp_obj_dict_t *d) { (mp_state_ctx.thread.dict_globals) = d; }

mp_obj_t mp_load_name(qstr qst);
mp_obj_t mp_load_global(qstr qst);
mp_obj_t mp_load_build_class(void);
void mp_store_name(qstr qst, mp_obj_t obj);
void mp_store_global(qstr qst, mp_obj_t obj);
void mp_delete_name(qstr qst);
void mp_delete_global(qstr qst);

mp_obj_t mp_unary_op(mp_unary_op_t op, mp_obj_t arg);
mp_obj_t mp_binary_op(mp_binary_op_t op, mp_obj_t lhs, mp_obj_t rhs);

mp_obj_t mp_call_function_0(mp_obj_t fun);
mp_obj_t mp_call_function_1(mp_obj_t fun, mp_obj_t arg);
mp_obj_t mp_call_function_2(mp_obj_t fun, mp_obj_t arg1, mp_obj_t arg2);
mp_obj_t mp_call_function_n_kw(mp_obj_t fun, size_t n_args, size_t n_kw, const mp_obj_t *args);
mp_obj_t mp_call_method_n_kw(size_t n_args, size_t n_kw, const mp_obj_t *args);
mp_obj_t mp_call_method_n_kw_var(_Bool have_self, size_t n_args_n_kw, const mp_obj_t *args);
mp_obj_t mp_call_method_self_n_kw(mp_obj_t meth, mp_obj_t self, size_t n_args, size_t n_kw, const mp_obj_t *args);


mp_obj_t mp_call_function_1_protected(mp_obj_t fun, mp_obj_t arg);
mp_obj_t mp_call_function_2_protected(mp_obj_t fun, mp_obj_t arg1, mp_obj_t arg2);

typedef struct _mp_call_args_t {
    mp_obj_t fun;
    size_t n_args, n_kw, n_alloc;
    mp_obj_t *args;
} mp_call_args_t;
# 131 "../Testing_module/JOYSTICK/../../../py/runtime.h"
void mp_unpack_sequence(mp_obj_t seq, size_t num, mp_obj_t *items);
void mp_unpack_ex(mp_obj_t seq, size_t num, mp_obj_t *items);
mp_obj_t mp_store_map(mp_obj_t map, mp_obj_t key, mp_obj_t value);
mp_obj_t mp_load_attr(mp_obj_t base, qstr attr);
void mp_convert_member_lookup(mp_obj_t obj, const mp_obj_type_t *type, mp_obj_t member, mp_obj_t *dest);
void mp_load_method(mp_obj_t base, qstr attr, mp_obj_t *dest);
void mp_load_method_maybe(mp_obj_t base, qstr attr, mp_obj_t *dest);
void mp_load_method_protected(mp_obj_t obj, qstr attr, mp_obj_t *dest, _Bool catch_all_exc);
void mp_load_super_method(qstr attr, mp_obj_t *dest);
void mp_store_attr(mp_obj_t base, qstr attr, mp_obj_t val);

mp_obj_t mp_getiter(mp_obj_t o, mp_obj_iter_buf_t *iter_buf);
mp_obj_t mp_iternext_allow_raise(mp_obj_t o);
mp_obj_t mp_iternext(mp_obj_t o);
mp_vm_return_kind_t mp_resume(mp_obj_t self_in, mp_obj_t send_value, mp_obj_t throw_value, mp_obj_t *ret_val);

mp_obj_t mp_make_raise_obj(mp_obj_t o);

mp_obj_t mp_import_name(qstr name, mp_obj_t fromlist, mp_obj_t level);
mp_obj_t mp_import_from(mp_obj_t module, qstr name);
void mp_import_all(mp_obj_t module);

__attribute__((noreturn)) void mp_raise_msg(const mp_obj_type_t *exc_type, const char *msg);
__attribute__((noreturn)) void mp_raise_ValueError(const char *msg);
__attribute__((noreturn)) void mp_raise_TypeError(const char *msg);
__attribute__((noreturn)) void mp_raise_NotImplementedError(const char *msg);
__attribute__((noreturn)) void mp_raise_OSError(int errno_);
__attribute__((noreturn)) void mp_raise_recursion_depth(void);
# 171 "../Testing_module/JOYSTICK/../../../py/runtime.h"
int mp_native_type_from_qstr(qstr qst);
mp_uint_t mp_native_from_obj(mp_obj_t obj, mp_uint_t type);
mp_obj_t mp_native_to_obj(mp_uint_t val, mp_uint_t type);
# 3 "../Testing_module/JOYSTICK/joystick.c" 2
# 1 "../Testing_module/JOYSTICK/../../../py/builtin.h" 1
# 31 "../Testing_module/JOYSTICK/../../../py/builtin.h"
mp_obj_t mp_builtin___import__(size_t n_args, const mp_obj_t *args);
mp_obj_t mp_vfs_open(size_t n_args, const mp_obj_t *args, mp_map_t *kwargs);
mp_obj_t mp_micropython_mem_info(size_t n_args, const mp_obj_t *args);

extern const mp_obj_fun_builtin_var_t mp_builtin___build_class___obj;
extern const mp_obj_fun_builtin_var_t mp_builtin___import___obj;
extern const mp_obj_fun_builtin_fixed_t mp_builtin___repl_print___obj;
extern const mp_obj_fun_builtin_fixed_t mp_builtin_abs_obj;
extern const mp_obj_fun_builtin_fixed_t mp_builtin_all_obj;
extern const mp_obj_fun_builtin_fixed_t mp_builtin_any_obj;
extern const mp_obj_fun_builtin_fixed_t mp_builtin_bin_obj;
extern const mp_obj_fun_builtin_fixed_t mp_builtin_callable_obj;
extern const mp_obj_fun_builtin_var_t mp_builtin_compile_obj;
extern const mp_obj_fun_builtin_fixed_t mp_builtin_chr_obj;
extern const mp_obj_fun_builtin_fixed_t mp_builtin_delattr_obj;
extern const mp_obj_fun_builtin_var_t mp_builtin_dir_obj;
extern const mp_obj_fun_builtin_fixed_t mp_builtin_divmod_obj;
extern const mp_obj_fun_builtin_var_t mp_builtin_eval_obj;
extern const mp_obj_fun_builtin_var_t mp_builtin_exec_obj;
extern const mp_obj_fun_builtin_var_t mp_builtin_execfile_obj;
extern const mp_obj_fun_builtin_var_t mp_builtin_getattr_obj;
extern const mp_obj_fun_builtin_fixed_t mp_builtin_setattr_obj;
extern const mp_obj_fun_builtin_fixed_t mp_builtin_globals_obj;
extern const mp_obj_fun_builtin_fixed_t mp_builtin_hasattr_obj;
extern const mp_obj_fun_builtin_fixed_t mp_builtin_hash_obj;
extern const mp_obj_fun_builtin_var_t mp_builtin_help_obj;
extern const mp_obj_fun_builtin_fixed_t mp_builtin_hex_obj;
extern const mp_obj_fun_builtin_fixed_t mp_builtin_id_obj;
extern const mp_obj_fun_builtin_fixed_t mp_builtin_isinstance_obj;
extern const mp_obj_fun_builtin_fixed_t mp_builtin_issubclass_obj;
extern const mp_obj_fun_builtin_fixed_t mp_builtin_iter_obj;
extern const mp_obj_fun_builtin_fixed_t mp_builtin_len_obj;
extern const mp_obj_fun_builtin_fixed_t mp_builtin_locals_obj;
extern const mp_obj_fun_builtin_var_t mp_builtin_max_obj;
extern const mp_obj_fun_builtin_var_t mp_builtin_min_obj;



extern const mp_obj_fun_builtin_fixed_t mp_builtin_next_obj;

extern const mp_obj_fun_builtin_fixed_t mp_builtin_oct_obj;
extern const mp_obj_fun_builtin_fixed_t mp_builtin_ord_obj;
extern const mp_obj_fun_builtin_var_t mp_builtin_pow_obj;
extern const mp_obj_fun_builtin_var_t mp_builtin_print_obj;
extern const mp_obj_fun_builtin_fixed_t mp_builtin_repr_obj;
extern const mp_obj_fun_builtin_var_t mp_builtin_round_obj;
extern const mp_obj_fun_builtin_var_t mp_builtin_sorted_obj;
extern const mp_obj_fun_builtin_var_t mp_builtin_sum_obj;

extern const mp_obj_fun_builtin_var_t mp_builtin_input_obj;
extern const mp_obj_fun_builtin_var_t mp_vfs_open_obj;

extern const mp_obj_fun_builtin_fixed_t mp_namedtuple_obj;

extern const mp_obj_fun_builtin_fixed_t mp_op_contains_obj;
extern const mp_obj_fun_builtin_fixed_t mp_op_getitem_obj;
extern const mp_obj_fun_builtin_fixed_t mp_op_setitem_obj;
extern const mp_obj_fun_builtin_fixed_t mp_op_delitem_obj;

extern const mp_obj_module_t mp_module___main__;
extern const mp_obj_module_t mp_module_builtins;
extern const mp_obj_module_t mp_module_uarray;
extern const mp_obj_module_t mp_module_collections;
extern const mp_obj_module_t mp_module_io;
extern const mp_obj_module_t mp_module_math;
extern const mp_obj_module_t mp_module_cmath;
extern const mp_obj_module_t mp_module_micropython;
extern const mp_obj_module_t mp_module_ustruct;
extern const mp_obj_module_t mp_module_sys;
extern const mp_obj_module_t mp_module_gc;
extern const mp_obj_module_t mp_module_thread;

extern const mp_obj_dict_t mp_module_builtins_globals;


extern const mp_obj_module_t mp_module_uerrno;
extern const mp_obj_module_t mp_module_uctypes;
extern const mp_obj_module_t mp_module_uzlib;
extern const mp_obj_module_t mp_module_ujson;
extern const mp_obj_module_t mp_module_ure;
extern const mp_obj_module_t mp_module_uheapq;
extern const mp_obj_module_t mp_module_uhashlib;
extern const mp_obj_module_t mp_module_ucryptolib;
extern const mp_obj_module_t mp_module_ubinascii;
extern const mp_obj_module_t mp_module_urandom;
extern const mp_obj_module_t mp_module_uselect;
extern const mp_obj_module_t mp_module_ussl;
extern const mp_obj_module_t mp_module_utimeq;
extern const mp_obj_module_t mp_module_machine;
extern const mp_obj_module_t mp_module_lwip;
extern const mp_obj_module_t mp_module_uwebsocket;
extern const mp_obj_module_t mp_module_webrepl;
extern const mp_obj_module_t mp_module_framebuf;
extern const mp_obj_module_t mp_module_btree;
extern const mp_obj_module_t mp_module_ubluetooth;

extern const char stm32_help_text[];
# 4 "../Testing_module/JOYSTICK/joystick.c" 2
# 1 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/driver/include/common.h" 1




# 1 "../../py/runtime.h" 1
# 6 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/driver/include/common.h" 2
# 1 "../../py/binary.h" 1
# 37 "../../py/binary.h"
size_t mp_binary_get_size(char struct_type, char val_type, size_t *palign);
mp_obj_t mp_binary_get_val_array(char typecode, void *p, size_t index);
void mp_binary_set_val_array(char typecode, void *p, size_t index, mp_obj_t val_in);
void mp_binary_set_val_array_from_int(char typecode, void *p, size_t index, mp_int_t val);
mp_obj_t mp_binary_get_val(char struct_type, char val_type, byte *p_base, byte **ptr);
void mp_binary_set_val(char struct_type, char val_type, mp_obj_t val_in, byte *p_base, byte **ptr);
long long mp_binary_get_int(size_t size, _Bool is_signed, _Bool big_endian, const byte *src);
void mp_binary_set_int(size_t val_sz, _Bool big_endian, byte *dest, mp_uint_t val);
# 7 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/driver/include/common.h" 2






typedef struct mp_ptr_t
{
    mp_obj_base_t base;
    void *ptr;
} mp_ptr_t;

static mp_int_t mp_ptr_get_buffer(mp_obj_t self_in, mp_buffer_info_t *bufinfo, mp_uint_t flags)
{
    mp_ptr_t *self = ((void*)self_in);

    if (flags & (2)) {

        return 1;
    }

    bufinfo->buf = &self->ptr;
    bufinfo->len = sizeof(self->ptr);
    bufinfo->typecode = 1;
    return 0;
}
# 5 "../Testing_module/JOYSTICK/joystick.c" 2
# 1 "../Testing_module/JOYSTICK/mainjoy.c" 1

# 1 "/usr/include/newlib/stdio.h" 1 3
# 36 "/usr/include/newlib/stdio.h" 3
# 1 "/usr/lib/gcc/arm-none-eabi/4.9.3/include/stddef.h" 1 3 4
# 37 "/usr/include/newlib/stdio.h" 2 3


# 1 "/usr/lib/gcc/arm-none-eabi/4.9.3/include/stdarg.h" 1 3 4
# 40 "/usr/lib/gcc/arm-none-eabi/4.9.3/include/stdarg.h" 3 4
typedef __builtin_va_list __gnuc_va_list;
# 40 "/usr/include/newlib/stdio.h" 2 3
# 48 "/usr/include/newlib/stdio.h" 3
# 1 "/usr/include/newlib/sys/types.h" 1 3
# 71 "/usr/include/newlib/sys/types.h" 3
# 1 "/usr/lib/gcc/arm-none-eabi/4.9.3/include/stddef.h" 1 3 4
# 72 "/usr/include/newlib/sys/types.h" 2 3
# 1 "/usr/include/newlib/machine/types.h" 1 3
# 19 "/usr/include/newlib/machine/types.h" 3
typedef long int __off_t;
typedef int __pid_t;

__extension__ typedef long long int __loff_t;





typedef long __suseconds_t;
# 73 "/usr/include/newlib/sys/types.h" 2 3
# 95 "/usr/include/newlib/sys/types.h" 3
typedef unsigned char u_char;



typedef unsigned short u_short;



typedef unsigned int u_int;



typedef unsigned long u_long;





typedef unsigned short ushort;
typedef unsigned int uint;
typedef unsigned long ulong;



typedef unsigned long clock_t;




typedef long time_t;




typedef long daddr_t;



typedef char * caddr_t;
# 142 "/usr/include/newlib/sys/types.h" 3
typedef unsigned short ino_t;
# 171 "/usr/include/newlib/sys/types.h" 3
typedef _off_t off_t;
typedef __dev_t dev_t;
typedef __uid_t uid_t;
typedef __gid_t gid_t;





typedef int pid_t;







typedef long key_t;

typedef _ssize_t ssize_t;
# 204 "/usr/include/newlib/sys/types.h" 3
typedef unsigned int mode_t __attribute__ ((__mode__ (__SI__)));




typedef unsigned short nlink_t;
# 231 "/usr/include/newlib/sys/types.h" 3
typedef long fd_mask;







typedef struct _types_fd_set {
 fd_mask fds_bits[(((64)+(((sizeof (fd_mask) * 8))-1))/((sizeof (fd_mask) * 8)))];
} _types_fd_set;
# 262 "/usr/include/newlib/sys/types.h" 3
typedef unsigned long clockid_t;




typedef unsigned long timer_t;



typedef unsigned long useconds_t;


typedef __suseconds_t suseconds_t;



typedef __int64_t sbintime_t;
# 49 "/usr/include/newlib/stdio.h" 2 3




typedef __FILE FILE;






typedef _fpos_t fpos_t;





# 1 "/usr/include/newlib/sys/stdio.h" 1 3
# 67 "/usr/include/newlib/stdio.h" 2 3
# 167 "/usr/include/newlib/stdio.h" 3
FILE * tmpfile (void);
char * tmpnam (char *);

char * tempnam (const char *, const char *);

int fclose (FILE *);
int fflush (FILE *);
FILE * freopen (const char *restrict, const char *restrict, FILE *restrict);
void setbuf (FILE *restrict, char *restrict);
int setvbuf (FILE *restrict, char *restrict, int, size_t);
int fprintf (FILE *restrict, const char *restrict, ...) __attribute__ ((__format__ (__printf__, 2, 3)))
                                                            ;
int fscanf (FILE *restrict, const char *restrict, ...) __attribute__ ((__format__ (__scanf__, 2, 3)))
                                                           ;
int printf (const char *restrict, ...) __attribute__ ((__format__ (__printf__, 1, 2)))
                                                            ;
int scanf (const char *restrict, ...) __attribute__ ((__format__ (__scanf__, 1, 2)))
                                                           ;
int sscanf (const char *restrict, const char *restrict, ...) __attribute__ ((__format__ (__scanf__, 2, 3)))
                                                           ;
int vfprintf (FILE *restrict, const char *restrict, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 2, 0)))
                                                            ;
int vprintf (const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 1, 0)))
                                                            ;
int vsprintf (char *restrict, const char *restrict, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 2, 0)))
                                                            ;
int fgetc (FILE *);
char * fgets (char *restrict, int, FILE *restrict);
int fputc (int, FILE *);
int fputs (const char *restrict, FILE *restrict);
int getc (FILE *);
int getchar (void);
char * gets (char *);
int putc (int, FILE *);
int putchar (int);
int puts (const char *);
int ungetc (int, FILE *);
size_t fread (void * restrict, size_t _size, size_t _n, FILE *restrict);
size_t fwrite (const void * restrict , size_t _size, size_t _n, FILE *);



int fgetpos (FILE *restrict, fpos_t *restrict);

int fseek (FILE *, long, int);



int fsetpos (FILE *, const fpos_t *);

long ftell ( FILE *);
void rewind (FILE *);
void clearerr (FILE *);
int feof (FILE *);
int ferror (FILE *);
void perror (const char *);

FILE * fopen (const char *restrict _name, const char *restrict _type);
int sprintf (char *restrict, const char *restrict, ...) __attribute__ ((__format__ (__printf__, 2, 3)))
                                                            ;
int remove (const char *);
int rename (const char *, const char *);
# 238 "/usr/include/newlib/stdio.h" 3
int fseeko (FILE *, off_t, int);
off_t ftello ( FILE *);







int asiprintf (char **, const char *, ...) __attribute__ ((__format__ (__printf__, 2, 3)))
                                                            ;
char * asniprintf (char *, size_t *, const char *, ...) __attribute__ ((__format__ (__printf__, 3, 4)))
                                                            ;
char * asnprintf (char *restrict, size_t *restrict, const char *restrict, ...) __attribute__ ((__format__ (__printf__, 3, 4)))
                                                            ;
int asprintf (char **restrict, const char *restrict, ...) __attribute__ ((__format__ (__printf__, 2, 3)))
                                                            ;

int diprintf (int, const char *, ...) __attribute__ ((__format__ (__printf__, 2, 3)))
                                                            ;

int fiprintf (FILE *, const char *, ...) __attribute__ ((__format__ (__printf__, 2, 3)))
                                                            ;
int fiscanf (FILE *, const char *, ...) __attribute__ ((__format__ (__scanf__, 2, 3)))
                                                           ;
int iprintf (const char *, ...) __attribute__ ((__format__ (__printf__, 1, 2)))
                                                            ;
int iscanf (const char *, ...) __attribute__ ((__format__ (__scanf__, 1, 2)))
                                                           ;
int siprintf (char *, const char *, ...) __attribute__ ((__format__ (__printf__, 2, 3)))
                                                            ;
int siscanf (const char *, const char *, ...) __attribute__ ((__format__ (__scanf__, 2, 3)))
                                                           ;
int snprintf (char *restrict, size_t, const char *restrict, ...) __attribute__ ((__format__ (__printf__, 3, 4)))
                                                            ;
int sniprintf (char *, size_t, const char *, ...) __attribute__ ((__format__ (__printf__, 3, 4)))
                                                            ;
int vasiprintf (char **, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 2, 0)))
                                                            ;
char * vasniprintf (char *, size_t *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 3, 0)))
                                                            ;
char * vasnprintf (char *, size_t *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 3, 0)))
                                                            ;
int vasprintf (char **, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 2, 0)))
                                                            ;
int vdiprintf (int, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 2, 0)))
                                                            ;
int vfiprintf (FILE *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 2, 0)))
                                                            ;
int vfiscanf (FILE *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__scanf__, 2, 0)))
                                                           ;
int vfscanf (FILE *restrict, const char *restrict, __gnuc_va_list) __attribute__ ((__format__ (__scanf__, 2, 0)))
                                                           ;
int viprintf (const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 1, 0)))
                                                            ;
int viscanf (const char *, __gnuc_va_list) __attribute__ ((__format__ (__scanf__, 1, 0)))
                                                           ;
int vscanf (const char *, __gnuc_va_list) __attribute__ ((__format__ (__scanf__, 1, 0)))
                                                           ;
int vsiprintf (char *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 2, 0)))
                                                            ;
int vsiscanf (const char *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__scanf__, 2, 0)))
                                                           ;
int vsniprintf (char *, size_t, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 3, 0)))
                                                            ;
int vsnprintf (char *restrict, size_t, const char *restrict, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 3, 0)))
                                                            ;
int vsscanf (const char *restrict, const char *restrict, __gnuc_va_list) __attribute__ ((__format__ (__scanf__, 2, 0)))
                                                           ;
# 316 "/usr/include/newlib/stdio.h" 3
FILE * fdopen (int, const char *);

int fileno (FILE *);
int getw (FILE *);
int pclose (FILE *);
FILE * popen (const char *, const char *);
int putw (int, FILE *);
void setbuffer (FILE *, char *, int);
int setlinebuf (FILE *);
int getc_unlocked (FILE *);
int getchar_unlocked (void);
void flockfile (FILE *);
int ftrylockfile (FILE *);
void funlockfile (FILE *);
int putc_unlocked (int, FILE *);
int putchar_unlocked (int);
# 341 "/usr/include/newlib/stdio.h" 3
int dprintf (int, const char *restrict, ...) __attribute__ ((__format__ (__printf__, 2, 3)))
                                                            ;

FILE * fmemopen (void *restrict, size_t, const char *restrict);


FILE * open_memstream (char **, size_t *);

int renameat (int, const char *, int, const char *);

int vdprintf (int, const char *restrict, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 2, 0)))
                                                            ;







int _asiprintf_r (struct _reent *, char **, const char *, ...) __attribute__ ((__format__ (__printf__, 3, 4)))
                                                            ;
char * _asniprintf_r (struct _reent *, char *, size_t *, const char *, ...) __attribute__ ((__format__ (__printf__, 4, 5)))
                                                            ;
char * _asnprintf_r (struct _reent *, char *restrict, size_t *restrict, const char *restrict, ...) __attribute__ ((__format__ (__printf__, 4, 5)))
                                                            ;
int _asprintf_r (struct _reent *, char **restrict, const char *restrict, ...) __attribute__ ((__format__ (__printf__, 3, 4)))
                                                            ;
int _diprintf_r (struct _reent *, int, const char *, ...) __attribute__ ((__format__ (__printf__, 3, 4)))
                                                            ;
int _dprintf_r (struct _reent *, int, const char *restrict, ...) __attribute__ ((__format__ (__printf__, 3, 4)))
                                                            ;
int _fclose_r (struct _reent *, FILE *);
int _fcloseall_r (struct _reent *);
FILE * _fdopen_r (struct _reent *, int, const char *);
int _fflush_r (struct _reent *, FILE *);
int _fgetc_r (struct _reent *, FILE *);
int _fgetc_unlocked_r (struct _reent *, FILE *);
char * _fgets_r (struct _reent *, char *restrict, int, FILE *restrict);
char * _fgets_unlocked_r (struct _reent *, char *restrict, int, FILE *restrict);




int _fgetpos_r (struct _reent *, FILE *, fpos_t *);
int _fsetpos_r (struct _reent *, FILE *, const fpos_t *);

int _fiprintf_r (struct _reent *, FILE *, const char *, ...) __attribute__ ((__format__ (__printf__, 3, 4)))
                                                            ;
int _fiscanf_r (struct _reent *, FILE *, const char *, ...) __attribute__ ((__format__ (__scanf__, 3, 4)))
                                                           ;
FILE * _fmemopen_r (struct _reent *, void *restrict, size_t, const char *restrict);
FILE * _fopen_r (struct _reent *, const char *restrict, const char *restrict);
FILE * _freopen_r (struct _reent *, const char *restrict, const char *restrict, FILE *restrict);
int _fprintf_r (struct _reent *, FILE *restrict, const char *restrict, ...) __attribute__ ((__format__ (__printf__, 3, 4)))
                                                            ;
int _fpurge_r (struct _reent *, FILE *);
int _fputc_r (struct _reent *, int, FILE *);
int _fputc_unlocked_r (struct _reent *, int, FILE *);
int _fputs_r (struct _reent *, const char *restrict, FILE *restrict);
int _fputs_unlocked_r (struct _reent *, const char *restrict, FILE *restrict);
size_t _fread_r (struct _reent *, void * restrict, size_t _size, size_t _n, FILE *restrict);
size_t _fread_unlocked_r (struct _reent *, void * restrict, size_t _size, size_t _n, FILE *restrict);
int _fscanf_r (struct _reent *, FILE *restrict, const char *restrict, ...) __attribute__ ((__format__ (__scanf__, 3, 4)))
                                                           ;
int _fseek_r (struct _reent *, FILE *, long, int);
int _fseeko_r (struct _reent *, FILE *, _off_t, int);
long _ftell_r (struct _reent *, FILE *);
_off_t _ftello_r (struct _reent *, FILE *);
void _rewind_r (struct _reent *, FILE *);
size_t _fwrite_r (struct _reent *, const void * restrict, size_t _size, size_t _n, FILE *restrict);
size_t _fwrite_unlocked_r (struct _reent *, const void * restrict, size_t _size, size_t _n, FILE *restrict);
int _getc_r (struct _reent *, FILE *);
int _getc_unlocked_r (struct _reent *, FILE *);
int _getchar_r (struct _reent *);
int _getchar_unlocked_r (struct _reent *);
char * _gets_r (struct _reent *, char *);
int _iprintf_r (struct _reent *, const char *, ...) __attribute__ ((__format__ (__printf__, 2, 3)))
                                                            ;
int _iscanf_r (struct _reent *, const char *, ...) __attribute__ ((__format__ (__scanf__, 2, 3)))
                                                           ;
FILE * _open_memstream_r (struct _reent *, char **, size_t *);
void _perror_r (struct _reent *, const char *);
int _printf_r (struct _reent *, const char *restrict, ...) __attribute__ ((__format__ (__printf__, 2, 3)))
                                                            ;
int _putc_r (struct _reent *, int, FILE *);
int _putc_unlocked_r (struct _reent *, int, FILE *);
int _putchar_unlocked_r (struct _reent *, int);
int _putchar_r (struct _reent *, int);
int _puts_r (struct _reent *, const char *);
int _remove_r (struct _reent *, const char *);
int _rename_r (struct _reent *, const char *_old, const char *_new)
                                          ;
int _scanf_r (struct _reent *, const char *restrict, ...) __attribute__ ((__format__ (__scanf__, 2, 3)))
                                                           ;
int _siprintf_r (struct _reent *, char *, const char *, ...) __attribute__ ((__format__ (__printf__, 3, 4)))
                                                            ;
int _siscanf_r (struct _reent *, const char *, const char *, ...) __attribute__ ((__format__ (__scanf__, 3, 4)))
                                                           ;
int _sniprintf_r (struct _reent *, char *, size_t, const char *, ...) __attribute__ ((__format__ (__printf__, 4, 5)))
                                                            ;
int _snprintf_r (struct _reent *, char *restrict, size_t, const char *restrict, ...) __attribute__ ((__format__ (__printf__, 4, 5)))
                                                            ;
int _sprintf_r (struct _reent *, char *restrict, const char *restrict, ...) __attribute__ ((__format__ (__printf__, 3, 4)))
                                                            ;
int _sscanf_r (struct _reent *, const char *restrict, const char *restrict, ...) __attribute__ ((__format__ (__scanf__, 3, 4)))
                                                           ;
char * _tempnam_r (struct _reent *, const char *, const char *);
FILE * _tmpfile_r (struct _reent *);
char * _tmpnam_r (struct _reent *, char *);
int _ungetc_r (struct _reent *, int, FILE *);
int _vasiprintf_r (struct _reent *, char **, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 3, 0)))
                                                            ;
char * _vasniprintf_r (struct _reent*, char *, size_t *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 4, 0)))
                                                            ;
char * _vasnprintf_r (struct _reent*, char *, size_t *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 4, 0)))
                                                            ;
int _vasprintf_r (struct _reent *, char **, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 3, 0)))
                                                            ;
int _vdiprintf_r (struct _reent *, int, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 3, 0)))
                                                            ;
int _vdprintf_r (struct _reent *, int, const char *restrict, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 3, 0)))
                                                            ;
int _vfiprintf_r (struct _reent *, FILE *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 3, 0)))
                                                            ;
int _vfiscanf_r (struct _reent *, FILE *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__scanf__, 3, 0)))
                                                           ;
int _vfprintf_r (struct _reent *, FILE *restrict, const char *restrict, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 3, 0)))
                                                            ;
int _vfscanf_r (struct _reent *, FILE *restrict, const char *restrict, __gnuc_va_list) __attribute__ ((__format__ (__scanf__, 3, 0)))
                                                           ;
int _viprintf_r (struct _reent *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 2, 0)))
                                                            ;
int _viscanf_r (struct _reent *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__scanf__, 2, 0)))
                                                           ;
int _vprintf_r (struct _reent *, const char *restrict, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 2, 0)))
                                                            ;
int _vscanf_r (struct _reent *, const char *restrict, __gnuc_va_list) __attribute__ ((__format__ (__scanf__, 2, 0)))
                                                           ;
int _vsiprintf_r (struct _reent *, char *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 3, 0)))
                                                            ;
int _vsiscanf_r (struct _reent *, const char *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__scanf__, 3, 0)))
                                                           ;
int _vsniprintf_r (struct _reent *, char *, size_t, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 4, 0)))
                                                            ;
int _vsnprintf_r (struct _reent *, char *restrict, size_t, const char *restrict, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 4, 0)))
                                                            ;
int _vsprintf_r (struct _reent *, char *restrict, const char *restrict, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 3, 0)))
                                                            ;
int _vsscanf_r (struct _reent *, const char *restrict, const char *restrict, __gnuc_va_list) __attribute__ ((__format__ (__scanf__, 3, 0)))
                                                           ;



int fpurge (FILE *);
ssize_t __getdelim (char **, size_t *, int, FILE *);
ssize_t __getline (char **, size_t *, FILE *);


void clearerr_unlocked (FILE *);
int feof_unlocked (FILE *);
int ferror_unlocked (FILE *);
int fileno_unlocked (FILE *);
int fflush_unlocked (FILE *);
int fgetc_unlocked (FILE *);
int fputc_unlocked (int, FILE *);
size_t fread_unlocked (void * restrict, size_t _size, size_t _n, FILE *restrict);
size_t fwrite_unlocked (const void * restrict , size_t _size, size_t _n, FILE *);
# 541 "/usr/include/newlib/stdio.h" 3
int __srget_r (struct _reent *, FILE *);
int __swbuf_r (struct _reent *, int, FILE *);
# 565 "/usr/include/newlib/stdio.h" 3
FILE *funopen (const void * __cookie, int (*__readfn)(void * __cookie, char *__buf, int __n), int (*__writefn)(void * __cookie, const char *__buf, int __n), fpos_t (*__seekfn)(void * __cookie, fpos_t __off, int __whence), int (*__closefn)(void * __cookie))





                                   ;
FILE *_funopen_r (struct _reent *, const void * __cookie, int (*__readfn)(void * __cookie, char *__buf, int __n), int (*__writefn)(void * __cookie, const char *__buf, int __n), fpos_t (*__seekfn)(void * __cookie, fpos_t __off, int __whence), int (*__closefn)(void * __cookie))





                                   ;







typedef ssize_t cookie_read_function_t(void *__cookie, char *__buf, size_t __n);
typedef ssize_t cookie_write_function_t(void *__cookie, const char *__buf,
     size_t __n);




typedef int cookie_seek_function_t(void *__cookie, off_t *__off, int __whence);

typedef int cookie_close_function_t(void *__cookie);
typedef struct
{


  cookie_read_function_t *read;
  cookie_write_function_t *write;
  cookie_seek_function_t *seek;
  cookie_close_function_t *close;
} cookie_io_functions_t;
FILE *fopencookie (void *__cookie, const char *__mode, cookie_io_functions_t __functions)
                                                         ;
FILE *_fopencookie_r (struct _reent *, void *__cookie, const char *__mode, cookie_io_functions_t __functions)
                                                         ;
# 728 "/usr/include/newlib/stdio.h" 3

# 3 "../Testing_module/JOYSTICK/mainjoy.c" 2

# 1 "../../lib/stm32lib/BSP/Discovery/INC/stm32l4r9i_discovery.h" 1
# 60 "../../lib/stm32lib/BSP/Discovery/INC/stm32l4r9i_discovery.h"
typedef enum
{
  LED1 = 0,
  LED2 = 1,
  LED_ORANGE = LED1,
  LED_GREEN = LED2
}Led_TypeDef;





typedef enum
{
  JOY_SEL = 0,
  JOY_LEFT = 1,
  JOY_RIGHT = 2,
  JOY_DOWN = 3,
  JOY_UP = 4,
  JOY_NONE = 5
}JOYState_TypeDef;

typedef enum
{
  JOY_MODE_GPIO = 0,
  JOY_MODE_EXTI = 1
}JOYMode_TypeDef;




typedef enum
{
  COM1 = 0
}COM_TypeDef;
# 332 "../../lib/stm32lib/BSP/Discovery/INC/stm32l4r9i_discovery.h"
uint32_t BSP_GetVersion(void);
void BSP_LED_Init(Led_TypeDef Led);
void BSP_LED_DeInit(Led_TypeDef Led);
void BSP_LED_On(Led_TypeDef Led);
void BSP_LED_Off(Led_TypeDef Led);
void BSP_LED_Toggle(Led_TypeDef Led);
uint8_t BSP_JOY_Init(JOYMode_TypeDef Joy_Mode);
void BSP_JOY_DeInit(void);
JOYState_TypeDef BSP_JOY_GetState(void);

void BSP_COM_Init(COM_TypeDef COM, UART_HandleTypeDef *husart);
void BSP_COM_DeInit(COM_TypeDef COM, UART_HandleTypeDef *huart);



void BSP_ErrorHandler(void);
# 5 "../Testing_module/JOYSTICK/mainjoy.c" 2
# 1 "../../lib/stm32lib/BSP/Discovery/INC/stm32l4r9i_discovery_io.h" 1
# 30 "../../lib/stm32lib/BSP/Discovery/INC/stm32l4r9i_discovery_io.h"
# 1 "../../lib/stm32lib/BSP/Discovery/INC/stm32l4r9i_discovery.h" 1
# 31 "../../lib/stm32lib/BSP/Discovery/INC/stm32l4r9i_discovery_io.h" 2
# 1 "../../lib/stm32lib/BSP/Discovery/INC/../../COMPONENT/INC/mfxstm32l152.h" 1
# 30 "../../lib/stm32lib/BSP/Discovery/INC/../../COMPONENT/INC/mfxstm32l152.h"
# 1 "../../lib/stm32lib/BSP/COMMON/ts.h" 1
# 50 "../../lib/stm32lib/BSP/COMMON/ts.h"
typedef struct
{
  void (*Init)(uint16_t);
  uint16_t (*ReadID)(uint16_t);
  void (*Reset)(uint16_t);
  void (*Start)(uint16_t);
  uint8_t (*DetectTouch)(uint16_t);
  void (*GetXY)(uint16_t, uint16_t*, uint16_t*);
  void (*EnableIT)(uint16_t);
  void (*ClearIT)(uint16_t);
  uint8_t (*GetITStatus)(uint16_t);
  void (*DisableIT)(uint16_t);
}TS_DrvTypeDef;
# 31 "../../lib/stm32lib/BSP/Discovery/INC/../../COMPONENT/INC/mfxstm32l152.h" 2
# 1 "../../lib/stm32lib/BSP/COMMON/io.h" 1
# 50 "../../lib/stm32lib/BSP/COMMON/io.h"
typedef enum
{
  IO_PIN_RESET = 0,
  IO_PIN_SET
}IO_PinState;

typedef enum
{
   IO_MODE_INPUT = 0,
   IO_MODE_OUTPUT,
   IO_MODE_IT_RISING_EDGE,
   IO_MODE_IT_FALLING_EDGE,
   IO_MODE_IT_LOW_LEVEL,
   IO_MODE_IT_HIGH_LEVEL,

   IO_MODE_ANALOG,
   IO_MODE_OFF,
   IO_MODE_INPUT_PU,
   IO_MODE_INPUT_PD,
   IO_MODE_OUTPUT_OD,
   IO_MODE_OUTPUT_OD_PU,
   IO_MODE_OUTPUT_OD_PD,
   IO_MODE_OUTPUT_PP,
   IO_MODE_OUTPUT_PP_PU,
   IO_MODE_OUTPUT_PP_PD,
   IO_MODE_IT_RISING_EDGE_PU,
   IO_MODE_IT_RISING_EDGE_PD,
   IO_MODE_IT_FALLING_EDGE_PU,
   IO_MODE_IT_FALLING_EDGE_PD,
   IO_MODE_IT_LOW_LEVEL_PU,
   IO_MODE_IT_LOW_LEVEL_PD,
   IO_MODE_IT_HIGH_LEVEL_PU,
   IO_MODE_IT_HIGH_LEVEL_PD,

}IO_ModeTypedef;




typedef struct
{
  void (*Init)(uint16_t);
  uint16_t (*ReadID)(uint16_t);
  void (*Reset)(uint16_t);

  void (*Start)(uint16_t, uint32_t);
  uint8_t (*Config)(uint16_t, uint32_t, IO_ModeTypedef);
  void (*WritePin)(uint16_t, uint32_t, uint8_t);
  uint32_t (*ReadPin)(uint16_t, uint32_t);

  void (*EnableIT)(uint16_t);
  void (*DisableIT)(uint16_t);
  uint32_t (*ITStatus)(uint16_t, uint32_t);
  void (*ClearIT)(uint16_t, uint32_t);

}IO_DrvTypeDef;
# 32 "../../lib/stm32lib/BSP/Discovery/INC/../../COMPONENT/INC/mfxstm32l152.h" 2
# 1 "../../lib/stm32lib/BSP/COMMON/idd.h" 1
# 50 "../../lib/stm32lib/BSP/COMMON/idd.h"
typedef struct
{
  uint16_t AmpliGain;

  uint16_t VddMin;

  uint16_t Shunt0Value;

  uint16_t Shunt1Value;

  uint16_t Shunt2Value;

  uint16_t Shunt3Value;

  uint16_t Shunt4Value;

  uint16_t Shunt0StabDelay;

  uint16_t Shunt1StabDelay;

  uint16_t Shunt2StabDelay;

  uint16_t Shunt3StabDelay;

  uint16_t Shunt4StabDelay;

  uint8_t ShuntNbOnBoard;

  uint8_t ShuntNbUsed;

  uint8_t VrefMeasurement;

  uint8_t Calibration;

  uint8_t PreDelayUnit;

  uint8_t PreDelayValue;

  uint8_t MeasureNb;

  uint8_t DeltaDelayUnit;

  uint8_t DeltaDelayValue;

}IDD_ConfigTypeDef;







typedef struct
{
  void (*Init)(uint16_t);
  void (*DeInit)(uint16_t);
  uint16_t (*ReadID)(uint16_t);
  void (*Reset)(uint16_t);
  void (*LowPower)(uint16_t);
  void (*WakeUp)(uint16_t);
  void (*Start)(uint16_t);
  void (*Config)(uint16_t,IDD_ConfigTypeDef);
  void (*GetValue)(uint16_t, uint32_t *);
  void (*EnableIT)(uint16_t);
  void (*ClearIT)(uint16_t);
  uint8_t (*GetITStatus)(uint16_t);
  void (*DisableIT)(uint16_t);
  void (*ErrorEnableIT)(uint16_t);
  void (*ErrorClearIT)(uint16_t);
  uint8_t (*ErrorGetITStatus)(uint16_t);
  void (*ErrorDisableIT)(uint16_t);
  uint8_t (*ErrorGetSrc)(uint16_t);
  uint8_t (*ErrorGetCode)(uint16_t);
}IDD_DrvTypeDef;
# 33 "../../lib/stm32lib/BSP/Discovery/INC/../../COMPONENT/INC/mfxstm32l152.h" 2
# 51 "../../lib/stm32lib/BSP/Discovery/INC/../../COMPONENT/INC/mfxstm32l152.h"
typedef struct
{
  uint8_t SYS_CTRL;
  uint8_t ERROR_SRC;
  uint8_t ERROR_MSG;
  uint8_t IRQ_OUT;
  uint8_t IRQ_SRC_EN;
  uint8_t IRQ_PENDING;
  uint8_t IDD_CTRL;
  uint8_t IDD_PRE_DELAY;
  uint8_t IDD_SHUNT0_MSB;
  uint8_t IDD_SHUNT0_LSB;
  uint8_t IDD_SHUNT1_MSB;
  uint8_t IDD_SHUNT1_LSB;
  uint8_t IDD_SHUNT2_MSB;
  uint8_t IDD_SHUNT2_LSB;
  uint8_t IDD_SHUNT3_MSB;
  uint8_t IDD_SHUNT3_LSB;
  uint8_t IDD_SHUNT4_MSB;
  uint8_t IDD_SHUNT4_LSB;
  uint8_t IDD_GAIN_MSB;
  uint8_t IDD_GAIN_LSB;
  uint8_t IDD_VDD_MIN_MSB;
  uint8_t IDD_VDD_MIN_LSB;
  uint8_t IDD_VALUE_MSB;
  uint8_t IDD_VALUE_MID;
  uint8_t IDD_VALUE_LSB;
  uint8_t IDD_CAL_OFFSET_MSB;
  uint8_t IDD_CAL_OFFSET_LSB;
  uint8_t IDD_SHUNT_USED;
}IDD_dbgTypeDef;
# 526 "../../lib/stm32lib/BSP/Discovery/INC/../../COMPONENT/INC/mfxstm32l152.h"
void mfxstm32l152_Init(uint16_t DeviceAddr);
void mfxstm32l152_DeInit(uint16_t DeviceAddr);
void mfxstm32l152_Reset(uint16_t DeviceAddr);
uint16_t mfxstm32l152_ReadID(uint16_t DeviceAddr);
uint16_t mfxstm32l152_ReadFwVersion(uint16_t DeviceAddr);
void mfxstm32l152_LowPower(uint16_t DeviceAddr);
void mfxstm32l152_WakeUp(uint16_t DeviceAddr);

void mfxstm32l152_EnableITSource(uint16_t DeviceAddr, uint8_t Source);
void mfxstm32l152_DisableITSource(uint16_t DeviceAddr, uint8_t Source);
uint8_t mfxstm32l152_GlobalITStatus(uint16_t DeviceAddr, uint8_t Source);
void mfxstm32l152_ClearGlobalIT(uint16_t DeviceAddr, uint8_t Source);

void mfxstm32l152_SetIrqOutPinPolarity(uint16_t DeviceAddr, uint8_t Polarity);
void mfxstm32l152_SetIrqOutPinType(uint16_t DeviceAddr, uint8_t Type);





void mfxstm32l152_IO_Start(uint16_t DeviceAddr, uint32_t IO_Pin);
uint8_t mfxstm32l152_IO_Config(uint16_t DeviceAddr, uint32_t IO_Pin, IO_ModeTypedef IO_Mode);
void mfxstm32l152_IO_WritePin(uint16_t DeviceAddr, uint32_t IO_Pin, uint8_t PinState);
uint32_t mfxstm32l152_IO_ReadPin(uint16_t DeviceAddr, uint32_t IO_Pin);
void mfxstm32l152_IO_EnableIT(uint16_t DeviceAddr);
void mfxstm32l152_IO_DisableIT(uint16_t DeviceAddr);
uint32_t mfxstm32l152_IO_ITStatus(uint16_t DeviceAddr, uint32_t IO_Pin);
void mfxstm32l152_IO_ClearIT(uint16_t DeviceAddr, uint32_t IO_Pin);

void mfxstm32l152_IO_InitPin(uint16_t DeviceAddr, uint32_t IO_Pin, uint8_t Direction);
void mfxstm32l152_IO_EnableAF(uint16_t DeviceAddr);
void mfxstm32l152_IO_DisableAF(uint16_t DeviceAddr);
void mfxstm32l152_IO_SetIrqTypeMode(uint16_t DeviceAddr, uint32_t IO_Pin, uint8_t Type);
void mfxstm32l152_IO_SetIrqEvtMode(uint16_t DeviceAddr, uint32_t IO_Pin, uint8_t Evt);
void mfxstm32l152_IO_EnablePinIT(uint16_t DeviceAddr, uint32_t IO_Pin);
void mfxstm32l152_IO_DisablePinIT(uint16_t DeviceAddr, uint32_t IO_Pin);




void mfxstm32l152_TS_Start(uint16_t DeviceAddr);
uint8_t mfxstm32l152_TS_DetectTouch(uint16_t DeviceAddr);
void mfxstm32l152_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y);
void mfxstm32l152_TS_EnableIT(uint16_t DeviceAddr);
void mfxstm32l152_TS_DisableIT(uint16_t DeviceAddr);
uint8_t mfxstm32l152_TS_ITStatus (uint16_t DeviceAddr);
void mfxstm32l152_TS_ClearIT (uint16_t DeviceAddr);




void mfxstm32l152_IDD_Start(uint16_t DeviceAddr);
void mfxstm32l152_IDD_Config(uint16_t DeviceAddr, IDD_ConfigTypeDef MfxIddConfig);
void mfxstm32l152_IDD_ConfigShuntNbLimit(uint16_t DeviceAddr, uint8_t ShuntNbLimit);
void mfxstm32l152_IDD_GetValue(uint16_t DeviceAddr, uint32_t *ReadValue);
uint8_t mfxstm32l152_IDD_GetShuntUsed(uint16_t DeviceAddr);
void mfxstm32l152_IDD_EnableIT(uint16_t DeviceAddr);
void mfxstm32l152_IDD_ClearIT(uint16_t DeviceAddr);
uint8_t mfxstm32l152_IDD_GetITStatus(uint16_t DeviceAddr);
void mfxstm32l152_IDD_DisableIT(uint16_t DeviceAddr);




uint8_t mfxstm32l152_Error_ReadSrc(uint16_t DeviceAddr);
uint8_t mfxstm32l152_Error_ReadMsg(uint16_t DeviceAddr);
void mfxstm32l152_Error_EnableIT(uint16_t DeviceAddr);
void mfxstm32l152_Error_ClearIT(uint16_t DeviceAddr);
uint8_t mfxstm32l152_Error_GetITStatus(uint16_t DeviceAddr);
void mfxstm32l152_Error_DisableIT(uint16_t DeviceAddr);

uint8_t mfxstm32l152_ReadReg(uint16_t DeviceAddr, uint8_t RegAddr);
void mfxstm32l152_WriteReg(uint16_t DeviceAddr, uint8_t RegAddr, uint8_t Value);






void MFX_IO_Init(void);
void MFX_IO_DeInit(void);
void MFX_IO_ITConfig (void);
void MFX_IO_EnableWakeupPin(void);
void MFX_IO_Wakeup(void);
void MFX_IO_Delay(uint32_t delay);
void MFX_IO_Write(uint16_t addr, uint8_t reg, uint8_t value);
uint8_t MFX_IO_Read(uint16_t addr, uint8_t reg);
uint16_t MFX_IO_ReadMultiple(uint16_t addr, uint8_t reg, uint8_t *buffer, uint16_t length);






extern TS_DrvTypeDef mfxstm32l152_ts_drv;


extern IO_DrvTypeDef mfxstm32l152_io_drv;


extern IDD_DrvTypeDef mfxstm32l152_idd_drv;
# 32 "../../lib/stm32lib/BSP/Discovery/INC/stm32l4r9i_discovery_io.h" 2
# 50 "../../lib/stm32lib/BSP/Discovery/INC/stm32l4r9i_discovery_io.h"
typedef enum
{
  IO_OK = 0x00,
  IO_ERROR = 0x01,
  IO_TIMEOUT = 0x02
}IO_StatusTypeDef;
# 93 "../../lib/stm32lib/BSP/Discovery/INC/stm32l4r9i_discovery_io.h"
uint8_t BSP_IO_Init(void);
uint8_t BSP_IO_DeInit(void);
uint32_t BSP_IO_ITGetStatus(uint32_t IO_Pin);
void BSP_IO_ITClear(uint32_t IO_Pin);
uint8_t BSP_IO_ConfigPin(uint32_t IO_Pin, IO_ModeTypedef IO_Mode);
void BSP_IO_WritePin(uint32_t IO_Pin, uint8_t PinState);
uint32_t BSP_IO_ReadPin(uint32_t IO_Pin);
void BSP_IO_TogglePin(uint32_t IO_Pin);
# 6 "../Testing_module/JOYSTICK/mainjoy.c" 2
# 1 "../Testing_module/JOYSTICK/../DISPLAY/log.h" 1
# 39 "../Testing_module/JOYSTICK/../DISPLAY/log.h"
void log_init(void);
# 7 "../Testing_module/JOYSTICK/mainjoy.c" 2
# 1 "../Testing_module/JOYSTICK/mainjoy.h" 1




void Mfx_Event(void);
# 8 "../Testing_module/JOYSTICK/mainjoy.c" 2
# 1 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/lvgl.h" 1
# 17 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/lvgl.h"
# 1 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_version.h" 1
# 18 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/lvgl.h" 2

# 1 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_misc/lv_log.h" 1
# 20 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/lvgl.h" 2
# 1 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_misc/lv_task.h" 1
# 20 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_misc/lv_task.h"
# 1 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_misc/../../../lv_conf.h" 1
# 21 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_misc/lv_task.h" 2




# 1 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_misc/lv_mem.h" 1
# 26 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_misc/lv_task.h" 2
# 1 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_misc/lv_ll.h" 1
# 27 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_misc/lv_task.h" 2
# 38 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_misc/lv_task.h"
struct _lv_task_t;




typedef void (*lv_task_cb_t)(struct _lv_task_t *);




enum {
    LV_TASK_PRIO_OFF = 0,
    LV_TASK_PRIO_LOWEST,
    LV_TASK_PRIO_LOW,
    LV_TASK_PRIO_MID,
    LV_TASK_PRIO_HIGH,
    LV_TASK_PRIO_HIGHEST,
    _LV_TASK_PRIO_NUM,
};
typedef uint8_t lv_task_prio_t;




typedef struct _lv_task_t
{
    uint32_t period;
    uint32_t last_run;
    lv_task_cb_t task_cb;

    void * user_data;

    uint8_t prio : 3;
    uint8_t once : 1;
} lv_task_t;
# 81 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_misc/lv_task.h"
void lv_task_core_init(void);






 void lv_task_handler(void);
# 97 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_misc/lv_task.h"
lv_task_t * lv_task_create_basic(void);
# 109 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_misc/lv_task.h"
lv_task_t * lv_task_create(lv_task_cb_t task_xcb, uint32_t period, lv_task_prio_t prio, void * user_data);





void lv_task_del(lv_task_t * task);






void lv_task_set_cb(lv_task_t * task, lv_task_cb_t task_cb);






void lv_task_set_prio(lv_task_t * task, lv_task_prio_t prio);






void lv_task_set_period(lv_task_t * task, uint32_t period);





void lv_task_ready(lv_task_t * task);





void lv_task_once(lv_task_t * task);






void lv_task_reset(lv_task_t * task);





void lv_task_enable(_Bool en);





uint8_t lv_task_get_idle(void);
# 21 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/lvgl.h" 2
# 1 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_misc/lv_math.h" 1
# 44 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_misc/lv_math.h"
int16_t lv_trigo_sin(int16_t angle);
# 55 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_misc/lv_math.h"
int32_t lv_bezier3(uint32_t t, int32_t u0, int32_t u1, int32_t u2, int32_t u3);







uint16_t lv_atan2(int x, int y);






uint32_t lv_sqrt(uint32_t num);
# 22 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/lvgl.h" 2
# 1 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_misc/lv_async.h" 1
# 17 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_misc/lv_async.h"
# 1 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_misc/lv_task.h" 1
# 18 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_misc/lv_async.h" 2
# 1 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_misc/lv_types.h" 1
# 19 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_misc/lv_async.h" 2
# 31 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_misc/lv_async.h"
typedef void (*lv_async_cb_t)(void *);

typedef struct _lv_async_info_t {
    lv_async_cb_t cb;
    void *user_data;
} lv_async_info_t;

struct _lv_obj_t;
# 52 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_misc/lv_async.h"
lv_res_t lv_async_call(lv_async_cb_t async_xcb, void * user_data);
# 23 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/lvgl.h" 2

# 1 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_hal/lv_hal.h" 1
# 16 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_hal/lv_hal.h"
# 1 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_hal/lv_hal_disp.h" 1
# 20 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_hal/lv_hal_disp.h"
# 1 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_hal/lv_hal.h" 1
# 21 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_hal/lv_hal_disp.h" 2
# 1 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_hal/../lv_misc/lv_color.h" 1
# 22 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_hal/lv_hal_disp.h" 2
# 1 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_hal/../lv_misc/lv_area.h" 1
# 23 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_hal/lv_hal_disp.h" 2
# 1 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_hal/../lv_misc/lv_ll.h" 1
# 24 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_hal/lv_hal_disp.h" 2
# 1 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_hal/../lv_misc/lv_task.h" 1
# 25 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_hal/lv_hal_disp.h" 2
# 41 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_hal/lv_hal_disp.h"
struct _disp_t;
struct _disp_drv_t;




typedef struct
{
    void * buf1;
    void * buf2;


    void * buf_act;
    uint32_t size;
    lv_area_t area;
    volatile uint32_t flushing : 1;
} lv_disp_buf_t;




typedef struct _disp_drv_t
{

    lv_coord_t hor_res;
    lv_coord_t ver_res;



    lv_disp_buf_t * buffer;


    uint32_t antialiasing : 1;

    uint32_t rotated : 1;
# 85 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_hal/lv_hal_disp.h"
    void (*flush_cb)(struct _disp_drv_t * disp_drv, const lv_area_t * area, lv_color_t * color_p);



    void (*rounder_cb)(struct _disp_drv_t * disp_drv, lv_area_t * area);




    void (*set_px_cb)(struct _disp_drv_t * disp_drv, uint8_t * buf, lv_coord_t buf_w, lv_coord_t x, lv_coord_t y,
                      lv_color_t color, lv_opa_t opa);



    void (*monitor_cb)(struct _disp_drv_t * disp_drv, uint32_t time, uint32_t px);



    void (*gpu_blend_cb)(struct _disp_drv_t * disp_drv, lv_color_t * dest, const lv_color_t * src, uint32_t length,
                         lv_opa_t opa);


    void (*gpu_fill_cb)(struct _disp_drv_t * disp_drv, lv_color_t * dest_buf, lv_coord_t dest_width,
                        const lv_area_t * fill_area, lv_color_t color);




    lv_color_t color_chroma_key;


    lv_disp_drv_user_data_t user_data;


} lv_disp_drv_t;

struct _lv_obj_t;





typedef struct _disp_t
{

    lv_disp_drv_t driver;


    lv_task_t * refr_task;


    lv_ll_t scr_ll;
    struct _lv_obj_t * act_scr;
    struct _lv_obj_t * top_layer;
    struct _lv_obj_t * sys_layer;


    lv_area_t inv_areas[32];
    uint8_t inv_area_joined[32];
    uint32_t inv_p : 10;


    uint32_t last_activity_time;
} lv_disp_t;
# 160 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_hal/lv_hal_disp.h"
void lv_disp_drv_init(lv_disp_drv_t * driver);
# 177 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_hal/lv_hal_disp.h"
void lv_disp_buf_init(lv_disp_buf_t * disp_buf, void * buf1, void * buf2, uint32_t size_in_px_cnt);







lv_disp_t * lv_disp_drv_register(lv_disp_drv_t * driver);






void lv_disp_drv_update(lv_disp_t * disp, lv_disp_drv_t * new_drv);





void lv_disp_remove(lv_disp_t * disp);





void lv_disp_set_default(lv_disp_t * disp);





lv_disp_t * lv_disp_get_default(void);






lv_coord_t lv_disp_get_hor_res(lv_disp_t * disp);






lv_coord_t lv_disp_get_ver_res(lv_disp_t * disp);






_Bool lv_disp_get_antialiasing(lv_disp_t * disp);







 void lv_disp_flush_ready(lv_disp_drv_t * disp_drv);
# 248 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_hal/lv_hal_disp.h"
lv_disp_t * lv_disp_get_next(lv_disp_t * disp);






lv_disp_buf_t * lv_disp_get_buf(lv_disp_t * disp);





uint16_t lv_disp_get_inv_buf_size(lv_disp_t * disp);





void lv_disp_pop_from_inv_buf(lv_disp_t * disp, uint16_t num);






_Bool lv_disp_is_double_buf(lv_disp_t * disp);







_Bool lv_disp_is_true_double_buf(lv_disp_t * disp);
# 17 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_hal/lv_hal.h" 2
# 1 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_hal/lv_hal_indev.h" 1
# 21 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_hal/lv_hal_indev.h"
# 1 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_hal/../../../lv_conf.h" 1
# 22 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_hal/lv_hal_indev.h" 2
# 37 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_hal/lv_hal_indev.h"
struct _lv_obj_t;
struct _disp_t;
struct _lv_indev_t;
struct _lv_indev_drv_t;


enum {
    LV_INDEV_TYPE_NONE,
    LV_INDEV_TYPE_POINTER,
    LV_INDEV_TYPE_KEYPAD,
    LV_INDEV_TYPE_BUTTON,

    LV_INDEV_TYPE_ENCODER,
};
typedef uint8_t lv_indev_type_t;


enum { LV_INDEV_STATE_REL = 0, LV_INDEV_STATE_PR };
typedef uint8_t lv_indev_state_t;


typedef struct
{
    lv_point_t point;
    uint32_t key;
    uint32_t btn_id;
    int16_t enc_diff;

    lv_indev_state_t state;
} lv_indev_data_t;


typedef struct _lv_indev_drv_t
{


    lv_indev_type_t type;




    _Bool (*read_cb)(struct _lv_indev_drv_t * indev_drv, lv_indev_data_t * data);



    void (*feedback_cb)(struct _lv_indev_drv_t *, uint8_t);


    lv_indev_drv_user_data_t user_data;



    struct _disp_t * disp;


    lv_task_t * read_task;


    uint8_t drag_limit;


    uint8_t drag_throw;


    uint16_t long_press_time;


    uint16_t long_press_rep_time;
} lv_indev_drv_t;




typedef struct _lv_indev_proc_t
{
    lv_indev_state_t state;
    union
    {
        struct
        {
            lv_point_t act_point;
            lv_point_t last_point;
            lv_point_t vect;
            lv_point_t drag_sum;
            lv_point_t drag_throw_vect;
            struct _lv_obj_t * act_obj;
            struct _lv_obj_t * last_obj;

            struct _lv_obj_t * last_pressed;


            uint8_t drag_limit_out : 1;
            uint8_t drag_in_prog : 1;
        } pointer;
        struct
        {
            lv_indev_state_t last_state;
            uint32_t last_key;
        } keypad;
    } types;

    uint32_t pr_timestamp;
    uint32_t longpr_rep_timestamp;


    uint8_t long_pr_sent : 1;
    uint8_t reset_query : 1;
    uint8_t disabled : 1;
    uint8_t wait_until_release : 1;
} lv_indev_proc_t;

struct _lv_obj_t;
struct _lv_group_t;



typedef struct _lv_indev_t
{
    lv_indev_drv_t driver;
    lv_indev_proc_t proc;
    struct _lv_obj_t * cursor;
    struct _lv_group_t * group;
    const lv_point_t * btn_points;

} lv_indev_t;
# 173 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_hal/lv_hal_indev.h"
void lv_indev_drv_init(lv_indev_drv_t * driver);






lv_indev_t * lv_indev_drv_register(lv_indev_drv_t * driver);






void lv_indev_drv_update(lv_indev_t * indev, lv_indev_drv_t * new_drv);







lv_indev_t * lv_indev_get_next(lv_indev_t * indev);







_Bool lv_indev_read(lv_indev_t * indev, lv_indev_data_t * data);
# 18 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_hal/lv_hal.h" 2
# 1 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_hal/lv_hal_tick.h" 1
# 45 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_hal/lv_hal_tick.h"
 void lv_tick_inc(uint32_t tick_period);







uint32_t lv_tick_get(void);






uint32_t lv_tick_elaps(uint32_t prev_tick);
# 19 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_hal/lv_hal.h" 2
# 25 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/lvgl.h" 2

# 1 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_core/lv_obj.h" 1
# 19 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_core/lv_obj.h"
# 1 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_core/../../../lv_conf.h" 1
# 20 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_core/lv_obj.h" 2


# 1 "/usr/lib/gcc/arm-none-eabi/4.9.3/include/stddef.h" 1 3 4
# 23 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_core/lv_obj.h" 2

# 1 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_core/lv_style.h" 1
# 25 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_core/lv_obj.h" 2
# 1 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_core/../lv_misc/lv_types.h" 1
# 26 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_core/lv_obj.h" 2
# 1 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_core/../lv_misc/lv_area.h" 1
# 27 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_core/lv_obj.h" 2
# 1 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_core/../lv_misc/lv_mem.h" 1
# 28 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_core/lv_obj.h" 2
# 1 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_core/../lv_misc/lv_ll.h" 1
# 29 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_core/lv_obj.h" 2
# 1 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_core/../lv_misc/lv_color.h" 1
# 30 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_core/lv_obj.h" 2
# 1 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_core/../lv_misc/lv_log.h" 1
# 31 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_core/lv_obj.h" 2
# 1 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_core/../lv_misc/lv_bidi.h" 1
# 19 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_core/../lv_misc/lv_bidi.h"
# 1 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_core/../lv_misc/../../../lv_conf.h" 1
# 20 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_core/../lv_misc/lv_bidi.h" 2
# 36 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_core/../lv_misc/lv_bidi.h"
enum
{

    LV_BIDI_DIR_LTR = 0x00,
    LV_BIDI_DIR_RTL = 0x01,
    LV_BIDI_DIR_AUTO = 0x02,
    LV_BIDI_DIR_INHERIT = 0x03,

    LV_BIDI_DIR_NEUTRAL = 0x20,
    LV_BIDI_DIR_WEAK = 0x21,
};

typedef uint8_t lv_bidi_dir_t;






void lv_bidi_process(const char * str_in, char * str_out, lv_bidi_dir_t base_dir);
void lv_bidi_process_paragraph(const char * str_in, char * str_out, uint32_t len, lv_bidi_dir_t base_dir, uint16_t *pos_conv_out, uint16_t pos_conv_len);
uint32_t lv_bidi_get_next_paragraph(const char * txt);
lv_bidi_dir_t lv_bidi_detect_base_dir(const char * txt);
lv_bidi_dir_t lv_bidi_get_letter_dir(uint32_t letter);
_Bool lv_bidi_letter_is_weak(uint32_t letter);
_Bool lv_bidi_letter_is_rtl(uint32_t letter);
_Bool lv_bidi_letter_is_neutral(uint32_t letter);
uint16_t lv_bidi_get_logical_pos(const char * str_in, char **bidi_txt, uint32_t len, lv_bidi_dir_t base_dir, uint32_t visual_pos, _Bool *is_rtl);
uint16_t lv_bidi_get_visual_pos(const char * str_in, char **bidi_txt, uint16_t len, lv_bidi_dir_t base_dir, uint32_t logical_pos, _Bool *is_rtl);
# 32 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_core/lv_obj.h" 2
# 1 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_core/../lv_hal/lv_hal.h" 1
# 33 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_core/lv_obj.h" 2
# 57 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_core/lv_obj.h"
struct _lv_obj_t;



enum {
    LV_DESIGN_DRAW_MAIN,
    LV_DESIGN_DRAW_POST,
    LV_DESIGN_COVER_CHK,
};
typedef uint8_t lv_design_mode_t;





typedef _Bool (*lv_design_cb_t)(struct _lv_obj_t * obj, const lv_area_t * mask_p, lv_design_mode_t mode);

enum {
    LV_EVENT_PRESSED,
    LV_EVENT_PRESSING,
    LV_EVENT_PRESS_LOST,
    LV_EVENT_SHORT_CLICKED,
    LV_EVENT_LONG_PRESSED,
    LV_EVENT_LONG_PRESSED_REPEAT,

    LV_EVENT_CLICKED,
    LV_EVENT_RELEASED,
    LV_EVENT_DRAG_BEGIN,
    LV_EVENT_DRAG_END,
    LV_EVENT_DRAG_THROW_BEGIN,
    LV_EVENT_KEY,
    LV_EVENT_FOCUSED,
    LV_EVENT_DEFOCUSED,
    LV_EVENT_VALUE_CHANGED,
    LV_EVENT_INSERT,
    LV_EVENT_REFRESH,
    LV_EVENT_APPLY,
    LV_EVENT_CANCEL,
    LV_EVENT_DELETE,
};
typedef uint8_t lv_event_t;






typedef void (*lv_event_cb_t)(struct _lv_obj_t * obj, lv_event_t event);




enum {

    LV_SIGNAL_CLEANUP,
    LV_SIGNAL_CHILD_CHG,
    LV_SIGNAL_CORD_CHG,
    LV_SIGNAL_PARENT_SIZE_CHG,
    LV_SIGNAL_STYLE_CHG,
    LV_SIGNAL_BASE_DIR_CHG,
    LV_SIGNAL_REFR_EXT_DRAW_PAD,
    LV_SIGNAL_GET_TYPE,


    LV_SIGNAL_PRESSED,
    LV_SIGNAL_PRESSING,
    LV_SIGNAL_PRESS_LOST,
    LV_SIGNAL_RELEASED,
    LV_SIGNAL_LONG_PRESS,
    LV_SIGNAL_LONG_PRESS_REP,
    LV_SIGNAL_DRAG_BEGIN,
    LV_SIGNAL_DRAG_END,


    LV_SIGNAL_FOCUS,
    LV_SIGNAL_DEFOCUS,
    LV_SIGNAL_CONTROL,
    LV_SIGNAL_GET_EDITABLE,
};
typedef uint8_t lv_signal_t;

typedef lv_res_t (*lv_signal_cb_t)(struct _lv_obj_t * obj, lv_signal_t sign, void * param);


enum {
    LV_ALIGN_CENTER = 0,
    LV_ALIGN_IN_TOP_LEFT,
    LV_ALIGN_IN_TOP_MID,
    LV_ALIGN_IN_TOP_RIGHT,
    LV_ALIGN_IN_BOTTOM_LEFT,
    LV_ALIGN_IN_BOTTOM_MID,
    LV_ALIGN_IN_BOTTOM_RIGHT,
    LV_ALIGN_IN_LEFT_MID,
    LV_ALIGN_IN_RIGHT_MID,
    LV_ALIGN_OUT_TOP_LEFT,
    LV_ALIGN_OUT_TOP_MID,
    LV_ALIGN_OUT_TOP_RIGHT,
    LV_ALIGN_OUT_BOTTOM_LEFT,
    LV_ALIGN_OUT_BOTTOM_MID,
    LV_ALIGN_OUT_BOTTOM_RIGHT,
    LV_ALIGN_OUT_LEFT_TOP,
    LV_ALIGN_OUT_LEFT_MID,
    LV_ALIGN_OUT_LEFT_BOTTOM,
    LV_ALIGN_OUT_RIGHT_TOP,
    LV_ALIGN_OUT_RIGHT_MID,
    LV_ALIGN_OUT_RIGHT_BOTTOM,
};
typedef uint8_t lv_align_t;


typedef struct
{
    const struct _lv_obj_t * base;
    lv_coord_t xofs;
    lv_coord_t yofs;
    lv_align_t align;
    uint8_t auto_realign : 1;
    uint8_t origo_align : 1;

} lv_reailgn_t;


enum {
    LV_DRAG_DIR_HOR = 0x1,
    LV_DRAG_DIR_VER = 0x2,
    LV_DRAG_DIR_ALL = 0x3,
};

typedef uint8_t lv_drag_dir_t;

typedef struct _lv_obj_t
{
    struct _lv_obj_t * par;
    lv_ll_t child_ll;

    lv_area_t coords;

    lv_event_cb_t event_cb;
    lv_signal_cb_t signal_cb;
    lv_design_cb_t design_cb;

    void * ext_attr;
    const lv_style_t * style_p;


    void * group_p;
# 215 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_core/lv_obj.h"
    uint8_t click : 1;
    uint8_t drag : 1;
    uint8_t drag_throw : 1;
    uint8_t drag_parent : 1;
    uint8_t hidden : 1;
    uint8_t top : 1;
    uint8_t opa_scale_en : 1;
    uint8_t parent_event : 1;
    lv_drag_dir_t drag_dir : 2;
    lv_bidi_dir_t base_dir : 2;
    uint8_t reserved : 3;
    uint8_t protect;

    lv_opa_t opa_scale;

    lv_coord_t ext_draw_pad;


    lv_reailgn_t realign;



    lv_obj_user_data_t user_data;


} lv_obj_t;


enum {
    LV_PROTECT_NONE = 0x00,
    LV_PROTECT_CHILD_CHG = 0x01,
    LV_PROTECT_PARENT = 0x02,
    LV_PROTECT_POS = 0x04,
    LV_PROTECT_FOLLOW = 0x08,

    LV_PROTECT_PRESS_LOST = 0x10,

    LV_PROTECT_CLICK_FOCUS = 0x20,
};
typedef uint8_t lv_protect_t;


typedef struct
{
    const char * type[8];

} lv_obj_type_t;
# 270 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_core/lv_obj.h"
void lv_init(void);
# 283 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_core/lv_obj.h"
lv_obj_t * lv_obj_create(lv_obj_t * parent, const lv_obj_t * copy);






lv_res_t lv_obj_del(lv_obj_t * obj);







void lv_obj_del_async(struct _lv_obj_t *obj);





void lv_obj_clean(lv_obj_t * obj);





void lv_obj_invalidate(const lv_obj_t * obj);
# 325 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_core/lv_obj.h"
void lv_obj_set_parent(lv_obj_t * obj, lv_obj_t * parent);





void lv_obj_move_foreground(lv_obj_t * obj);





void lv_obj_move_background(lv_obj_t * obj);
# 349 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_core/lv_obj.h"
void lv_obj_set_pos(lv_obj_t * obj, lv_coord_t x, lv_coord_t y);






void lv_obj_set_x(lv_obj_t * obj, lv_coord_t x);






void lv_obj_set_y(lv_obj_t * obj, lv_coord_t y);







void lv_obj_set_size(lv_obj_t * obj, lv_coord_t w, lv_coord_t h);






void lv_obj_set_width(lv_obj_t * obj, lv_coord_t w);






void lv_obj_set_height(lv_obj_t * obj, lv_coord_t h);
# 395 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_core/lv_obj.h"
void lv_obj_align(lv_obj_t * obj, const lv_obj_t * base, lv_align_t align, lv_coord_t x_mod, lv_coord_t y_mod);
# 405 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_core/lv_obj.h"
void lv_obj_align_origo(lv_obj_t * obj, const lv_obj_t * base, lv_align_t align, lv_coord_t x_mod, lv_coord_t y_mod);





void lv_obj_realign(lv_obj_t * obj);







void lv_obj_set_auto_realign(lv_obj_t * obj, _Bool en);
# 429 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_core/lv_obj.h"
void lv_obj_set_ext_click_area(lv_obj_t * obj, lv_coord_t left, lv_coord_t right, lv_coord_t top, lv_coord_t bottom);
# 440 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_core/lv_obj.h"
void lv_obj_set_style(lv_obj_t * obj, const lv_style_t * style);





void lv_obj_refresh_style(lv_obj_t * obj);






void lv_obj_report_style_mod(lv_style_t * style);
# 464 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_core/lv_obj.h"
void lv_obj_set_hidden(lv_obj_t * obj, _Bool en);






void lv_obj_set_click(lv_obj_t * obj, _Bool en);







void lv_obj_set_top(lv_obj_t * obj, _Bool en);






void lv_obj_set_drag(lv_obj_t * obj, _Bool en);






void lv_obj_set_drag_dir(lv_obj_t * obj, lv_drag_dir_t drag_dir);






void lv_obj_set_drag_throw(lv_obj_t * obj, _Bool en);







void lv_obj_set_drag_parent(lv_obj_t * obj, _Bool en);






void lv_obj_set_parent_event(lv_obj_t * obj, _Bool en);

void lv_obj_set_base_dir(lv_obj_t * obj, lv_bidi_dir_t dir);





void lv_obj_set_opa_scale_enable(lv_obj_t * obj, _Bool en);
# 533 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_core/lv_obj.h"
void lv_obj_set_opa_scale(lv_obj_t * obj, lv_opa_t opa_scale);






void lv_obj_set_protect(lv_obj_t * obj, uint8_t prot);






void lv_obj_clear_protect(lv_obj_t * obj, uint8_t prot);







void lv_obj_set_event_cb(lv_obj_t * obj, lv_event_cb_t event_cb);
# 564 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_core/lv_obj.h"
lv_res_t lv_event_send(lv_obj_t * obj, lv_event_t event, const void * data);
# 576 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_core/lv_obj.h"
lv_res_t lv_event_send_func(lv_event_cb_t event_xcb, lv_obj_t * obj, lv_event_t event, const void * data);





const void * lv_event_get_data(void);







void lv_obj_set_signal_cb(lv_obj_t * obj, lv_signal_cb_t signal_cb);






void lv_signal_send(lv_obj_t * obj, lv_signal_t signal, void * param);






void lv_obj_set_design_cb(lv_obj_t * obj, lv_design_cb_t design_cb);
# 616 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_core/lv_obj.h"
void * lv_obj_allocate_ext_attr(lv_obj_t * obj, uint16_t ext_size);





void lv_obj_refresh_ext_draw_pad(lv_obj_t * obj);
# 633 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_core/lv_obj.h"
lv_obj_t * lv_obj_get_screen(const lv_obj_t * obj);






lv_disp_t * lv_obj_get_disp(const lv_obj_t * obj);
# 651 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_core/lv_obj.h"
lv_obj_t * lv_obj_get_parent(const lv_obj_t * obj);
# 660 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_core/lv_obj.h"
lv_obj_t * lv_obj_get_child(const lv_obj_t * obj, const lv_obj_t * child);
# 669 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_core/lv_obj.h"
lv_obj_t * lv_obj_get_child_back(const lv_obj_t * obj, const lv_obj_t * child);






uint16_t lv_obj_count_children(const lv_obj_t * obj);





uint16_t lv_obj_count_children_recursive(const lv_obj_t * obj);
# 693 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_core/lv_obj.h"
void lv_obj_get_coords(const lv_obj_t * obj, lv_area_t * cords_p);






void lv_obj_get_inner_coords(const lv_obj_t * obj, lv_area_t * coords_p);






lv_coord_t lv_obj_get_x(const lv_obj_t * obj);






lv_coord_t lv_obj_get_y(const lv_obj_t * obj);






lv_coord_t lv_obj_get_width(const lv_obj_t * obj);






lv_coord_t lv_obj_get_height(const lv_obj_t * obj);






lv_coord_t lv_obj_get_width_fit(const lv_obj_t * obj);






lv_coord_t lv_obj_get_height_fit(const lv_obj_t * obj);






_Bool lv_obj_get_auto_realign(const lv_obj_t * obj);






lv_coord_t lv_obj_get_ext_click_pad_left(const lv_obj_t * obj);






lv_coord_t lv_obj_get_ext_click_pad_right(const lv_obj_t * obj);






lv_coord_t lv_obj_get_ext_click_pad_top(const lv_obj_t * obj);






lv_coord_t lv_obj_get_ext_click_pad_bottom(const lv_obj_t * obj);






lv_coord_t lv_obj_get_ext_draw_pad(const lv_obj_t * obj);
# 795 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_core/lv_obj.h"
const lv_style_t * lv_obj_get_style(const lv_obj_t * obj);
# 806 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_core/lv_obj.h"
_Bool lv_obj_get_hidden(const lv_obj_t * obj);






_Bool lv_obj_get_click(const lv_obj_t * obj);






_Bool lv_obj_get_top(const lv_obj_t * obj);






_Bool lv_obj_get_drag(const lv_obj_t * obj);






lv_drag_dir_t lv_obj_get_drag_dir(const lv_obj_t * obj);






_Bool lv_obj_get_drag_throw(const lv_obj_t * obj);






_Bool lv_obj_get_drag_parent(const lv_obj_t * obj);






_Bool lv_obj_get_parent_event(const lv_obj_t * obj);


lv_bidi_dir_t lv_obj_get_base_dir(const lv_obj_t * obj);






lv_opa_t lv_obj_get_opa_scale_enable(const lv_obj_t * obj);






lv_opa_t lv_obj_get_opa_scale(const lv_obj_t * obj);






uint8_t lv_obj_get_protect(const lv_obj_t * obj);







_Bool lv_obj_is_protected(const lv_obj_t * obj, uint8_t prot);






lv_signal_cb_t lv_obj_get_signal_cb(const lv_obj_t * obj);






lv_design_cb_t lv_obj_get_design_cb(const lv_obj_t * obj);






lv_event_cb_t lv_obj_get_event_cb(const lv_obj_t * obj);
# 920 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_core/lv_obj.h"
void * lv_obj_get_ext_attr(const lv_obj_t * obj);







void lv_obj_get_type(const lv_obj_t * obj, lv_obj_type_t * buf);







lv_obj_user_data_t lv_obj_get_user_data(const lv_obj_t * obj);






lv_obj_user_data_t * lv_obj_get_user_data_ptr(const lv_obj_t * obj);






void lv_obj_set_user_data(lv_obj_t * obj, lv_obj_user_data_t data);
# 960 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_core/lv_obj.h"
void * lv_obj_get_group(const lv_obj_t * obj);






_Bool lv_obj_is_focused(const lv_obj_t * obj);
# 981 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_core/lv_obj.h"
lv_res_t lv_obj_handle_get_type_signal(lv_obj_type_t * buf, const char * name);
# 27 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/lvgl.h" 2
# 1 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_core/lv_group.h" 1
# 22 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_core/lv_group.h"
# 1 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_core/lv_obj.h" 1
# 23 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_core/lv_group.h" 2







enum {
    LV_KEY_UP = 17,
    LV_KEY_DOWN = 18,
    LV_KEY_RIGHT = 19,
    LV_KEY_LEFT = 20,
    LV_KEY_ESC = 27,
    LV_KEY_DEL = 127,
    LV_KEY_BACKSPACE = 8,
    LV_KEY_ENTER = 10,
    LV_KEY_NEXT = 9,
    LV_KEY_PREV = 11,
    LV_KEY_HOME = 2,
    LV_KEY_END = 3,
};
typedef uint8_t lv_key_t;





struct _lv_group_t;

typedef void (*lv_group_style_mod_cb_t)(struct _lv_group_t *, lv_style_t *);
typedef void (*lv_group_focus_cb_t)(struct _lv_group_t *);





typedef struct _lv_group_t
{
    lv_ll_t obj_ll;
    lv_obj_t ** obj_focus;

    lv_group_style_mod_cb_t style_mod_cb;
    lv_group_style_mod_cb_t style_mod_edit_cb;
    lv_group_focus_cb_t focus_cb;
    lv_style_t style_tmp;

    lv_group_user_data_t user_data;


    uint8_t frozen : 1;
    uint8_t editing : 1;
    uint8_t click_focus : 1;

    uint8_t refocus_policy : 1;

    uint8_t wrap : 1;

} lv_group_t;

enum { LV_GROUP_REFOCUS_POLICY_NEXT = 0, LV_GROUP_REFOCUS_POLICY_PREV = 1 };
typedef uint8_t lv_group_refocus_policy_t;
# 93 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_core/lv_group.h"
void lv_group_init(void);





lv_group_t * lv_group_create(void);





void lv_group_del(lv_group_t * group);






void lv_group_add_obj(lv_group_t * group, lv_obj_t * obj);





void lv_group_remove_obj(lv_obj_t * obj);





void lv_group_remove_all_objs(lv_group_t * group);





void lv_group_focus_obj(lv_obj_t * obj);





void lv_group_focus_next(lv_group_t * group);





void lv_group_focus_prev(lv_group_t * group);






void lv_group_focus_freeze(lv_group_t * group, _Bool en);







lv_res_t lv_group_send_data(lv_group_t * group, uint32_t c);






void lv_group_set_style_mod_cb(lv_group_t * group, lv_group_style_mod_cb_t style_mod_cb);






void lv_group_set_style_mod_edit_cb(lv_group_t * group, lv_group_style_mod_cb_t style_mod_edit_cb);






void lv_group_set_focus_cb(lv_group_t * group, lv_group_focus_cb_t focus_cb);







void lv_group_set_refocus_policy(lv_group_t * group, lv_group_refocus_policy_t policy);






void lv_group_set_editing(lv_group_t * group, _Bool edit);






void lv_group_set_click_focus(lv_group_t * group, _Bool en);






void lv_group_set_wrap(lv_group_t * group, _Bool en);







lv_style_t * lv_group_mod_style(lv_group_t * group, const lv_style_t * style);






lv_obj_t * lv_group_get_focused(const lv_group_t * group);







lv_group_user_data_t * lv_group_get_user_data(lv_group_t * group);
# 239 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_core/lv_group.h"
lv_group_style_mod_cb_t lv_group_get_style_mod_cb(const lv_group_t * group);






lv_group_style_mod_cb_t lv_group_get_style_mod_edit_cb(const lv_group_t * group);






lv_group_focus_cb_t lv_group_get_focus_cb(const lv_group_t * group);






_Bool lv_group_get_editing(const lv_group_t * group);






_Bool lv_group_get_click_focus(const lv_group_t * group);






_Bool lv_group_get_wrap(lv_group_t * group);






void lv_group_report_style_mod(lv_group_t * group);
# 28 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/lvgl.h" 2
# 1 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_core/lv_indev.h" 1
# 17 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_core/lv_indev.h"
# 1 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_core/../lv_hal/lv_hal_indev.h" 1
# 18 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_core/lv_indev.h" 2
# 1 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_core/../lv_core/lv_group.h" 1
# 19 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_core/lv_indev.h" 2
# 35 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_core/lv_indev.h"
void lv_indev_init(void);





void lv_indev_read_task(lv_task_t * task);






lv_indev_t * lv_indev_get_act(void);






lv_indev_type_t lv_indev_get_type(const lv_indev_t * indev);





void lv_indev_reset(lv_indev_t * indev);





void lv_indev_reset_long_press(lv_indev_t * indev);






void lv_indev_enable(lv_indev_t * indev, _Bool en);






void lv_indev_set_cursor(lv_indev_t * indev, lv_obj_t * cur_obj);







void lv_indev_set_group(lv_indev_t * indev, lv_group_t * group);
# 98 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_core/lv_indev.h"
void lv_indev_set_button_points(lv_indev_t * indev, const lv_point_t * points);






void lv_indev_get_point(const lv_indev_t * indev, lv_point_t * point);






uint32_t lv_indev_get_key(const lv_indev_t * indev);







_Bool lv_indev_is_dragging(const lv_indev_t * indev);







void lv_indev_get_vect(const lv_indev_t * indev, lv_point_t * point);





void lv_indev_wait_release(lv_indev_t * indev);







lv_task_t * lv_indev_get_read_task(lv_disp_t * indev);






lv_obj_t * lv_indev_get_obj_act(void);
# 29 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/lvgl.h" 2

# 1 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_core/lv_refr.h" 1
# 46 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_core/lv_refr.h"
void lv_refr_init(void);
# 55 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_core/lv_refr.h"
void lv_refr_now(lv_disp_t * disp);







void lv_inv_area(lv_disp_t * disp, const lv_area_t * area_p);





lv_disp_t * lv_refr_get_disp_refreshing(void);







void lv_refr_set_disp_refreshing(lv_disp_t * disp);





void lv_disp_refr_task(lv_task_t * task);
# 31 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/lvgl.h" 2
# 1 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_core/lv_disp.h" 1
# 37 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_core/lv_disp.h"
lv_obj_t * lv_disp_get_scr_act(lv_disp_t * disp);





void lv_disp_load_scr(lv_obj_t * scr);






lv_obj_t * lv_disp_get_layer_top(lv_disp_t * disp);







lv_obj_t * lv_disp_get_layer_sys(lv_disp_t * disp);






void lv_disp_assign_screen(lv_disp_t * disp, lv_obj_t * scr);







lv_task_t * lv_disp_get_refr_task(lv_disp_t * disp);






uint32_t lv_disp_get_inactive_time(const lv_disp_t * disp);





void lv_disp_trig_activity(lv_disp_t * disp);
# 97 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_core/lv_disp.h"
static inline lv_obj_t * lv_scr_act(void)
{
    return lv_disp_get_scr_act(lv_disp_get_default());
}





static inline lv_obj_t * lv_layer_top(void)
{
    return lv_disp_get_layer_top(lv_disp_get_default());
}





static inline lv_obj_t * lv_layer_sys(void)
{
    return lv_disp_get_layer_sys(lv_disp_get_default());
}

static inline void lv_scr_load(lv_obj_t * scr)
{
    lv_disp_load_scr(scr);
}
# 32 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/lvgl.h" 2
# 1 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_core/lv_debug.h" 1
# 31 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_core/lv_debug.h"
_Bool lv_debug_check_null(const void * p);

_Bool lv_debug_check_obj_type(const lv_obj_t * obj, const char * obj_type);

_Bool lv_debug_check_obj_valid(const lv_obj_t * obj);

_Bool lv_debug_check_style(const lv_style_t * style);

_Bool lv_debug_check_str(const void * str);

void lv_debug_log_error(const char * msg, uint64_t value);
# 33 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/lvgl.h" 2

# 1 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_themes/lv_theme.h" 1
# 19 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_themes/lv_theme.h"
# 1 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_themes/../../../lv_conf.h" 1
# 20 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_themes/lv_theme.h" 2


# 1 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_themes/../lv_core/lv_style.h" 1
# 23 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_themes/lv_theme.h" 2
# 1 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_themes/../lv_core/lv_group.h" 1
# 24 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_themes/lv_theme.h" 2
# 39 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_themes/lv_theme.h"
typedef struct
{
    struct
    {
        lv_style_t * scr;
        lv_style_t * bg;
        lv_style_t * panel;


        lv_style_t * cont;



        struct
        {
            lv_style_t * rel;
            lv_style_t * pr;
            lv_style_t * tgl_rel;
            lv_style_t * tgl_pr;
            lv_style_t * ina;
        } btn;



        struct
        {
            lv_style_t * rel;
            lv_style_t * pr;
            lv_style_t * tgl_rel;
            lv_style_t * tgl_pr;
            lv_style_t * ina;
        } imgbtn;



        struct
        {
            lv_style_t * prim;
            lv_style_t * sec;
            lv_style_t * hint;
        } label;



        struct
        {
            lv_style_t * light;
            lv_style_t * dark;
        } img;



        struct
        {
            lv_style_t * decor;
        } line;



        lv_style_t * led;



        struct
        {
            lv_style_t * bg;
            lv_style_t * indic;
        } bar;



        struct
        {
            lv_style_t * bg;
            lv_style_t * indic;
            lv_style_t * knob;
        } slider;



        lv_style_t * lmeter;



        lv_style_t * gauge;



        lv_style_t * arc;



        lv_style_t * preload;



        struct
        {
            lv_style_t * bg;
            lv_style_t * indic;
            lv_style_t * knob_off;
            lv_style_t * knob_on;
        } sw;



        lv_style_t * chart;



        struct
        {
            lv_style_t * bg;
            lv_style_t * header;
            lv_style_t * header_pr;
            lv_style_t * day_names;
            lv_style_t * highlighted_days;
            lv_style_t * inactive_days;
            lv_style_t * week_box;
            lv_style_t * today_box;
        } calendar;



        struct
        {
            lv_style_t * bg;
            struct
            {
                lv_style_t * rel;
                lv_style_t * pr;
                lv_style_t * tgl_rel;
                lv_style_t * tgl_pr;
                lv_style_t * ina;
            } box;
        } cb;



        struct
        {
            lv_style_t * bg;
            struct
            {
                lv_style_t * rel;
                lv_style_t * pr;
                lv_style_t * tgl_rel;
                lv_style_t * tgl_pr;
                lv_style_t * ina;
            } btn;
        } btnm;



        struct
        {
            lv_style_t * bg;
            struct
            {
                lv_style_t * rel;
                lv_style_t * pr;
                lv_style_t * tgl_rel;
                lv_style_t * tgl_pr;
                lv_style_t * ina;
            } btn;
        } kb;



        struct
        {
            lv_style_t * bg;
            struct
            {
                lv_style_t * bg;
                lv_style_t * rel;
                lv_style_t * pr;
            } btn;
        } mbox;



        struct
        {
            lv_style_t * bg;
            lv_style_t * scrl;
            lv_style_t * sb;
        } page;



        struct
        {
            lv_style_t * area;
            lv_style_t * oneline;
            lv_style_t * cursor;
            lv_style_t * sb;
        } ta;



        struct
        {
            lv_style_t * bg;
            lv_style_t * cursor;
            lv_style_t * sb;
        } spinbox;



        struct
        {
            lv_style_t * bg;
            lv_style_t * scrl;
            lv_style_t * sb;
            struct
            {
                lv_style_t * rel;
                lv_style_t * pr;
                lv_style_t * tgl_rel;
                lv_style_t * tgl_pr;
                lv_style_t * ina;
            } btn;
        } list;



        struct
        {
            lv_style_t * bg;
            lv_style_t * sel;
            lv_style_t * sb;
        } ddlist;



        struct
        {
            lv_style_t * bg;
            lv_style_t * sel;
        } roller;



        struct
        {
            lv_style_t * bg;
            lv_style_t * indic;
            struct
            {
                lv_style_t * bg;
                lv_style_t * rel;
                lv_style_t * pr;
                lv_style_t * tgl_rel;
                lv_style_t * tgl_pr;
            } btn;
        } tabview;



        struct
        {
            lv_style_t * bg;
            lv_style_t * scrl;
            lv_style_t * sb;
        } tileview;



        struct
        {
            lv_style_t * bg;
            lv_style_t * cell;
        } table;



        struct
        {
            lv_style_t * bg;
            lv_style_t * sb;
            lv_style_t * header;
            lv_style_t * content;
            struct
            {
                lv_style_t * rel;
                lv_style_t * pr;
            } btn;
        } win;

    } style;


    struct
    {


        lv_group_style_mod_cb_t style_mod_xcb;
        lv_group_style_mod_cb_t style_mod_edit_xcb;
    } group;

} lv_theme_t;
# 351 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_themes/lv_theme.h"
void lv_theme_set_current(lv_theme_t * th);





lv_theme_t * lv_theme_get_current(void);
# 369 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_themes/lv_theme.h"
# 1 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_themes/lv_theme_templ.h" 1
# 42 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_themes/lv_theme_templ.h"
lv_theme_t * lv_theme_templ_init(uint16_t hue, lv_font_t * font);





lv_theme_t * lv_theme_get_templ(void);
# 370 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_themes/lv_theme.h" 2
# 1 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_themes/lv_theme_default.h" 1
# 42 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_themes/lv_theme_default.h"
lv_theme_t * lv_theme_default_init(uint16_t hue, lv_font_t * font);





lv_theme_t * lv_theme_get_default(void);
# 371 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_themes/lv_theme.h" 2
# 1 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_themes/lv_theme_alien.h" 1
# 42 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_themes/lv_theme_alien.h"
lv_theme_t * lv_theme_alien_init(uint16_t hue, lv_font_t * font);




lv_theme_t * lv_theme_get_alien(void);
# 372 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_themes/lv_theme.h" 2
# 1 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_themes/lv_theme_night.h" 1
# 42 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_themes/lv_theme_night.h"
lv_theme_t * lv_theme_night_init(uint16_t hue, lv_font_t * font);





lv_theme_t * lv_theme_get_night(void);
# 373 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_themes/lv_theme.h" 2
# 1 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_themes/lv_theme_zen.h" 1
# 42 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_themes/lv_theme_zen.h"
lv_theme_t * lv_theme_zen_init(uint16_t hue, lv_font_t * font);





lv_theme_t * lv_theme_get_zen(void);
# 374 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_themes/lv_theme.h" 2
# 1 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_themes/lv_theme_mono.h" 1
# 42 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_themes/lv_theme_mono.h"
lv_theme_t * lv_theme_mono_init(uint16_t hue, lv_font_t * font);





lv_theme_t * lv_theme_get_mono(void);
# 375 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_themes/lv_theme.h" 2
# 1 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_themes/lv_theme_nemo.h" 1
# 42 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_themes/lv_theme_nemo.h"
lv_theme_t * lv_theme_nemo_init(uint16_t hue, lv_font_t * font);





lv_theme_t * lv_theme_get_nemo(void);
# 376 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_themes/lv_theme.h" 2
# 1 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_themes/lv_theme_material.h" 1
# 42 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_themes/lv_theme_material.h"
lv_theme_t * lv_theme_material_init(uint16_t hue, lv_font_t * font);





lv_theme_t * lv_theme_get_material(void);
# 377 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_themes/lv_theme.h" 2
# 35 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/lvgl.h" 2

# 1 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_font/lv_font.h" 1
# 37 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/lvgl.h" 2
# 1 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_font/lv_font_fmt_txt.h" 1
# 19 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_font/lv_font_fmt_txt.h"
# 1 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_font/../../../lv_conf.h" 1
# 20 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_font/lv_font_fmt_txt.h" 2



# 1 "/usr/lib/gcc/arm-none-eabi/4.9.3/include/stddef.h" 1 3 4
# 24 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_font/lv_font_fmt_txt.h" 2

# 1 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_font/lv_font.h" 1
# 26 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_font/lv_font_fmt_txt.h" 2
# 36 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_font/lv_font_fmt_txt.h"
typedef struct
{

    uint32_t bitmap_index : 20;
    uint32_t adv_w :12;




    uint8_t box_w;
    uint8_t box_h;
    int8_t ofs_x;
    int8_t ofs_y;
}lv_font_fmt_txt_glyph_dsc_t;



enum {
    LV_FONT_FMT_TXT_CMAP_FORMAT0_TINY,
    LV_FONT_FMT_TXT_CMAP_FORMAT0_FULL,
    LV_FONT_FMT_TXT_CMAP_SPARSE_TINY,
    LV_FONT_FMT_TXT_CMAP_SPARSE_FULL,
};

typedef uint8_t lv_font_fmt_txt_cmap_type_t;






typedef struct {

    uint32_t range_start;



    uint16_t range_length;


    uint16_t glyph_id_start;
# 105 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_font/lv_font_fmt_txt.h"
    const uint16_t * unicode_list;




    const void * glyph_id_ofs_list;


    uint16_t list_length;


    lv_font_fmt_txt_cmap_type_t type;
}lv_font_fmt_txt_cmap_t;


typedef struct {







    const void * glyph_ids;
    const int8_t * values;
    uint32_t pair_cnt :24;
    uint32_t glyph_ids_size :2;
}lv_font_fmt_txt_kern_pair_t;


typedef struct {
# 144 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_font/lv_font_fmt_txt.h"
    const int8_t * class_pair_values;
    const uint8_t * left_class_mapping;
    const uint8_t * right_class_mapping;
    uint8_t left_class_cnt;
    uint8_t right_class_cnt;
}lv_font_fmt_txt_kern_classes_t;



typedef enum {
    LV_FONT_FMT_TXT_PLAIN = 0,
    LV_FONT_FMT_TXT_COMPRESSED = 1,
}lv_font_fmt_txt_bitmap_format_t;



typedef struct {

    const uint8_t * glyph_bitmap;


    const lv_font_fmt_txt_glyph_dsc_t * glyph_dsc;



    const lv_font_fmt_txt_cmap_t * cmaps;





    const void * kern_dsc;


    uint16_t kern_scale;


    uint16_t cmap_num :10;


    uint16_t bpp :3;


    uint16_t kern_classes :1;





    uint16_t bitmap_format :2;


    uint32_t last_letter;
    uint32_t last_glyph_id;

}lv_font_fmt_txt_dsc_t;
# 211 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_font/lv_font_fmt_txt.h"
const uint8_t * lv_font_get_bitmap_fmt_txt(const lv_font_t * font, uint32_t letter);
# 221 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_font/lv_font_fmt_txt.h"
_Bool lv_font_get_glyph_dsc_fmt_txt(const lv_font_t * font, lv_font_glyph_dsc_t * dsc_out, uint32_t unicode_letter, uint32_t unicode_letter_next);
# 38 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/lvgl.h" 2
# 1 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_misc/lv_bidi.h" 1
# 39 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/lvgl.h" 2
# 1 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_misc/lv_printf.h" 1
# 40 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/lvgl.h" 2

# 1 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_btn.h" 1
# 19 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_btn.h"
# 1 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/../../../lv_conf.h" 1
# 20 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_btn.h" 2
# 29 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_btn.h"
# 1 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_cont.h" 1
# 24 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_cont.h"
# 1 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/../lv_core/lv_obj.h" 1
# 25 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_cont.h" 2
# 35 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_cont.h"
enum {
    LV_LAYOUT_OFF = 0,
    LV_LAYOUT_CENTER,
    LV_LAYOUT_COL_L,
    LV_LAYOUT_COL_M,
    LV_LAYOUT_COL_R,
    LV_LAYOUT_ROW_T,
    LV_LAYOUT_ROW_M,
    LV_LAYOUT_ROW_B,
    LV_LAYOUT_PRETTY,
    LV_LAYOUT_GRID,
    _LV_LAYOUT_NUM
};
typedef uint8_t lv_layout_t;




enum {
    LV_FIT_NONE,
    LV_FIT_TIGHT,
    LV_FIT_FLOOD,
    LV_FIT_FILL,

    _LV_FIT_NUM
};
typedef uint8_t lv_fit_t;

typedef struct
{


    uint8_t layout : 4;
    uint8_t fit_left : 2;
    uint8_t fit_right : 2;
    uint8_t fit_top : 2;
    uint8_t fit_bottom : 2;
} lv_cont_ext_t;


enum {
    LV_CONT_STYLE_MAIN,
};
typedef uint8_t lv_cont_style_t;
# 90 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_cont.h"
lv_obj_t * lv_cont_create(lv_obj_t * par, const lv_obj_t * copy);
# 101 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_cont.h"
void lv_cont_set_layout(lv_obj_t * cont, lv_layout_t layout);
# 112 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_cont.h"
void lv_cont_set_fit4(lv_obj_t * cont, lv_fit_t left, lv_fit_t right, lv_fit_t top, lv_fit_t bottom);
# 121 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_cont.h"
static inline void lv_cont_set_fit2(lv_obj_t * cont, lv_fit_t hor, lv_fit_t ver)
{
    lv_cont_set_fit4(cont, hor, hor, ver, ver);
}







static inline void lv_cont_set_fit(lv_obj_t * cont, lv_fit_t fit)
{
    lv_cont_set_fit4(cont, fit, fit, fit, fit);
}







static inline void lv_cont_set_style(lv_obj_t * cont, lv_cont_style_t type, const lv_style_t * style)
{
    (void)type;
    lv_obj_set_style(cont, style);
}
# 158 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_cont.h"
lv_layout_t lv_cont_get_layout(const lv_obj_t * cont);






lv_fit_t lv_cont_get_fit_left(const lv_obj_t * cont);






lv_fit_t lv_cont_get_fit_right(const lv_obj_t * cont);






lv_fit_t lv_cont_get_fit_top(const lv_obj_t * cont);






lv_fit_t lv_cont_get_fit_bottom(const lv_obj_t * cont);







static inline const lv_style_t * lv_cont_get_style(const lv_obj_t * cont, lv_cont_style_t type)
{
    (void)type;
    return lv_obj_get_style(cont);
}
# 30 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_btn.h" 2
# 1 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/../lv_core/lv_indev.h" 1
# 31 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_btn.h" 2
# 42 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_btn.h"
enum {

    LV_BTN_STATE_REL,


    LV_BTN_STATE_PR,


    LV_BTN_STATE_TGL_REL,


    LV_BTN_STATE_TGL_PR,


    LV_BTN_STATE_INA,


    _LV_BTN_STATE_NUM,
};
typedef uint8_t lv_btn_state_t;


typedef struct
{

    lv_cont_ext_t cont;




    const lv_style_t * styles[_LV_BTN_STATE_NUM];
# 85 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_btn.h"
    lv_btn_state_t state : 3;


    uint8_t toggle : 1;
} lv_btn_ext_t;


enum {

    LV_BTN_STYLE_REL,


    LV_BTN_STYLE_PR,


    LV_BTN_STYLE_TGL_REL,


    LV_BTN_STYLE_TGL_PR,


    LV_BTN_STYLE_INA,
};
typedef uint8_t lv_btn_style_t;
# 120 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_btn.h"
lv_obj_t * lv_btn_create(lv_obj_t * par, const lv_obj_t * copy);
# 131 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_btn.h"
void lv_btn_set_toggle(lv_obj_t * btn, _Bool tgl);






void lv_btn_set_state(lv_obj_t * btn, lv_btn_state_t state);





void lv_btn_toggle(lv_obj_t * btn);






static inline void lv_btn_set_layout(lv_obj_t * btn, lv_layout_t layout)
{
    lv_cont_set_layout(btn, layout);
}
# 165 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_btn.h"
static inline void lv_btn_set_fit4(lv_obj_t * btn, lv_fit_t left, lv_fit_t right, lv_fit_t top, lv_fit_t bottom)
{
    lv_cont_set_fit4(btn, left, right, top, bottom);
}
# 177 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_btn.h"
static inline void lv_btn_set_fit2(lv_obj_t * btn, lv_fit_t hor, lv_fit_t ver)
{
    lv_cont_set_fit2(btn, hor, ver);
}







static inline void lv_btn_set_fit(lv_obj_t * btn, lv_fit_t fit)
{
    lv_cont_set_fit(btn, fit);
}






void lv_btn_set_ink_in_time(lv_obj_t * btn, uint16_t time);






void lv_btn_set_ink_wait_time(lv_obj_t * btn, uint16_t time);






void lv_btn_set_ink_out_time(lv_obj_t * btn, uint16_t time);







void lv_btn_set_style(lv_obj_t * btn, lv_btn_style_t type, const lv_style_t * style);
# 231 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_btn.h"
lv_btn_state_t lv_btn_get_state(const lv_obj_t * btn);






_Bool lv_btn_get_toggle(const lv_obj_t * btn);






static inline lv_layout_t lv_btn_get_layout(const lv_obj_t * btn)
{
    return lv_cont_get_layout(btn);
}






static inline lv_fit_t lv_btn_get_fit_left(const lv_obj_t * btn)
{
    return lv_cont_get_fit_left(btn);
}






static inline lv_fit_t lv_btn_get_fit_right(const lv_obj_t * btn)
{
    return lv_cont_get_fit_right(btn);
}






static inline lv_fit_t lv_btn_get_fit_top(const lv_obj_t * btn)
{
    return lv_cont_get_fit_top(btn);
}






static inline lv_fit_t lv_btn_get_fit_bottom(const lv_obj_t * btn)
{
    return lv_cont_get_fit_bottom(btn);
}






uint16_t lv_btn_get_ink_in_time(const lv_obj_t * btn);






uint16_t lv_btn_get_ink_wait_time(const lv_obj_t * btn);






uint16_t lv_btn_get_ink_out_time(const lv_obj_t * btn);







const lv_style_t * lv_btn_get_style(const lv_obj_t * btn, lv_btn_style_t type);
# 42 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/lvgl.h" 2
# 1 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_imgbtn.h" 1
# 30 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_imgbtn.h"
# 1 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_btn.h" 1
# 31 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_imgbtn.h" 2
# 1 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/../lv_draw/lv_draw_img.h" 1
# 16 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/../lv_draw/lv_draw_img.h"
# 1 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/../lv_draw/lv_draw.h" 1
# 19 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/../lv_draw/lv_draw.h"
# 1 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/../lv_draw/../../../lv_conf.h" 1
# 20 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/../lv_draw/lv_draw.h" 2


# 1 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/../lv_draw/../lv_core/lv_style.h" 1
# 23 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/../lv_draw/lv_draw.h" 2
# 1 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/../lv_draw/../lv_misc/lv_txt.h" 1
# 19 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/../lv_draw/../lv_misc/lv_txt.h"
# 1 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/../lv_draw/../lv_misc/../../../lv_conf.h" 1
# 20 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/../lv_draw/../lv_misc/lv_txt.h" 2



# 1 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/../lv_draw/../lv_misc/lv_area.h" 1
# 24 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/../lv_draw/../lv_misc/lv_txt.h" 2

# 1 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/../lv_draw/../lv_misc/../lv_font/lv_font.h" 1
# 26 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/../lv_draw/../lv_misc/lv_txt.h" 2
# 43 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/../lv_draw/../lv_misc/lv_txt.h"
enum {
    LV_TXT_FLAG_NONE = 0x00,
    LV_TXT_FLAG_RECOLOR = 0x01,
    LV_TXT_FLAG_EXPAND = 0x02,
    LV_TXT_FLAG_CENTER = 0x04,
    LV_TXT_FLAG_RIGHT = 0x08,
};
typedef uint8_t lv_txt_flag_t;



enum {
    LV_TXT_CMD_STATE_WAIT,
    LV_TXT_CMD_STATE_PAR,
    LV_TXT_CMD_STATE_IN,
};
typedef uint8_t lv_txt_cmd_state_t;
# 76 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/../lv_draw/../lv_misc/lv_txt.h"
void lv_txt_get_size(lv_point_t * size_res, const char * text, const lv_font_t * font, lv_coord_t letter_space,
                     lv_coord_t line_space, lv_coord_t max_width, lv_txt_flag_t flag);
# 90 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/../lv_draw/../lv_misc/lv_txt.h"
uint16_t lv_txt_get_next_line(const char * txt, const lv_font_t * font, lv_coord_t letter_space, lv_coord_t max_width,
                              lv_txt_flag_t flag);
# 103 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/../lv_draw/../lv_misc/lv_txt.h"
lv_coord_t lv_txt_get_width(const char * txt, uint16_t length, const lv_font_t * font, lv_coord_t letter_space,
                            lv_txt_flag_t flag);
# 114 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/../lv_draw/../lv_misc/lv_txt.h"
_Bool lv_txt_is_cmd(lv_txt_cmd_state_t * state, uint32_t c);







void lv_txt_ins(char * txt_buf, uint32_t pos, const char * ins_txt);
# 131 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/../lv_draw/../lv_misc/lv_txt.h"
void lv_txt_cut(char * txt, uint32_t pos, uint32_t len);
# 142 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/../lv_draw/../lv_misc/lv_txt.h"
extern uint8_t (*lv_txt_encoded_size)(const char *);






extern uint32_t (*lv_txt_unicode_to_encoded)(uint32_t);






extern uint32_t (*lv_txt_encoded_conv_wc)(uint32_t c);
# 166 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/../lv_draw/../lv_misc/lv_txt.h"
extern uint32_t (*lv_txt_encoded_next)(const char *, uint32_t *);
# 175 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/../lv_draw/../lv_misc/lv_txt.h"
extern uint32_t (*lv_txt_encoded_prev)(const char *, uint32_t *);
# 184 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/../lv_draw/../lv_misc/lv_txt.h"
extern uint32_t (*lv_txt_encoded_get_byte_id)(const char *, uint32_t);
# 193 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/../lv_draw/../lv_misc/lv_txt.h"
extern uint32_t (*lv_txt_encoded_get_char_id)(const char *, uint32_t);







extern uint32_t (*lv_txt_get_encoded_length)(const char *);
# 24 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/../lv_draw/lv_draw.h" 2
# 1 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/../lv_draw/lv_img_decoder.h" 1
# 25 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/../lv_draw/lv_draw.h" 2
# 43 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/../lv_draw/lv_draw.h"
void * lv_draw_get_buf(uint32_t size);




void lv_draw_free_buf(void);
# 59 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/../lv_draw/lv_draw.h"
lv_opa_t lv_draw_aa_get_opa(lv_coord_t seg, lv_coord_t px_id, lv_opa_t base_opa);
# 70 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/../lv_draw/lv_draw.h"
void lv_draw_aa_ver_seg(lv_coord_t x, lv_coord_t y, lv_coord_t length, const lv_area_t * mask, lv_color_t color,
                        lv_opa_t opa);
# 82 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/../lv_draw/lv_draw.h"
void lv_draw_aa_hor_seg(lv_coord_t x, lv_coord_t y, lv_coord_t length, const lv_area_t * mask, lv_color_t color,
                        lv_opa_t opa);
# 97 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/../lv_draw/lv_draw.h"
# 1 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/../lv_draw/lv_draw_basic.h" 1
# 22 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/../lv_draw/lv_draw_basic.h"
# 1 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/../lv_draw/../lv_font/lv_font.h" 1
# 23 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/../lv_draw/lv_draw_basic.h" 2
# 1 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/../lv_draw/../lv_misc/lv_color.h" 1
# 24 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/../lv_draw/lv_draw_basic.h" 2
# 1 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/../lv_draw/../lv_misc/lv_area.h" 1
# 25 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/../lv_draw/lv_draw_basic.h" 2
# 38 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/../lv_draw/lv_draw_basic.h"
void lv_draw_px(lv_coord_t x, lv_coord_t y, const lv_area_t * mask_p, lv_color_t color, lv_opa_t opa);







void lv_draw_fill(const lv_area_t * cords_p, const lv_area_t * mask_p, lv_color_t color, lv_opa_t opa);
# 57 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/../lv_draw/lv_draw_basic.h"
void lv_draw_letter(const lv_point_t * pos_p, const lv_area_t * mask_p, const lv_font_t * font_p, uint32_t letter,
                    lv_color_t color, lv_opa_t opa);
# 71 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/../lv_draw/lv_draw_basic.h"
void lv_draw_map(const lv_area_t * cords_p, const lv_area_t * mask_p, const uint8_t * map_p, lv_opa_t opa,
                 _Bool chroma_key, _Bool alpha_byte, lv_color_t recolor, lv_opa_t recolor_opa);
# 98 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/../lv_draw/lv_draw.h" 2
# 1 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/../lv_draw/lv_draw_rect.h" 1
# 16 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/../lv_draw/lv_draw_rect.h"
# 1 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/../lv_draw/lv_draw.h" 1
# 17 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/../lv_draw/lv_draw_rect.h" 2
# 37 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/../lv_draw/lv_draw_rect.h"
void lv_draw_rect(const lv_area_t * coords, const lv_area_t * mask, const lv_style_t * style, lv_opa_t opa_scale);
# 99 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/../lv_draw/lv_draw.h" 2
# 1 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/../lv_draw/lv_draw_label.h" 1
# 17 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/../lv_draw/lv_draw_label.h"
# 1 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/../lv_draw/../lv_misc/lv_bidi.h" 1
# 18 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/../lv_draw/lv_draw_label.h" 2
# 28 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/../lv_draw/lv_draw_label.h"
typedef struct
{
    uint16_t start;
    uint16_t end;
}lv_draw_label_txt_sel_t;







typedef struct {

    int32_t line_start;


    int32_t y;



    int32_t coord_y;
}lv_draw_label_hint_t;
# 68 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/../lv_draw/lv_draw_label.h"
void lv_draw_label(const lv_area_t * coords, const lv_area_t * mask, const lv_style_t * style, lv_opa_t opa_scale,
                   const char * txt, lv_txt_flag_t flag, lv_point_t * offset, lv_draw_label_txt_sel_t * sel,
                   lv_draw_label_hint_t * hint, lv_bidi_dir_t bidi_dir);
# 100 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/../lv_draw/lv_draw.h" 2
# 1 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/../lv_draw/lv_draw_img.h" 1
# 101 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/../lv_draw/lv_draw.h" 2
# 1 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/../lv_draw/lv_draw_line.h" 1
# 37 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/../lv_draw/lv_draw_line.h"
void lv_draw_line(const lv_point_t * point1, const lv_point_t * point2, const lv_area_t * mask,
                  const lv_style_t * style, lv_opa_t opa_scale);
# 102 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/../lv_draw/lv_draw.h" 2
# 1 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/../lv_draw/lv_draw_triangle.h" 1
# 37 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/../lv_draw/lv_draw_triangle.h"
void lv_draw_triangle(const lv_point_t * points, const lv_area_t * mask, const lv_style_t * style, lv_opa_t opa_scale);
# 47 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/../lv_draw/lv_draw_triangle.h"
void lv_draw_polygon(const lv_point_t * points, uint32_t point_cnt, const lv_area_t * mask, const lv_style_t * style,
                     lv_opa_t opa_scale);
# 103 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/../lv_draw/lv_draw.h" 2
# 1 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/../lv_draw/lv_draw_arc.h" 1
# 41 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/../lv_draw/lv_draw_arc.h"
void lv_draw_arc(lv_coord_t center_x, lv_coord_t center_y, uint16_t radius, const lv_area_t * mask,
                 uint16_t start_angle, uint16_t end_angle, const lv_style_t * style, lv_opa_t opa_scale);
# 104 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/../lv_draw/lv_draw.h" 2
# 17 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/../lv_draw/lv_draw_img.h" 2
# 59 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/../lv_draw/lv_draw_img.h"
void lv_draw_img(const lv_area_t * coords, const lv_area_t * mask, const void * src, const lv_style_t * style,
                 lv_opa_t opa_scale);
# 70 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/../lv_draw/lv_draw_img.h"
lv_img_src_t lv_img_src_get_type(const void * src);
# 82 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/../lv_draw/lv_draw_img.h"
lv_color_t lv_img_buf_get_px_color(lv_img_dsc_t * dsc, lv_coord_t x, lv_coord_t y, const lv_style_t * style);







lv_opa_t lv_img_buf_get_px_alpha(lv_img_dsc_t * dsc, lv_coord_t x, lv_coord_t y);
# 99 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/../lv_draw/lv_draw_img.h"
void lv_img_buf_set_px_color(lv_img_dsc_t * dsc, lv_coord_t x, lv_coord_t y, lv_color_t c);
# 108 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/../lv_draw/lv_draw_img.h"
void lv_img_buf_set_px_alpha(lv_img_dsc_t * dsc, lv_coord_t x, lv_coord_t y, lv_opa_t opa);
# 120 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/../lv_draw/lv_draw_img.h"
void lv_img_buf_set_palette(lv_img_dsc_t * dsc, uint8_t id, lv_color_t c);






uint8_t lv_img_color_format_get_px_size(lv_img_cf_t cf);






_Bool lv_img_color_format_is_chroma_keyed(lv_img_cf_t cf);






_Bool lv_img_color_format_has_alpha(lv_img_cf_t cf);
# 150 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/../lv_draw/lv_draw_img.h"
lv_img_dsc_t *lv_img_buf_alloc(lv_coord_t w, lv_coord_t h, lv_img_cf_t cf);





void lv_img_buf_free(lv_img_dsc_t *dsc);
# 165 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/../lv_draw/lv_draw_img.h"
uint32_t lv_img_buf_get_img_size(lv_coord_t w, lv_coord_t h, lv_img_cf_t cf);
# 32 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_imgbtn.h" 2
# 41 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_imgbtn.h"
typedef struct
{
    lv_btn_ext_t btn;


    const void * img_src[_LV_BTN_STATE_NUM];





    lv_img_cf_t act_cf;
} lv_imgbtn_ext_t;


enum {
    LV_IMGBTN_STYLE_REL,
    LV_IMGBTN_STYLE_PR,
    LV_IMGBTN_STYLE_TGL_REL,
    LV_IMGBTN_STYLE_TGL_PR,
    LV_IMGBTN_STYLE_INA,
};
typedef uint8_t lv_imgbtn_style_t;
# 76 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_imgbtn.h"
lv_obj_t * lv_imgbtn_create(lv_obj_t * par, const lv_obj_t * copy);
# 93 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_imgbtn.h"
void lv_imgbtn_set_src(lv_obj_t * imgbtn, lv_btn_state_t state, const void * src);
# 116 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_imgbtn.h"
static inline void lv_imgbtn_set_toggle(lv_obj_t * imgbtn, _Bool tgl)
{
    lv_btn_set_toggle(imgbtn, tgl);
}






static inline void lv_imgbtn_set_state(lv_obj_t * imgbtn, lv_btn_state_t state)
{
    lv_btn_set_state(imgbtn, state);
}





static inline void lv_imgbtn_toggle(lv_obj_t * imgbtn)
{
    lv_btn_toggle(imgbtn);
}







void lv_imgbtn_set_style(lv_obj_t * imgbtn, lv_imgbtn_style_t type, const lv_style_t * style);
# 159 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_imgbtn.h"
const void * lv_imgbtn_get_src(lv_obj_t * imgbtn, lv_btn_state_t state);
# 193 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_imgbtn.h"
static inline lv_btn_state_t lv_imgbtn_get_state(const lv_obj_t * imgbtn)
{
    return lv_btn_get_state(imgbtn);
}






static inline _Bool lv_imgbtn_get_toggle(const lv_obj_t * imgbtn)
{
    return lv_btn_get_toggle(imgbtn);
}







const lv_style_t * lv_imgbtn_get_style(const lv_obj_t * imgbtn, lv_imgbtn_style_t type);
# 43 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/lvgl.h" 2
# 1 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_img.h" 1
# 25 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_img.h"
# 1 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/../lv_misc/lv_fs.h" 1
# 26 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_img.h" 2
# 1 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_label.h" 1
# 24 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_label.h"
# 1 "/usr/lib/gcc/arm-none-eabi/4.9.3/include/stdarg.h" 1 3 4
# 98 "/usr/lib/gcc/arm-none-eabi/4.9.3/include/stdarg.h" 3 4
typedef __gnuc_va_list va_list;
# 25 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_label.h" 2

# 1 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/../lv_font/lv_font.h" 1
# 27 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_label.h" 2
# 1 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/../lv_font/lv_symbol_def.h" 1
# 28 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_label.h" 2
# 1 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/../lv_misc/lv_txt.h" 1
# 29 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_label.h" 2
# 1 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/../lv_draw/lv_draw.h" 1
# 30 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_label.h" 2
# 38 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_label.h"
enum {ENUM_LV_LABEL_DOT_NUM = 3};
enum {ENUM_LV_LABEL_POS_LAST = 0xFFFF};
enum {ENUM_LV_LABEL_TEXT_SEL_OFF = (0xFFFF)};






enum {
    LV_LABEL_LONG_EXPAND,
    LV_LABEL_LONG_BREAK,

    LV_LABEL_LONG_DOT,
    LV_LABEL_LONG_SROLL,
    LV_LABEL_LONG_SROLL_CIRC,
    LV_LABEL_LONG_CROP,
};
typedef uint8_t lv_label_long_mode_t;


enum {
    LV_LABEL_ALIGN_LEFT,
    LV_LABEL_ALIGN_CENTER,
    LV_LABEL_ALIGN_RIGHT,
    LV_LABEL_ALIGN_AUTO,
};
typedef uint8_t lv_label_align_t;


typedef struct
{


    char * text;

    union
    {
        char * tmp_ptr;

        char tmp[3 + 1];
    } dot;
    uint16_t dot_end;
    lv_point_t offset;





    uint16_t anim_speed;



    uint16_t txt_sel_start;
    uint16_t txt_sel_end;


    lv_label_long_mode_t long_mode : 3;
    uint8_t static_txt : 1;
    uint8_t align : 2;
    uint8_t recolor : 1;
    uint8_t expand : 1;
    uint8_t body_draw : 1;
    uint8_t dot_tmp_alloc : 1;

} lv_label_ext_t;


enum {
    LV_LABEL_STYLE_MAIN,
};
typedef uint8_t lv_label_style_t;
# 121 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_label.h"
lv_obj_t * lv_label_create(lv_obj_t * par, const lv_obj_t * copy);
# 132 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_label.h"
void lv_label_set_text(lv_obj_t * label, const char * text);






void lv_label_set_text_fmt(lv_obj_t * label, const char * fmt, ...);
# 148 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_label.h"
void lv_label_set_array_text(lv_obj_t * label, const char * array, uint16_t size);







void lv_label_set_static_text(lv_obj_t * label, const char * text);
# 165 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_label.h"
void lv_label_set_long_mode(lv_obj_t * label, lv_label_long_mode_t long_mode);






void lv_label_set_align(lv_obj_t * label, lv_label_align_t align);






void lv_label_set_recolor(lv_obj_t * label, _Bool en);






void lv_label_set_body_draw(lv_obj_t * label, _Bool en);






void lv_label_set_anim_speed(lv_obj_t * label, uint16_t anim_speed);







static inline void lv_label_set_style(lv_obj_t * label, lv_label_style_t type, const lv_style_t * style)
{
    (void)type;
    lv_obj_set_style(label, style);
}






void lv_label_set_text_sel_start(lv_obj_t * label, uint16_t index);






void lv_label_set_text_sel_end(lv_obj_t * label, uint16_t index);
# 230 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_label.h"
char * lv_label_get_text(const lv_obj_t * label);






lv_label_long_mode_t lv_label_get_long_mode(const lv_obj_t * label);






lv_label_align_t lv_label_get_align(const lv_obj_t * label);






_Bool lv_label_get_recolor(const lv_obj_t * label);






_Bool lv_label_get_body_draw(const lv_obj_t * label);






uint16_t lv_label_get_anim_speed(const lv_obj_t * label);
# 274 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_label.h"
void lv_label_get_letter_pos(const lv_obj_t * label, uint16_t index, lv_point_t * pos);
# 283 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_label.h"
uint16_t lv_label_get_letter_on(const lv_obj_t * label, lv_point_t * pos);







_Bool lv_label_is_char_under_pos(const lv_obj_t * label, lv_point_t * pos);







static inline const lv_style_t * lv_label_get_style(const lv_obj_t * label, lv_label_style_t type)
{
    (void)type;
    return lv_obj_get_style(label);
}






uint16_t lv_label_get_text_sel_start(const lv_obj_t * label);






uint16_t lv_label_get_text_sel_end(const lv_obj_t * label);
# 330 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_label.h"
void lv_label_ins_text(lv_obj_t * label, uint32_t pos, const char * txt);
# 339 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_label.h"
void lv_label_cut_text(lv_obj_t * label, uint32_t pos, uint32_t cnt);
# 27 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_img.h" 2
# 37 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_img.h"
typedef struct
{


    const void * src;
    lv_point_t offset;
    lv_coord_t w;
    lv_coord_t h;
    uint8_t src_type : 2;
    uint8_t auto_size : 1;
    uint8_t cf : 5;
} lv_img_ext_t;


enum {
    LV_IMG_STYLE_MAIN,
};
typedef uint8_t lv_img_style_t;
# 66 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_img.h"
lv_obj_t * lv_img_create(lv_obj_t * par, const lv_obj_t * copy);
# 77 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_img.h"
void lv_img_set_src(lv_obj_t * img, const void * src_img);







void lv_img_set_auto_size(lv_obj_t * img, _Bool autosize_en);







void lv_img_set_offset_x(lv_obj_t * img, lv_coord_t x);







void lv_img_set_offset_y(lv_obj_t * img, lv_coord_t y);







static inline void lv_img_set_style(lv_obj_t * img, lv_img_style_t type, const lv_style_t * style)
{
    (void)type;
    lv_obj_set_style(img, style);
}
# 124 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_img.h"
const void * lv_img_get_src(lv_obj_t * img);






const char * lv_img_get_file_name(const lv_obj_t * img);






_Bool lv_img_get_auto_size(const lv_obj_t * img);






lv_coord_t lv_img_get_offset_x(lv_obj_t * img);






lv_coord_t lv_img_get_offset_y(lv_obj_t * img);







static inline const lv_style_t * lv_img_get_style(const lv_obj_t * img, lv_img_style_t type)
{
    (void)type;
    return lv_obj_get_style(img);
}
# 44 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/lvgl.h" 2
# 1 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_label.h" 1
# 45 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/lvgl.h" 2
# 1 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_line.h" 1
# 35 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_line.h"
typedef struct
{

    const lv_point_t * point_array;
    uint16_t point_num;
    uint8_t auto_size : 1;
    uint8_t y_inv : 1;
} lv_line_ext_t;


enum {
    LV_LINE_STYLE_MAIN,
};
typedef uint8_t lv_line_style_t;
# 59 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_line.h"
lv_obj_t * lv_line_create(lv_obj_t * par, const lv_obj_t * copy);
# 72 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_line.h"
void lv_line_set_points(lv_obj_t * line, const lv_point_t point_a[], uint16_t point_num);







void lv_line_set_auto_size(lv_obj_t * line, _Bool en);
# 89 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_line.h"
void lv_line_set_y_invert(lv_obj_t * line, _Bool en);
# 101 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_line.h"
static inline void lv_line_set_style(lv_obj_t * line, lv_line_style_t type, const lv_style_t * style)
{
    (void)type;
    lv_obj_set_style(line, style);
}
# 116 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_line.h"
_Bool lv_line_get_auto_size(const lv_obj_t * line);






_Bool lv_line_get_y_invert(const lv_obj_t * line);







static inline const lv_style_t * lv_line_get_style(const lv_obj_t * line, lv_line_style_t type)
{
    (void)type;
    return lv_obj_get_style(line);
}
# 46 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/lvgl.h" 2
# 1 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_page.h" 1
# 31 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_page.h"
# 1 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/../lv_misc/lv_anim.h" 1
# 32 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_page.h" 2
# 42 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_page.h"
enum {
    LV_SB_MODE_OFF = 0x0,
    LV_SB_MODE_ON = 0x1,
    LV_SB_MODE_DRAG = 0x2,
    LV_SB_MODE_AUTO = 0x3,
    LV_SB_MODE_HIDE = 0x4,
    LV_SB_MODE_UNHIDE = 0x5,
};
typedef uint8_t lv_sb_mode_t;


enum { LV_PAGE_EDGE_LEFT = 0x1, LV_PAGE_EDGE_TOP = 0x2, LV_PAGE_EDGE_RIGHT = 0x4, LV_PAGE_EDGE_BOTTOM = 0x8 };
typedef uint8_t lv_page_edge_t;


typedef struct
{
    lv_cont_ext_t bg;

    lv_obj_t * scrl;
    struct
    {
        const lv_style_t * style;
        lv_area_t hor_area;
        lv_area_t ver_area;
        uint8_t hor_draw : 1;
        uint8_t ver_draw : 1;
        lv_sb_mode_t mode : 3;
    } sb;

    struct
    {
        lv_anim_value_t state;
        const lv_style_t * style;
        uint8_t enabled : 1;
        uint8_t top_ip : 1;

        uint8_t bottom_ip : 1;

        uint8_t right_ip : 1;

        uint8_t left_ip : 1;

    } edge_flash;

    uint16_t anim_time;


    uint8_t scroll_prop : 1;
    uint8_t scroll_prop_ip : 1;
} lv_page_ext_t;

enum {
    LV_PAGE_STYLE_BG,
    LV_PAGE_STYLE_SCRL,
    LV_PAGE_STYLE_SB,
    LV_PAGE_STYLE_EDGE_FLASH,
};
typedef uint8_t lv_page_style_t;
# 112 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_page.h"
lv_obj_t * lv_page_create(lv_obj_t * par, const lv_obj_t * copy);





void lv_page_clean(lv_obj_t * page);






lv_obj_t * lv_page_get_scrl(const lv_obj_t * page);






uint16_t lv_page_get_anim_time(const lv_obj_t * page);
# 143 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_page.h"
void lv_page_set_sb_mode(lv_obj_t * page, lv_sb_mode_t sb_mode);






void lv_page_set_anim_time(lv_obj_t * page, uint16_t anim_time);







void lv_page_set_scroll_propagation(lv_obj_t * page, _Bool en);






void lv_page_set_edge_flash(lv_obj_t * page, _Bool en);
# 176 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_page.h"
static inline void lv_page_set_scrl_fit4(lv_obj_t * page, lv_fit_t left, lv_fit_t right, lv_fit_t top, lv_fit_t bottom)
{
    lv_cont_set_fit4(lv_page_get_scrl(page), left, right, top, bottom);
}
# 188 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_page.h"
static inline void lv_page_set_scrl_fit2(lv_obj_t * page, lv_fit_t hor, lv_fit_t ver)
{
    lv_cont_set_fit2(lv_page_get_scrl(page), hor, ver);
}







static inline void lv_page_set_scrl_fit(lv_obj_t * page, lv_fit_t fit)
{
    lv_cont_set_fit(lv_page_get_scrl(page), fit);
}






static inline void lv_page_set_scrl_width(lv_obj_t * page, lv_coord_t w)
{
    lv_obj_set_width(lv_page_get_scrl(page), w);
}






static inline void lv_page_set_scrl_height(lv_obj_t * page, lv_coord_t h)
{
    lv_obj_set_height(lv_page_get_scrl(page), h);
}






static inline void lv_page_set_scrl_layout(lv_obj_t * page, lv_layout_t layout)
{
    lv_cont_set_layout(lv_page_get_scrl(page), layout);
}







void lv_page_set_style(lv_obj_t * page, lv_page_style_t type, const lv_style_t * style);
# 251 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_page.h"
lv_sb_mode_t lv_page_get_sb_mode(const lv_obj_t * page);






_Bool lv_page_get_scroll_propagation(lv_obj_t * page);






_Bool lv_page_get_edge_flash(lv_obj_t * page);






lv_coord_t lv_page_get_fit_width(lv_obj_t * page);






lv_coord_t lv_page_get_fit_height(lv_obj_t * page);






static inline lv_coord_t lv_page_get_scrl_width(const lv_obj_t * page)
{
    return lv_obj_get_width(lv_page_get_scrl(page));
}






static inline lv_coord_t lv_page_get_scrl_height(const lv_obj_t * page)
{
    return lv_obj_get_height(lv_page_get_scrl(page));
}






static inline lv_layout_t lv_page_get_scrl_layout(const lv_obj_t * page)
{
    return lv_cont_get_layout(lv_page_get_scrl(page));
}






static inline lv_fit_t lv_page_get_scrl_fit_left(const lv_obj_t * page)
{
    return lv_cont_get_fit_left(lv_page_get_scrl(page));
}






static inline lv_fit_t lv_page_get_scrl_fit_right(const lv_obj_t * page)
{
    return lv_cont_get_fit_right(lv_page_get_scrl(page));
}






static inline lv_fit_t lv_page_get_scrl_fit_top(const lv_obj_t * page)
{
    return lv_cont_get_fit_top(lv_page_get_scrl(page));
}






static inline lv_fit_t lv_page_get_scrl_fit_bottom(const lv_obj_t * page)
{
    return lv_cont_get_fit_bottom(lv_page_get_scrl(page));
}







const lv_style_t * lv_page_get_style(const lv_obj_t * page, lv_page_style_t type);
# 369 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_page.h"
_Bool lv_page_on_edge(lv_obj_t * page, lv_page_edge_t edge);






void lv_page_glue_obj(lv_obj_t * obj, _Bool glue);







void lv_page_focus(lv_obj_t * page, const lv_obj_t * obj, lv_anim_enable_t anim_en);






void lv_page_scroll_hor(lv_obj_t * page, lv_coord_t dist);






void lv_page_scroll_ver(lv_obj_t * page, lv_coord_t dist);






void lv_page_start_edge_flash(lv_obj_t * page);
# 47 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/lvgl.h" 2
# 1 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_cont.h" 1
# 48 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/lvgl.h" 2
# 1 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_list.h" 1
# 38 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_list.h"
# 1 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_page.h" 1
# 39 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_list.h" 2


# 1 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_img.h" 1
# 42 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_list.h" 2
# 51 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_list.h"
typedef struct
{
    lv_page_ext_t page;

    const lv_style_t * styles_btn[_LV_BTN_STATE_NUM];
    const lv_style_t * style_img;
    uint16_t size;

    uint8_t single_mode : 1;


    lv_obj_t * last_sel;
    lv_obj_t * selected_btn;


    lv_obj_t * last_clicked_btn;

} lv_list_ext_t;


enum {
    LV_LIST_STYLE_BG,
    LV_LIST_STYLE_SCRL,
    LV_LIST_STYLE_SB,
    LV_LIST_STYLE_EDGE_FLASH,
    LV_LIST_STYLE_BTN_REL,
    LV_LIST_STYLE_BTN_PR,
    LV_LIST_STYLE_BTN_TGL_REL,
    LV_LIST_STYLE_BTN_TGL_PR,
    LV_LIST_STYLE_BTN_INA,
};
typedef uint8_t lv_list_style_t;
# 94 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_list.h"
lv_obj_t * lv_list_create(lv_obj_t * par, const lv_obj_t * copy);





void lv_list_clean(lv_obj_t * list);
# 113 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_list.h"
lv_obj_t * lv_list_add_btn(lv_obj_t * list, const void * img_src, const char * txt);
# 122 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_list.h"
_Bool lv_list_remove(const lv_obj_t * list, uint16_t index);
# 133 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_list.h"
void lv_list_set_single_mode(lv_obj_t * list, _Bool mode);
# 143 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_list.h"
void lv_list_set_btn_selected(lv_obj_t * list, lv_obj_t * btn);







static inline void lv_list_set_sb_mode(lv_obj_t * list, lv_sb_mode_t mode)
{
    lv_page_set_sb_mode(list, mode);
}







static inline void lv_list_set_scroll_propagation(lv_obj_t * list, _Bool en)
{
    lv_page_set_scroll_propagation(list, en);
}






static inline void lv_list_set_edge_flash(lv_obj_t * list, _Bool en)
{
    lv_page_set_edge_flash(list, en);
}






static inline void lv_list_set_anim_time(lv_obj_t * list, uint16_t anim_time)
{
    lv_page_set_anim_time(list, anim_time);
}







void lv_list_set_style(lv_obj_t * list, lv_list_style_t type, const lv_style_t * style);






void lv_list_set_layout(lv_obj_t * list, lv_layout_t layout);
# 210 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_list.h"
_Bool lv_list_get_single_mode(lv_obj_t * list);






const char * lv_list_get_btn_text(const lv_obj_t * btn);





lv_obj_t * lv_list_get_btn_label(const lv_obj_t * btn);






lv_obj_t * lv_list_get_btn_img(const lv_obj_t * btn);







lv_obj_t * lv_list_get_prev_btn(const lv_obj_t * list, lv_obj_t * prev_btn);







lv_obj_t * lv_list_get_next_btn(const lv_obj_t * list, lv_obj_t * prev_btn);







int32_t lv_list_get_btn_index(const lv_obj_t * list, const lv_obj_t * btn);






uint16_t lv_list_get_size(const lv_obj_t * list);







lv_obj_t * lv_list_get_btn_selected(const lv_obj_t * list);







lv_layout_t lv_list_get_layout(lv_obj_t * list);






static inline lv_sb_mode_t lv_list_get_sb_mode(const lv_obj_t * list)
{
    return lv_page_get_sb_mode(list);
}






static inline _Bool lv_list_get_scroll_propagation(lv_obj_t * list)
{
    return lv_page_get_scroll_propagation(list);
}






static inline _Bool lv_list_get_edge_flash(lv_obj_t * list)
{
    return lv_page_get_edge_flash(list);
}






static inline uint16_t lv_list_get_anim_time(const lv_obj_t * list)
{
    return lv_page_get_anim_time(list);
}







const lv_style_t * lv_list_get_style(const lv_obj_t * list, lv_list_style_t type);
# 335 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_list.h"
void lv_list_up(const lv_obj_t * list);




void lv_list_down(const lv_obj_t * list);






void lv_list_focus(const lv_obj_t * btn, lv_anim_enable_t anim);
# 49 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/lvgl.h" 2
# 1 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_chart.h" 1
# 25 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_chart.h"
# 1 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_line.h" 1
# 26 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_chart.h" 2
# 37 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_chart.h"
enum {ENUM_LV_CHART_POINT_DEF = ((-((lv_coord_t)((uint32_t)((uint32_t)1 << (8 * sizeof(lv_coord_t) - 1)) - 1000))))};
enum {ENUM_LV_CHART_TICK_LENGTH_AUTO = 255};






enum {
    LV_CHART_TYPE_NONE = 0x00,
    LV_CHART_TYPE_LINE = 0x01,
    LV_CHART_TYPE_COLUMN = 0x02,
    LV_CHART_TYPE_POINT = 0x04,
    LV_CHART_TYPE_VERTICAL_LINE = 0x08,
    LV_CHART_TYPE_AREA = 0x10,
};
typedef uint8_t lv_chart_type_t;


enum {
    LV_CHART_UPDATE_MODE_SHIFT,
    LV_CHART_UPDATE_MODE_CIRCULAR,
};
typedef uint8_t lv_chart_update_mode_t;

typedef struct
{
    lv_coord_t * points;
    lv_color_t color;
    uint16_t start_point;
} lv_chart_series_t;


enum {
    LV_CHART_AXIS_SKIP_LAST_TICK = 0x00,
    LV_CHART_AXIS_DRAW_LAST_TICK = 0x01,
    LV_CHART_AXIS_INVERSE_LABELS_ORDER = 0x02
};
typedef uint8_t lv_chart_axis_options_t;

typedef struct
{
    const char * list_of_values;
    lv_chart_axis_options_t options;
    uint8_t num_tick_marks;
    uint8_t major_tick_len;
    uint8_t minor_tick_len;
} lv_chart_axis_cfg_t;


typedef struct
{


    lv_ll_t series_ll;
    lv_coord_t ymin;
    lv_coord_t ymax;
    uint8_t hdiv_cnt;
    uint8_t vdiv_cnt;
    uint16_t point_cnt;
    lv_chart_type_t type;
    lv_chart_axis_cfg_t y_axis;
    lv_chart_axis_cfg_t x_axis;
    lv_chart_axis_cfg_t secondary_y_axis;
    uint16_t margin;
    uint8_t update_mode : 1;
    struct
    {
        lv_coord_t width;
        uint8_t num;
        lv_opa_t opa;
        lv_opa_t dark;
    } series;
} lv_chart_ext_t;

enum {
    LV_CHART_STYLE_MAIN,
};
typedef uint8_t lv_chart_style_t;
# 128 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_chart.h"
lv_obj_t * lv_chart_create(lv_obj_t * par, const lv_obj_t * copy);
# 140 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_chart.h"
lv_chart_series_t * lv_chart_add_series(lv_obj_t * chart, lv_color_t color);






void lv_chart_clear_serie(lv_obj_t * chart, lv_chart_series_t * serie);
# 159 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_chart.h"
void lv_chart_set_div_line_count(lv_obj_t * chart, uint8_t hdiv, uint8_t vdiv);







void lv_chart_set_range(lv_obj_t * chart, lv_coord_t ymin, lv_coord_t ymax);






void lv_chart_set_type(lv_obj_t * chart, lv_chart_type_t type);






void lv_chart_set_point_count(lv_obj_t * chart, uint16_t point_cnt);






void lv_chart_set_series_opa(lv_obj_t * chart, lv_opa_t opa);






void lv_chart_set_series_width(lv_obj_t * chart, lv_coord_t width);






void lv_chart_set_series_darking(lv_obj_t * chart, lv_opa_t dark_eff);







void lv_chart_init_points(lv_obj_t * chart, lv_chart_series_t * ser, lv_coord_t y);







void lv_chart_set_points(lv_obj_t * chart, lv_chart_series_t * ser, lv_coord_t y_array[]);







void lv_chart_set_next(lv_obj_t * chart, lv_chart_series_t * ser, lv_coord_t y);






void lv_chart_set_update_mode(lv_obj_t * chart, lv_chart_update_mode_t update_mode);







static inline void lv_chart_set_style(lv_obj_t * chart, lv_chart_style_t type, const lv_style_t * style)
{
    (void)type;
    lv_obj_set_style(chart, style);
}
# 255 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_chart.h"
void lv_chart_set_x_tick_length(lv_obj_t * chart, uint8_t major_tick_len, uint8_t minor_tick_len);
# 265 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_chart.h"
void lv_chart_set_y_tick_length(lv_obj_t * chart, uint8_t major_tick_len, uint8_t minor_tick_len);
# 275 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_chart.h"
void lv_chart_set_secondary_y_tick_length(lv_obj_t * chart, uint8_t major_tick_len, uint8_t minor_tick_len);
# 285 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_chart.h"
void lv_chart_set_x_tick_texts(lv_obj_t * chart, const char * list_of_values, uint8_t num_tick_marks,
                               lv_chart_axis_options_t options);
# 296 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_chart.h"
void lv_chart_set_secondary_y_tick_texts(lv_obj_t * chart, const char * list_of_values, uint8_t num_tick_marks,
                                        lv_chart_axis_options_t options);
# 307 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_chart.h"
void lv_chart_set_y_tick_texts(lv_obj_t * chart, const char * list_of_values, uint8_t num_tick_marks,
                               lv_chart_axis_options_t options);






void lv_chart_set_margin(lv_obj_t * chart, uint16_t margin);
# 326 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_chart.h"
lv_chart_type_t lv_chart_get_type(const lv_obj_t * chart);






uint16_t lv_chart_get_point_cnt(const lv_obj_t * chart);






lv_opa_t lv_chart_get_series_opa(const lv_obj_t * chart);






lv_coord_t lv_chart_get_series_width(const lv_obj_t * chart);






lv_opa_t lv_chart_get_series_darking(const lv_obj_t * chart);







static inline const lv_style_t * lv_chart_get_style(const lv_obj_t * chart, lv_chart_style_t type)
{
    (void)type;
    return lv_obj_get_style(chart);
}






uint16_t lv_chart_get_margin(lv_obj_t * chart);
# 383 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_chart.h"
void lv_chart_refresh(lv_obj_t * chart);
# 50 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/lvgl.h" 2
# 1 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_table.h" 1
# 49 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_table.h"
typedef union
{
    struct
    {
        uint8_t align : 2;
        uint8_t right_merge : 1;
        uint8_t type : 2;
        uint8_t crop : 1;
    } s;
    uint8_t format_byte;
} lv_table_cell_format_t;


typedef struct
{

    uint16_t col_cnt;
    uint16_t row_cnt;
    char ** cell_data;
    const lv_style_t * cell_style[4];
    lv_coord_t col_w[12];
} lv_table_ext_t;


enum {
    LV_TABLE_STYLE_BG,
    LV_TABLE_STYLE_CELL1,
    LV_TABLE_STYLE_CELL2,
    LV_TABLE_STYLE_CELL3,
    LV_TABLE_STYLE_CELL4,
};
typedef uint8_t lv_table_style_t;
# 92 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_table.h"
lv_obj_t * lv_table_create(lv_obj_t * par, const lv_obj_t * copy);
# 106 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_table.h"
void lv_table_set_cell_value(lv_obj_t * table, uint16_t row, uint16_t col, const char * txt);






void lv_table_set_row_cnt(lv_obj_t * table, uint16_t row_cnt);






void lv_table_set_col_cnt(lv_obj_t * table, uint16_t col_cnt);







void lv_table_set_col_width(lv_obj_t * table, uint16_t col_id, lv_coord_t w);
# 137 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_table.h"
void lv_table_set_cell_align(lv_obj_t * table, uint16_t row, uint16_t col, lv_label_align_t align);
# 146 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_table.h"
void lv_table_set_cell_type(lv_obj_t * table, uint16_t row, uint16_t col, uint8_t type);
# 155 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_table.h"
void lv_table_set_cell_crop(lv_obj_t * table, uint16_t row, uint16_t col, _Bool crop);
# 164 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_table.h"
void lv_table_set_cell_merge_right(lv_obj_t * table, uint16_t row, uint16_t col, _Bool en);







void lv_table_set_style(lv_obj_t * table, lv_table_style_t type, const lv_style_t * style);
# 185 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_table.h"
const char * lv_table_get_cell_value(lv_obj_t * table, uint16_t row, uint16_t col);






uint16_t lv_table_get_row_cnt(lv_obj_t * table);






uint16_t lv_table_get_col_cnt(lv_obj_t * table);







lv_coord_t lv_table_get_col_width(lv_obj_t * table, uint16_t col_id);
# 217 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_table.h"
lv_label_align_t lv_table_get_cell_align(lv_obj_t * table, uint16_t row, uint16_t col);
# 226 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_table.h"
lv_label_align_t lv_table_get_cell_type(lv_obj_t * table, uint16_t row, uint16_t col);
# 235 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_table.h"
lv_label_align_t lv_table_get_cell_crop(lv_obj_t * table, uint16_t row, uint16_t col);
# 244 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_table.h"
_Bool lv_table_get_cell_merge_right(lv_obj_t * table, uint16_t row, uint16_t col);







const lv_style_t * lv_table_get_style(const lv_obj_t * table, lv_table_style_t type);
# 51 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/lvgl.h" 2
# 1 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_cb.h" 1
# 46 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_cb.h"
typedef struct
{
    lv_btn_ext_t bg_btn;

    lv_obj_t * bullet;
    lv_obj_t * label;
} lv_cb_ext_t;


enum {
    LV_CB_STYLE_BG,
    LV_CB_STYLE_BOX_REL,
    LV_CB_STYLE_BOX_PR,
    LV_CB_STYLE_BOX_TGL_REL,
    LV_CB_STYLE_BOX_TGL_PR,
    LV_CB_STYLE_BOX_INA,
};
typedef uint8_t lv_cb_style_t;
# 75 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_cb.h"
lv_obj_t * lv_cb_create(lv_obj_t * par, const lv_obj_t * copy);
# 87 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_cb.h"
void lv_cb_set_text(lv_obj_t * cb, const char * txt);







void lv_cb_set_static_text(lv_obj_t * cb, const char * txt);






static inline void lv_cb_set_checked(lv_obj_t * cb, _Bool checked)
{
    lv_btn_set_state(cb, checked ? LV_BTN_STATE_TGL_REL : LV_BTN_STATE_REL);
}





static inline void lv_cb_set_inactive(lv_obj_t * cb)
{
    lv_btn_set_state(cb, LV_BTN_STATE_INA);
}







void lv_cb_set_style(lv_obj_t * cb, lv_cb_style_t type, const lv_style_t * style);
# 133 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_cb.h"
const char * lv_cb_get_text(const lv_obj_t * cb);






static inline _Bool lv_cb_is_checked(const lv_obj_t * cb)
{
    return lv_btn_get_state(cb) == LV_BTN_STATE_REL ? 0 : 1;
}






static inline _Bool lv_cb_is_inactive(const lv_obj_t * cb)
{
    return lv_btn_get_state(cb) == LV_BTN_STATE_INA ? 1 :0;
}







const lv_style_t * lv_cb_get_style(const lv_obj_t * cb, lv_cb_style_t type);
# 52 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/lvgl.h" 2
# 1 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_cpicker.h" 1
# 34 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_cpicker.h"
enum {
    LV_CPICKER_TYPE_RECT,
    LV_CPICKER_TYPE_DISC,
};
typedef uint8_t lv_cpicker_type_t;

enum {
    LV_CPICKER_COLOR_MODE_HUE,
    LV_CPICKER_COLOR_MODE_SATURATION,
    LV_CPICKER_COLOR_MODE_VALUE
};
typedef uint8_t lv_cpicker_color_mode_t;




typedef struct {
    lv_color_hsv_t hsv;
    struct {
        lv_style_t * style;
        lv_point_t pos;
        uint8_t colored :1;

    } indic;
    uint32_t last_click_time;
    uint32_t last_change_time;
    lv_point_t last_press_point;
    lv_cpicker_color_mode_t color_mode :2;
    uint8_t color_mode_fixed :1;
    lv_cpicker_type_t type :1;
    uint8_t preview :1;
} lv_cpicker_ext_t;


enum {
    LV_CPICKER_STYLE_MAIN,
    LV_CPICKER_STYLE_INDICATOR,
};
typedef uint8_t lv_cpicker_style_t;
# 85 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_cpicker.h"
lv_obj_t * lv_cpicker_create(lv_obj_t * par, const lv_obj_t * copy);
# 96 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_cpicker.h"
void lv_cpicker_set_type(lv_obj_t * cpicker, lv_cpicker_type_t type);







void lv_cpicker_set_style(lv_obj_t * cpicker, lv_cpicker_style_t type, lv_style_t *style);







_Bool lv_cpicker_set_hue(lv_obj_t * cpicker, uint16_t hue);







_Bool lv_cpicker_set_saturation(lv_obj_t * cpicker, uint8_t saturation);







_Bool lv_cpicker_set_value(lv_obj_t * cpicker, uint8_t val);







_Bool lv_cpicker_set_hsv(lv_obj_t * cpicker, lv_color_hsv_t hsv);







_Bool lv_cpicker_set_color(lv_obj_t * cpicker, lv_color_t color);






void lv_cpicker_set_color_mode(lv_obj_t * cpicker, lv_cpicker_color_mode_t mode);






void lv_cpicker_set_color_mode_fixed(lv_obj_t * cpicker, _Bool fixed);






void lv_cpicker_set_indic_colored(lv_obj_t * cpicker, _Bool en);






void lv_cpicker_set_preview(lv_obj_t * cpicker, _Bool en);
# 183 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_cpicker.h"
lv_cpicker_color_mode_t lv_cpicker_get_color_mode(lv_obj_t * cpicker);






_Bool lv_cpicker_get_color_mode_fixed(lv_obj_t * cpicker);







const lv_style_t * lv_cpicker_get_style(const lv_obj_t * cpicker, lv_cpicker_style_t type);






uint16_t lv_cpicker_get_hue(lv_obj_t * cpicker);






uint8_t lv_cpicker_get_saturation(lv_obj_t * cpicker);






uint8_t lv_cpicker_get_value(lv_obj_t * cpicker);






lv_color_hsv_t lv_cpicker_get_hsv(lv_obj_t * cpicker);






lv_color_t lv_cpicker_get_color(lv_obj_t * cpicker);






_Bool lv_cpicker_get_indic_colored(lv_obj_t * cpicker);






_Bool lv_cpicker_get_preview(lv_obj_t * cpicker);
# 53 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/lvgl.h" 2
# 1 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_bar.h" 1
# 46 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_bar.h"
enum {ENUM_LV_BAR_ANIM_STATE_START = 0};
enum {ENUM_LV_BAR_ANIM_STATE_END = 256};
enum {ENUM_LV_BAR_ANIM_STATE_INV = -1};
enum {ENUM_LV_BAR_ANIM_STATE_NORM = 8};






typedef struct
{



    int16_t cur_value;
    int16_t min_value;
    int16_t max_value;

    lv_anim_value_t anim_start;
    lv_anim_value_t anim_end;
    lv_anim_value_t anim_state;
    lv_anim_value_t anim_time;

    uint8_t sym : 1;
    const lv_style_t * style_indic;
} lv_bar_ext_t;


enum {
    LV_BAR_STYLE_BG,
    LV_BAR_STYLE_INDIC,
};
typedef uint8_t lv_bar_style_t;
# 91 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_bar.h"
lv_obj_t * lv_bar_create(lv_obj_t * par, const lv_obj_t * copy);
# 103 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_bar.h"
void lv_bar_set_value(lv_obj_t * bar, int16_t value, lv_anim_enable_t anim);







void lv_bar_set_range(lv_obj_t * bar, int16_t min, int16_t max);







void lv_bar_set_sym(lv_obj_t * bar, _Bool en);






void lv_bar_set_anim_time(lv_obj_t * bar, uint16_t anim_time);







void lv_bar_set_style(lv_obj_t * bar, lv_bar_style_t type, const lv_style_t * style);
# 145 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_bar.h"
int16_t lv_bar_get_value(const lv_obj_t * bar);






int16_t lv_bar_get_min_value(const lv_obj_t * bar);






int16_t lv_bar_get_max_value(const lv_obj_t * bar);






_Bool lv_bar_get_sym(lv_obj_t * bar);






uint16_t lv_bar_get_anim_time(lv_obj_t * bar);







const lv_style_t * lv_bar_get_style(const lv_obj_t * bar, lv_bar_style_t type);
# 54 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/lvgl.h" 2
# 1 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_slider.h" 1
# 30 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_slider.h"
# 1 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_bar.h" 1
# 31 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_slider.h" 2
# 40 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_slider.h"
typedef struct
{
    lv_bar_ext_t bar;

    const lv_style_t * style_knob;
    int16_t drag_value;
    uint8_t knob_in : 1;
} lv_slider_ext_t;


enum {
    LV_SLIDER_STYLE_BG,
    LV_SLIDER_STYLE_INDIC,
    LV_SLIDER_STYLE_KNOB,
};
typedef uint8_t lv_slider_style_t;
# 67 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_slider.h"
lv_obj_t * lv_slider_create(lv_obj_t * par, const lv_obj_t * copy);
# 79 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_slider.h"
static inline void lv_slider_set_value(lv_obj_t * slider, int16_t value, lv_anim_enable_t anim)
{
    lv_bar_set_value(slider, value, anim);
}







static inline void lv_slider_set_range(lv_obj_t * slider, int16_t min, int16_t max)
{
    lv_bar_set_range(slider, min, max);
}







static inline void lv_slider_set_anim_time(lv_obj_t * slider, uint16_t anim_time)
{
    lv_bar_set_anim_time(slider, anim_time);
}






static inline void lv_slider_set_sym(lv_obj_t * slider, _Bool en)
{
    lv_bar_set_sym(slider, en);
}







void lv_slider_set_knob_in(lv_obj_t * slider, _Bool in);







void lv_slider_set_style(lv_obj_t * slider, lv_slider_style_t type, const lv_style_t * style);
# 141 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_slider.h"
int16_t lv_slider_get_value(const lv_obj_t * slider);






static inline int16_t lv_slider_get_min_value(const lv_obj_t * slider)
{
    return lv_bar_get_min_value(slider);
}






static inline int16_t lv_slider_get_max_value(const lv_obj_t * slider)
{
    return lv_bar_get_max_value(slider);
}






_Bool lv_slider_is_dragged(const lv_obj_t * slider);






static inline uint16_t lv_slider_get_anim_time(lv_obj_t * slider)
{
    return lv_bar_get_anim_time(slider);
}






static inline _Bool lv_slider_get_sym(lv_obj_t * slider)
{
    return lv_bar_get_sym(slider);
}







_Bool lv_slider_get_knob_in(const lv_obj_t * slider);







const lv_style_t * lv_slider_get_style(const lv_obj_t * slider, lv_slider_style_t type);
# 55 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/lvgl.h" 2
# 1 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_led.h" 1
# 35 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_led.h"
typedef struct
{


    uint8_t bright;
} lv_led_ext_t;


enum {
    LV_LED_STYLE_MAIN,
};
typedef uint8_t lv_led_style_t;
# 58 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_led.h"
lv_obj_t * lv_led_create(lv_obj_t * par, const lv_obj_t * copy);






void lv_led_set_bright(lv_obj_t * led, uint8_t bright);





void lv_led_on(lv_obj_t * led);





void lv_led_off(lv_obj_t * led);





void lv_led_toggle(lv_obj_t * led);







static inline void lv_led_set_style(lv_obj_t * led, lv_led_style_t type, const lv_style_t * style)
{
    (void)type;
    lv_obj_set_style(led, style);
}






uint8_t lv_led_get_bright(const lv_obj_t * led);







static inline const lv_style_t * lv_led_get_style(const lv_obj_t * led, lv_led_style_t type)
{
    (void)type;
    return lv_obj_get_style(led);
}
# 56 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/lvgl.h" 2
# 1 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_btnm.h" 1
# 34 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_btnm.h"
enum {ENUM_LV_BTNM_BTN_NONE = 0xFFFF};






enum {
    LV_BTNM_CTRL_HIDDEN = 0x0008,
    LV_BTNM_CTRL_NO_REPEAT = 0x0010,
    LV_BTNM_CTRL_INACTIVE = 0x0020,
    LV_BTNM_CTRL_TGL_ENABLE = 0x0040,
    LV_BTNM_CTRL_TGL_STATE = 0x0080,
    LV_BTNM_CTRL_CLICK_TRIG = 0x0100,
};
typedef uint16_t lv_btnm_ctrl_t;


typedef struct
{


    const char ** map_p;
    lv_area_t * button_areas;
    lv_btnm_ctrl_t * ctrl_bits;
    const lv_style_t * styles_btn[_LV_BTN_STATE_NUM];
    uint16_t btn_cnt;
    uint16_t btn_id_pr;
    uint16_t btn_id_act;
    uint8_t recolor : 1;
    uint8_t one_toggle : 1;
} lv_btnm_ext_t;

enum {
    LV_BTNM_STYLE_BG,
    LV_BTNM_STYLE_BTN_REL,
    LV_BTNM_STYLE_BTN_PR,
    LV_BTNM_STYLE_BTN_TGL_REL,
    LV_BTNM_STYLE_BTN_TGL_PR,
    LV_BTNM_STYLE_BTN_INA,
};
typedef uint8_t lv_btnm_style_t;
# 88 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_btnm.h"
lv_obj_t * lv_btnm_create(lv_obj_t * par, const lv_obj_t * copy);
# 101 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_btnm.h"
void lv_btnm_set_map(const lv_obj_t * btnm, const char * map[]);
# 115 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_btnm.h"
void lv_btnm_set_ctrl_map(const lv_obj_t * btnm, const lv_btnm_ctrl_t ctrl_map[]);







void lv_btnm_set_pressed(const lv_obj_t * btnm, uint16_t id);







void lv_btnm_set_style(lv_obj_t * btnm, lv_btnm_style_t type, const lv_style_t * style);






void lv_btnm_set_recolor(const lv_obj_t * btnm, _Bool en);






void lv_btnm_set_btn_ctrl(const lv_obj_t * btnm, uint16_t btn_id, lv_btnm_ctrl_t ctrl);






void lv_btnm_clear_btn_ctrl(const lv_obj_t * btnm, uint16_t btn_id, lv_btnm_ctrl_t ctrl);






void lv_btnm_set_btn_ctrl_all(lv_obj_t * btnm, lv_btnm_ctrl_t ctrl);







void lv_btnm_clear_btn_ctrl_all(lv_obj_t * btnm, lv_btnm_ctrl_t ctrl);
# 178 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_btnm.h"
void lv_btnm_set_btn_width(const lv_obj_t * btnm, uint16_t btn_id, uint8_t width);
# 189 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_btnm.h"
void lv_btnm_set_one_toggle(lv_obj_t * btnm, _Bool one_toggle);
# 200 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_btnm.h"
const char ** lv_btnm_get_map_array(const lv_obj_t * btnm);






_Bool lv_btnm_get_recolor(const lv_obj_t * btnm);







uint16_t lv_btnm_get_active_btn(const lv_obj_t * btnm);







const char * lv_btnm_get_active_btn_text(const lv_obj_t * btnm);







uint16_t lv_btnm_get_pressed_btn(const lv_obj_t * btnm);
# 240 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_btnm.h"
const char * lv_btnm_get_btn_text(const lv_obj_t * btnm, uint16_t btn_id);
# 250 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_btnm.h"
_Bool lv_btnm_get_btn_ctrl(lv_obj_t * btnm, uint16_t btn_id, lv_btnm_ctrl_t ctrl);







const lv_style_t * lv_btnm_get_style(const lv_obj_t * btnm, lv_btnm_style_t type);






_Bool lv_btnm_get_one_toggle(const lv_obj_t * btnm);
# 57 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/lvgl.h" 2
# 1 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_kb.h" 1
# 34 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_kb.h"
# 1 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_btnm.h" 1
# 35 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_kb.h" 2
# 45 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_kb.h"
enum {
    LV_KB_MODE_TEXT,
    LV_KB_MODE_NUM,
    LV_KB_MODE_TEXT_UPPER,
};
typedef uint8_t lv_kb_mode_t;


typedef struct
{
    lv_btnm_ext_t btnm;

    lv_obj_t * ta;
    lv_kb_mode_t mode;
    uint8_t cursor_mng : 1;
} lv_kb_ext_t;

enum {
    LV_KB_STYLE_BG,
    LV_KB_STYLE_BTN_REL,
    LV_KB_STYLE_BTN_PR,
    LV_KB_STYLE_BTN_TGL_REL,
    LV_KB_STYLE_BTN_TGL_PR,
    LV_KB_STYLE_BTN_INA,
};
typedef uint8_t lv_kb_style_t;
# 82 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_kb.h"
lv_obj_t * lv_kb_create(lv_obj_t * par, const lv_obj_t * copy);
# 93 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_kb.h"
void lv_kb_set_ta(lv_obj_t * kb, lv_obj_t * ta);






void lv_kb_set_mode(lv_obj_t * kb, lv_kb_mode_t mode);






void lv_kb_set_cursor_manage(lv_obj_t * kb, _Bool en);







static inline void lv_kb_set_map(lv_obj_t * kb, const char * map[])
{
    lv_btnm_set_map(kb, map);
}
# 128 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_kb.h"
static inline void lv_kb_set_ctrl_map(lv_obj_t * kb, const lv_btnm_ctrl_t ctrl_map[])
{
    lv_btnm_set_ctrl_map(kb, ctrl_map);
}







void lv_kb_set_style(lv_obj_t * kb, lv_kb_style_t type, const lv_style_t * style);
# 150 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_kb.h"
lv_obj_t * lv_kb_get_ta(const lv_obj_t * kb);






lv_kb_mode_t lv_kb_get_mode(const lv_obj_t * kb);






_Bool lv_kb_get_cursor_manage(const lv_obj_t * kb);






static inline const char ** lv_kb_get_map_array(const lv_obj_t * kb)
{
    return lv_btnm_get_map_array(kb);
}







const lv_style_t * lv_kb_get_style(const lv_obj_t * kb, lv_kb_style_t type);
# 195 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_kb.h"
void lv_kb_def_event_cb(lv_obj_t * kb, lv_event_t event);
# 58 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/lvgl.h" 2
# 1 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_ddlist.h" 1
# 34 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_ddlist.h"
# 1 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/../lv_objx/lv_page.h" 1
# 35 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_ddlist.h" 2
# 1 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/../lv_objx/lv_label.h" 1
# 36 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_ddlist.h" 2
# 45 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_ddlist.h"
typedef struct
{
    lv_page_ext_t page;

    lv_obj_t * label;
    const lv_style_t * sel_style;
    uint16_t option_cnt;
    uint16_t sel_opt_id;
    uint16_t sel_opt_id_ori;
    uint8_t opened : 1;
    uint8_t force_sel : 1;
    uint8_t draw_arrow : 1;
    uint8_t stay_open : 1;
    lv_coord_t fix_height;
} lv_ddlist_ext_t;

enum {
    LV_DDLIST_STYLE_BG,
    LV_DDLIST_STYLE_SEL,
    LV_DDLIST_STYLE_SB,
};
typedef uint8_t lv_ddlist_style_t;
# 78 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_ddlist.h"
lv_obj_t * lv_ddlist_create(lv_obj_t * par, const lv_obj_t * copy);
# 89 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_ddlist.h"
void lv_ddlist_set_options(lv_obj_t * ddlist, const char * options);






void lv_ddlist_set_selected(lv_obj_t * ddlist, uint16_t sel_opt);







void lv_ddlist_set_fix_height(lv_obj_t * ddlist, lv_coord_t h);






void lv_ddlist_set_fix_width(lv_obj_t * ddlist, lv_coord_t w);






void lv_ddlist_set_draw_arrow(lv_obj_t * ddlist, _Bool en);






void lv_ddlist_set_stay_open(lv_obj_t * ddlist, _Bool en);






static inline void lv_ddlist_set_sb_mode(lv_obj_t * ddlist, lv_sb_mode_t mode)
{
    lv_page_set_sb_mode(ddlist, mode);
}





static inline void lv_ddlist_set_anim_time(lv_obj_t * ddlist, uint16_t anim_time)
{
    lv_page_set_anim_time(ddlist, anim_time);
}







void lv_ddlist_set_style(lv_obj_t * ddlist, lv_ddlist_style_t type, const lv_style_t * style);






void lv_ddlist_set_align(lv_obj_t * ddlist, lv_label_align_t align);
# 170 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_ddlist.h"
const char * lv_ddlist_get_options(const lv_obj_t * ddlist);






uint16_t lv_ddlist_get_selected(const lv_obj_t * ddlist);







void lv_ddlist_get_selected_str(const lv_obj_t * ddlist, char * buf, uint16_t buf_size);






lv_coord_t lv_ddlist_get_fix_height(const lv_obj_t * ddlist);





_Bool lv_ddlist_get_draw_arrow(lv_obj_t * ddlist);





_Bool lv_ddlist_get_stay_open(lv_obj_t * ddlist);






static inline lv_sb_mode_t lv_ddlist_get_sb_mode(const lv_obj_t * ddlist)
{
    return lv_page_get_sb_mode(ddlist);
}






static inline uint16_t lv_ddlist_get_anim_time(const lv_obj_t * ddlist)
{
    return lv_page_get_anim_time(ddlist);
}







const lv_style_t * lv_ddlist_get_style(const lv_obj_t * ddlist, lv_ddlist_style_t type);






lv_label_align_t lv_ddlist_get_align(const lv_obj_t * ddlist);
# 250 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_ddlist.h"
void lv_ddlist_open(lv_obj_t * ddlist, lv_anim_enable_t anim);






void lv_ddlist_close(lv_obj_t * ddlist, lv_anim_enable_t anim);
# 59 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/lvgl.h" 2
# 1 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_roller.h" 1
# 30 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_roller.h"
# 1 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_ddlist.h" 1
# 31 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_roller.h" 2
# 42 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_roller.h"
enum {
    LV_ROLLER_MODE_NORMAL,
    LV_ROLLER_MODE_INIFINITE,
};

typedef uint8_t lv_roller_mode_t;




typedef struct
{
    lv_ddlist_ext_t ddlist;

    lv_roller_mode_t mode : 1;
} lv_roller_ext_t;

enum {
    LV_ROLLER_STYLE_BG,
    LV_ROLLER_STYLE_SEL,
};
typedef uint8_t lv_roller_style_t;
# 75 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_roller.h"
lv_obj_t * lv_roller_create(lv_obj_t * par, const lv_obj_t * copy);
# 87 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_roller.h"
void lv_roller_set_options(lv_obj_t * roller, const char * options, lv_roller_mode_t mode);






void lv_roller_set_align(lv_obj_t * roller, lv_label_align_t align);







void lv_roller_set_selected(lv_obj_t * roller, uint16_t sel_opt, lv_anim_enable_t anim);






void lv_roller_set_visible_row_count(lv_obj_t * roller, uint8_t row_cnt);






static inline void lv_roller_set_fix_width(lv_obj_t * roller, lv_coord_t w)
{
    lv_ddlist_set_fix_width(roller, w);
}






static inline void lv_roller_set_anim_time(lv_obj_t * roller, uint16_t anim_time)
{
    lv_ddlist_set_anim_time(roller, anim_time);
}







void lv_roller_set_style(lv_obj_t * roller, lv_roller_style_t type, const lv_style_t * style);
# 147 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_roller.h"
uint16_t lv_roller_get_selected(const lv_obj_t * roller);







static inline void lv_roller_get_selected_str(const lv_obj_t * roller, char * buf, uint16_t buf_size)
{
    lv_ddlist_get_selected_str(roller, buf, buf_size);
}






lv_label_align_t lv_roller_get_align(const lv_obj_t * roller);






static inline const char * lv_roller_get_options(const lv_obj_t * roller)
{
    return lv_ddlist_get_options(roller);
}






static inline uint16_t lv_roller_get_anim_time(const lv_obj_t * roller)
{
    return lv_ddlist_get_anim_time(roller);
}






_Bool lv_roller_get_hor_fit(const lv_obj_t * roller);







const lv_style_t * lv_roller_get_style(const lv_obj_t * roller, lv_roller_style_t type);
# 60 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/lvgl.h" 2
# 1 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_ta.h" 1
# 42 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_ta.h"
enum {ENUM_LV_TA_CURSOR_LAST = (0x7FFF)};






enum {
    LV_CURSOR_NONE,
    LV_CURSOR_LINE,
    LV_CURSOR_BLOCK,
    LV_CURSOR_OUTLINE,
    LV_CURSOR_UNDERLINE,
    LV_CURSOR_HIDDEN = 0x08,
};
typedef uint8_t lv_cursor_type_t;


typedef struct
{
    lv_page_ext_t page;

    lv_obj_t * label;
    lv_obj_t * placeholder;
    char * pwd_tmp;
    const char * accapted_chars;
    uint16_t max_length;
    uint16_t pwd_show_time;
    struct
    {
        const lv_style_t * style;
        lv_coord_t valid_x;

        uint16_t pos;

        uint16_t blink_time;
        lv_area_t area;
        uint16_t txt_byte_pos;
        lv_cursor_type_t type : 4;
        uint8_t state : 1;
        uint8_t click_pos : 1;
    } cursor;

    lv_draw_label_txt_sel_t sel;
    uint8_t text_sel_in_prog : 1;
    uint8_t text_sel_en : 1;

    uint8_t pwd_mode : 1;
    uint8_t one_line : 1;
} lv_ta_ext_t;


enum {
    LV_TA_STYLE_BG,
    LV_TA_STYLE_SB,
    LV_TA_STYLE_CURSOR,
    LV_TA_STYLE_EDGE_FLASH,
    LV_TA_STYLE_PLACEHOLDER,
};
typedef uint8_t lv_ta_style_t;
# 113 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_ta.h"
lv_obj_t * lv_ta_create(lv_obj_t * par, const lv_obj_t * copy);
# 125 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_ta.h"
void lv_ta_add_char(lv_obj_t * ta, uint32_t c);






void lv_ta_add_text(lv_obj_t * ta, const char * txt);





void lv_ta_del_char(lv_obj_t * ta);





void lv_ta_del_char_forward(lv_obj_t * ta);
# 155 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_ta.h"
void lv_ta_set_text(lv_obj_t * ta, const char * txt);






void lv_ta_set_placeholder_text(lv_obj_t * ta, const char * txt);
# 171 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_ta.h"
void lv_ta_set_cursor_pos(lv_obj_t * ta, int16_t pos);






void lv_ta_set_cursor_type(lv_obj_t * ta, lv_cursor_type_t cur_type);






void lv_ta_set_cursor_click_pos(lv_obj_t * ta, _Bool en);






void lv_ta_set_pwd_mode(lv_obj_t * ta, _Bool en);






void lv_ta_set_one_line(lv_obj_t * ta, _Bool en);
# 208 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_ta.h"
void lv_ta_set_text_align(lv_obj_t * ta, lv_label_align_t align);






void lv_ta_set_accepted_chars(lv_obj_t * ta, const char * list);






void lv_ta_set_max_length(lv_obj_t * ta, uint16_t num);
# 232 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_ta.h"
void lv_ta_set_insert_replace(lv_obj_t * ta, const char * txt);






static inline void lv_ta_set_sb_mode(lv_obj_t * ta, lv_sb_mode_t mode)
{
    lv_page_set_sb_mode(ta, mode);
}







static inline void lv_ta_set_scroll_propagation(lv_obj_t * ta, _Bool en)
{
    lv_page_set_scroll_propagation(ta, en);
}






static inline void lv_ta_set_edge_flash(lv_obj_t * ta, _Bool en)
{
    lv_page_set_edge_flash(ta, en);
}







void lv_ta_set_style(lv_obj_t * ta, lv_ta_style_t type, const lv_style_t * style);






void lv_ta_set_text_sel(lv_obj_t * ta, _Bool en);






void lv_ta_set_pwd_show_time(lv_obj_t * ta, uint16_t time);






void lv_ta_set_cursor_blink_time(lv_obj_t * ta, uint16_t time);
# 303 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_ta.h"
const char * lv_ta_get_text(const lv_obj_t * ta);






const char * lv_ta_get_placeholder_text(lv_obj_t * ta);






lv_obj_t * lv_ta_get_label(const lv_obj_t * ta);






uint16_t lv_ta_get_cursor_pos(const lv_obj_t * ta);






lv_cursor_type_t lv_ta_get_cursor_type(const lv_obj_t * ta);






_Bool lv_ta_get_cursor_click_pos(lv_obj_t * ta);






_Bool lv_ta_get_pwd_mode(const lv_obj_t * ta);






_Bool lv_ta_get_one_line(const lv_obj_t * ta);






const char * lv_ta_get_accepted_chars(lv_obj_t * ta);






uint16_t lv_ta_get_max_length(lv_obj_t * ta);






static inline lv_sb_mode_t lv_ta_get_sb_mode(const lv_obj_t * ta)
{
    return lv_page_get_sb_mode(ta);
}






static inline _Bool lv_ta_get_scroll_propagation(lv_obj_t * ta)
{
    return lv_page_get_scroll_propagation(ta);
}






static inline _Bool lv_ta_get_edge_flash(lv_obj_t * ta)
{
    return lv_page_get_edge_flash(ta);
}







const lv_style_t * lv_ta_get_style(const lv_obj_t * ta, lv_ta_style_t type);






_Bool lv_ta_text_is_selected(const lv_obj_t * ta);






_Bool lv_ta_get_text_sel_en(lv_obj_t * ta);






uint16_t lv_ta_get_pwd_show_time(lv_obj_t * ta);






uint16_t lv_ta_get_cursor_blink_time(lv_obj_t * ta);
# 442 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_ta.h"
void lv_ta_clear_selection(lv_obj_t * ta);





void lv_ta_cursor_right(lv_obj_t * ta);





void lv_ta_cursor_left(lv_obj_t * ta);





void lv_ta_cursor_down(lv_obj_t * ta);





void lv_ta_cursor_up(lv_obj_t * ta);
# 61 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/lvgl.h" 2
# 1 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_canvas.h" 1
# 25 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_canvas.h"
# 1 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/../lv_objx/lv_img.h" 1
# 26 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_canvas.h" 2
# 36 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_canvas.h"
typedef struct
{
    lv_img_ext_t img;

    lv_img_dsc_t dsc;
} lv_canvas_ext_t;


enum {
    LV_CANVAS_STYLE_MAIN,
};
typedef uint8_t lv_canvas_style_t;
# 59 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_canvas.h"
lv_obj_t * lv_canvas_create(lv_obj_t * par, const lv_obj_t * copy);
# 77 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_canvas.h"
void lv_canvas_set_buffer(lv_obj_t * canvas, void * buf, lv_coord_t w, lv_coord_t h, lv_img_cf_t cf);
# 86 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_canvas.h"
void lv_canvas_set_px(lv_obj_t * canvas, lv_coord_t x, lv_coord_t y, lv_color_t c);
# 98 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_canvas.h"
void lv_canvas_set_palette(lv_obj_t * canvas, uint8_t id, lv_color_t c);







void lv_canvas_set_style(lv_obj_t * canvas, lv_canvas_style_t type, const lv_style_t * style);
# 119 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_canvas.h"
lv_color_t lv_canvas_get_px(lv_obj_t * canvas, lv_coord_t x, lv_coord_t y);






lv_img_dsc_t * lv_canvas_get_img(lv_obj_t * canvas);







const lv_style_t * lv_canvas_get_style(const lv_obj_t * canvas, lv_canvas_style_t type);
# 150 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_canvas.h"
void lv_canvas_copy_buf(lv_obj_t * canvas, const void * to_copy, lv_coord_t x, lv_coord_t y, lv_coord_t w,
                        lv_coord_t h);
# 166 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_canvas.h"
void lv_canvas_rotate(lv_obj_t * canvas, lv_img_dsc_t * img, int16_t angle, lv_coord_t offset_x, lv_coord_t offset_y,
                      int32_t pivot_x, int32_t pivot_y);






void lv_canvas_fill_bg(lv_obj_t * canvas, lv_color_t color);
# 185 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_canvas.h"
void lv_canvas_draw_rect(lv_obj_t * canvas, lv_coord_t x, lv_coord_t y, lv_coord_t w, lv_coord_t h,
                         const lv_style_t * style);
# 198 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_canvas.h"
void lv_canvas_draw_text(lv_obj_t * canvas, lv_coord_t x, lv_coord_t y, lv_coord_t max_w, const lv_style_t * style,
                         const char * txt, lv_label_align_t align);







void lv_canvas_draw_img(lv_obj_t * canvas, lv_coord_t x, lv_coord_t y, const void * src, const lv_style_t * style);
# 216 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_canvas.h"
void lv_canvas_draw_line(lv_obj_t * canvas, const lv_point_t * points, uint32_t point_cnt, const lv_style_t * style);
# 225 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_canvas.h"
void lv_canvas_draw_polygon(lv_obj_t * canvas, const lv_point_t * points, uint32_t point_cnt, const lv_style_t * style);
# 237 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_canvas.h"
void lv_canvas_draw_arc(lv_obj_t * canvas, lv_coord_t x, lv_coord_t y, lv_coord_t r, int32_t start_angle,
                        int32_t end_angle, const lv_style_t * style);
# 62 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/lvgl.h" 2
# 1 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_win.h" 1
# 57 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_win.h"
typedef struct
{


    lv_obj_t * page;
    lv_obj_t * header;
    lv_obj_t * title;
    const lv_style_t * style_btn_rel;
    const lv_style_t * style_btn_pr;
    lv_coord_t btn_size;
} lv_win_ext_t;


enum {
    LV_WIN_STYLE_BG,
    LV_WIN_STYLE_CONTENT,
    LV_WIN_STYLE_SB,
    LV_WIN_STYLE_HEADER,
    LV_WIN_STYLE_BTN_REL,
    LV_WIN_STYLE_BTN_PR,
};
typedef uint8_t lv_win_style_t;
# 90 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_win.h"
lv_obj_t * lv_win_create(lv_obj_t * par, const lv_obj_t * copy);





void lv_win_clean(lv_obj_t * win);
# 108 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_win.h"
lv_obj_t * lv_win_add_btn(lv_obj_t * win, const void * img_src);
# 119 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_win.h"
void lv_win_close_event_cb(lv_obj_t * btn, lv_event_t event);






void lv_win_set_title(lv_obj_t * win, const char * title);






void lv_win_set_btn_size(lv_obj_t * win, lv_coord_t size);
# 142 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_win.h"
void lv_win_set_content_size(lv_obj_t * win, lv_coord_t w, lv_coord_t h);






void lv_win_set_layout(lv_obj_t * win, lv_layout_t layout);






void lv_win_set_sb_mode(lv_obj_t * win, lv_sb_mode_t sb_mode);






void lv_win_set_anim_time(lv_obj_t * win, uint16_t anim_time);







void lv_win_set_style(lv_obj_t * win, lv_win_style_t type, const lv_style_t * style);






void lv_win_set_drag(lv_obj_t * win, _Bool en);
# 189 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_win.h"
const char * lv_win_get_title(const lv_obj_t * win);






lv_obj_t * lv_win_get_content(const lv_obj_t * win);






lv_coord_t lv_win_get_btn_size(const lv_obj_t * win);







lv_obj_t * lv_win_get_from_btn(const lv_obj_t * ctrl_btn);






lv_layout_t lv_win_get_layout(lv_obj_t * win);






lv_sb_mode_t lv_win_get_sb_mode(lv_obj_t * win);






uint16_t lv_win_get_anim_time(const lv_obj_t * win);






lv_coord_t lv_win_get_width(lv_obj_t * win);







const lv_style_t * lv_win_get_style(const lv_obj_t * win, lv_win_style_t type);






static inline _Bool lv_win_get_drag(const lv_obj_t * win)
{
    return lv_obj_get_drag(win);
}
# 269 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_win.h"
void lv_win_focus(lv_obj_t * win, lv_obj_t * obj, lv_anim_enable_t anim_en);






static inline void lv_win_scroll_hor(lv_obj_t * win, lv_coord_t dist)
{
    lv_win_ext_t * ext = (lv_win_ext_t *)lv_obj_get_ext_attr(win);
    lv_page_scroll_hor(ext->page, dist);
}





static inline void lv_win_scroll_ver(lv_obj_t * win, lv_coord_t dist)
{
    lv_win_ext_t * ext = (lv_win_ext_t *)lv_obj_get_ext_attr(win);
    lv_page_scroll_ver(ext->page, dist);
}
# 63 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/lvgl.h" 2
# 1 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_tabview.h" 1
# 34 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_tabview.h"
# 1 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/../lv_objx/lv_win.h" 1
# 35 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_tabview.h" 2
# 46 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_tabview.h"
enum { LV_TABVIEW_BTNS_POS_TOP, LV_TABVIEW_BTNS_POS_BOTTOM, LV_TABVIEW_BTNS_POS_LEFT, LV_TABVIEW_BTNS_POS_RIGHT };
typedef uint8_t lv_tabview_btns_pos_t;


typedef struct
{


    lv_obj_t * btns;
    lv_obj_t * indic;
    lv_obj_t * content;
    const char ** tab_name_ptr;
    lv_point_t point_last;
    uint16_t tab_cur;
    uint16_t tab_cnt;

    uint16_t anim_time;

    uint8_t slide_enable : 1;
    uint8_t draging : 1;
    uint8_t drag_hor : 1;
    uint8_t scroll_ver : 1;
    uint8_t btns_hide : 1;
    lv_tabview_btns_pos_t btns_pos : 2;
} lv_tabview_ext_t;

enum {
    LV_TABVIEW_STYLE_BG,
    LV_TABVIEW_STYLE_INDIC,
    LV_TABVIEW_STYLE_BTN_BG,
    LV_TABVIEW_STYLE_BTN_REL,
    LV_TABVIEW_STYLE_BTN_PR,
    LV_TABVIEW_STYLE_BTN_TGL_REL,
    LV_TABVIEW_STYLE_BTN_TGL_PR,
};
typedef uint8_t lv_tabview_style_t;
# 93 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_tabview.h"
lv_obj_t * lv_tabview_create(lv_obj_t * par, const lv_obj_t * copy);





void lv_tabview_clean(lv_obj_t * tabview);
# 111 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_tabview.h"
lv_obj_t * lv_tabview_add_tab(lv_obj_t * tabview, const char * name);
# 123 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_tabview.h"
void lv_tabview_set_tab_act(lv_obj_t * tabview, uint16_t id, lv_anim_enable_t anim);






void lv_tabview_set_sliding(lv_obj_t * tabview, _Bool en);






void lv_tabview_set_anim_time(lv_obj_t * tabview, uint16_t anim_time);







void lv_tabview_set_style(lv_obj_t * tabview, lv_tabview_style_t type, const lv_style_t * style);






void lv_tabview_set_btns_pos(lv_obj_t * tabview, lv_tabview_btns_pos_t btns_pos);






void lv_tabview_set_btns_hidden(lv_obj_t * tabview, _Bool en);
# 170 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_tabview.h"
uint16_t lv_tabview_get_tab_act(const lv_obj_t * tabview);






uint16_t lv_tabview_get_tab_count(const lv_obj_t * tabview);






lv_obj_t * lv_tabview_get_tab(const lv_obj_t * tabview, uint16_t id);






_Bool lv_tabview_get_sliding(const lv_obj_t * tabview);






uint16_t lv_tabview_get_anim_time(const lv_obj_t * tabview);







const lv_style_t * lv_tabview_get_style(const lv_obj_t * tabview, lv_tabview_style_t type);





lv_tabview_btns_pos_t lv_tabview_get_btns_pos(const lv_obj_t * tabview);






_Bool lv_tabview_get_btns_hidden(const lv_obj_t * tabview);
# 64 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/lvgl.h" 2
# 1 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_tileview.h" 1
# 35 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_tileview.h"
typedef struct
{
    lv_page_ext_t page;

    const lv_point_t * valid_pos;
    uint16_t valid_pos_cnt;

    uint16_t anim_time;

    lv_point_t act_id;
    uint8_t drag_top_en : 1;
    uint8_t drag_bottom_en : 1;
    uint8_t drag_left_en : 1;
    uint8_t drag_right_en : 1;
    uint8_t drag_hor : 1;
    uint8_t drag_ver : 1;
} lv_tileview_ext_t;


enum {
    LV_TILEVIEW_STYLE_MAIN,
};
typedef uint8_t lv_tileview_style_t;
# 69 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_tileview.h"
lv_obj_t * lv_tileview_create(lv_obj_t * par, const lv_obj_t * copy);
# 80 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_tileview.h"
void lv_tileview_add_element(lv_obj_t * tileview, lv_obj_t * element);
# 93 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_tileview.h"
void lv_tileview_set_valid_positions(lv_obj_t * tileview, const lv_point_t valid_pos[], uint16_t valid_pos_cnt);
# 102 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_tileview.h"
void lv_tileview_set_tile_act(lv_obj_t * tileview, lv_coord_t x, lv_coord_t y, lv_anim_enable_t anim);






static inline void lv_tileview_set_edge_flash(lv_obj_t * tileview, _Bool en)
{
    lv_page_set_edge_flash(tileview, en);
}






static inline void lv_tileview_set_anim_time(lv_obj_t * tileview, uint16_t anim_time)
{
    lv_page_set_anim_time(tileview, anim_time);
}







void lv_tileview_set_style(lv_obj_t * tileview, lv_tileview_style_t type, const lv_style_t * style);
# 141 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_tileview.h"
static inline _Bool lv_tileview_get_edge_flash(lv_obj_t * tileview)
{
    return lv_page_get_edge_flash(tileview);
}






static inline uint16_t lv_tileview_get_anim_time(lv_obj_t * tileview)
{
    return lv_page_get_anim_time(tileview);
}







const lv_style_t * lv_tileview_get_style(const lv_obj_t * tileview, lv_tileview_style_t type);
# 65 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/lvgl.h" 2
# 1 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_mbox.h" 1
# 51 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_mbox.h"
typedef struct
{
    lv_cont_ext_t bg;

    lv_obj_t * text;
    lv_obj_t * btnm;

    uint16_t anim_time;

} lv_mbox_ext_t;


enum {
    LV_MBOX_STYLE_BG,
    LV_MBOX_STYLE_BTN_BG,
    LV_MBOX_STYLE_BTN_REL,
    LV_MBOX_STYLE_BTN_PR,
    LV_MBOX_STYLE_BTN_TGL_REL,
    LV_MBOX_STYLE_BTN_TGL_PR,
    LV_MBOX_STYLE_BTN_INA,
};
typedef uint8_t lv_mbox_style_t;
# 85 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_mbox.h"
lv_obj_t * lv_mbox_create(lv_obj_t * par, const lv_obj_t * copy);
# 97 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_mbox.h"
void lv_mbox_add_btns(lv_obj_t * mbox, const char * btn_mapaction[]);
# 108 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_mbox.h"
void lv_mbox_set_text(lv_obj_t * mbox, const char * txt);






void lv_mbox_set_anim_time(lv_obj_t * mbox, uint16_t anim_time);






void lv_mbox_start_auto_close(lv_obj_t * mbox, uint16_t delay);





void lv_mbox_stop_auto_close(lv_obj_t * mbox);







void lv_mbox_set_style(lv_obj_t * mbox, lv_mbox_style_t type, const lv_style_t * style);






void lv_mbox_set_recolor(lv_obj_t * mbox, _Bool en);
# 154 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_mbox.h"
const char * lv_mbox_get_text(const lv_obj_t * mbox);







uint16_t lv_mbox_get_active_btn(lv_obj_t * mbox);







const char * lv_mbox_get_active_btn_text(lv_obj_t * mbox);






uint16_t lv_mbox_get_anim_time(const lv_obj_t * mbox);







const lv_style_t * lv_mbox_get_style(const lv_obj_t * mbox, lv_mbox_style_t type);






_Bool lv_mbox_get_recolor(const lv_obj_t * mbox);







lv_obj_t * lv_mbox_get_btnm(lv_obj_t * mbox);
# 66 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/lvgl.h" 2
# 1 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_gauge.h" 1
# 30 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_gauge.h"
# 1 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_lmeter.h" 1
# 34 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_lmeter.h"
typedef struct
{


    uint16_t scale_angle;
    uint16_t angle_ofs;
    uint16_t line_cnt;
    int16_t cur_value;
    int16_t min_value;
    int16_t max_value;
} lv_lmeter_ext_t;


enum {
    LV_LMETER_STYLE_MAIN,
};
typedef uint8_t lv_lmeter_style_t;
# 63 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_lmeter.h"
lv_obj_t * lv_lmeter_create(lv_obj_t * par, const lv_obj_t * copy);
# 74 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_lmeter.h"
void lv_lmeter_set_value(lv_obj_t * lmeter, int16_t value);







void lv_lmeter_set_range(lv_obj_t * lmeter, int16_t min, int16_t max);







void lv_lmeter_set_scale(lv_obj_t * lmeter, uint16_t angle, uint16_t line_cnt);






void lv_lmeter_set_angle_offset(lv_obj_t * lmeter, uint16_t angle);







static inline void lv_lmeter_set_style(lv_obj_t * lmeter, lv_lmeter_style_t type, lv_style_t * style)
{
    (void)type;
    lv_obj_set_style(lmeter, style);
}
# 120 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_lmeter.h"
int16_t lv_lmeter_get_value(const lv_obj_t * lmeter);






int16_t lv_lmeter_get_min_value(const lv_obj_t * lmeter);






int16_t lv_lmeter_get_max_value(const lv_obj_t * lmeter);






uint16_t lv_lmeter_get_line_count(const lv_obj_t * lmeter);






uint16_t lv_lmeter_get_scale_angle(const lv_obj_t * lmeter);






uint16_t lv_lmeter_get_angle_offset(lv_obj_t * lmeter);







static inline const lv_style_t * lv_lmeter_get_style(const lv_obj_t * lmeter, lv_lmeter_style_t type)
{
    (void)type;
    return lv_obj_get_style(lmeter);
}
# 31 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_gauge.h" 2
# 43 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_gauge.h"
typedef struct
{
    lv_lmeter_ext_t lmeter;

    int16_t * values;
    const lv_color_t * needle_colors;
    uint8_t needle_count;
    uint8_t label_count;
} lv_gauge_ext_t;


enum {
    LV_GAUGE_STYLE_MAIN,
};
typedef uint8_t lv_gauge_style_t;
# 69 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_gauge.h"
lv_obj_t * lv_gauge_create(lv_obj_t * par, const lv_obj_t * copy);
# 81 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_gauge.h"
void lv_gauge_set_needle_count(lv_obj_t * gauge, uint8_t needle_cnt, const lv_color_t colors[]);







void lv_gauge_set_value(lv_obj_t * gauge, uint8_t needle_id, int16_t value);







static inline void lv_gauge_set_range(lv_obj_t * gauge, int16_t min, int16_t max)
{
    lv_lmeter_set_range(gauge, min, max);
}






static inline void lv_gauge_set_critical_value(lv_obj_t * gauge, int16_t value)
{
    lv_lmeter_set_value(gauge, value);
}
# 121 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_gauge.h"
void lv_gauge_set_scale(lv_obj_t * gauge, uint16_t angle, uint8_t line_cnt, uint8_t label_cnt);







static inline void lv_gauge_set_style(lv_obj_t * gauge, lv_gauge_style_t type, lv_style_t * style)
{
    (void)type;
    lv_obj_set_style(gauge, style);
}
# 145 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_gauge.h"
int16_t lv_gauge_get_value(const lv_obj_t * gauge, uint8_t needle);






uint8_t lv_gauge_get_needle_count(const lv_obj_t * gauge);






static inline int16_t lv_gauge_get_min_value(const lv_obj_t * lmeter)
{
    return lv_lmeter_get_min_value(lmeter);
}






static inline int16_t lv_gauge_get_max_value(const lv_obj_t * lmeter)
{
    return lv_lmeter_get_max_value(lmeter);
}






static inline int16_t lv_gauge_get_critical_value(const lv_obj_t * gauge)
{
    return lv_lmeter_get_value(gauge);
}






uint8_t lv_gauge_get_label_count(const lv_obj_t * gauge);






static inline uint16_t lv_gauge_get_line_count(const lv_obj_t * gauge)
{
    return lv_lmeter_get_line_count(gauge);
}






static inline uint16_t lv_gauge_get_scale_angle(const lv_obj_t * gauge)
{
    return lv_lmeter_get_scale_angle(gauge);
}







static inline const lv_style_t * lv_gauge_get_style(const lv_obj_t * gauge, lv_gauge_style_t type)
{
    (void)type;
    return lv_obj_get_style(gauge);
}
# 67 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/lvgl.h" 2
# 1 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_lmeter.h" 1
# 68 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/lvgl.h" 2
# 1 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_sw.h" 1
# 30 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_sw.h"
# 1 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_slider.h" 1
# 31 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_sw.h" 2
# 41 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_sw.h"
typedef struct
{
    lv_slider_ext_t slider;

    const lv_style_t * style_knob_off;
    const lv_style_t * style_knob_on;
    lv_coord_t start_x;
    uint8_t changed : 1;
    uint8_t slided : 1;

    uint16_t anim_time;

} lv_sw_ext_t;




enum {
    LV_SW_STYLE_BG,
    LV_SW_STYLE_INDIC,
    LV_SW_STYLE_KNOB_OFF,
    LV_SW_STYLE_KNOB_ON,
};
typedef uint8_t lv_sw_style_t;
# 76 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_sw.h"
lv_obj_t * lv_sw_create(lv_obj_t * par, const lv_obj_t * copy);
# 87 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_sw.h"
void lv_sw_on(lv_obj_t * sw, lv_anim_enable_t anim);






void lv_sw_off(lv_obj_t * sw, lv_anim_enable_t anim);







_Bool lv_sw_toggle(lv_obj_t * sw, lv_anim_enable_t anim);







void lv_sw_set_style(lv_obj_t * sw, lv_sw_style_t type, const lv_style_t * style);







void lv_sw_set_anim_time(lv_obj_t * sw, uint16_t anim_time);
# 129 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_sw.h"
static inline _Bool lv_sw_get_state(const lv_obj_t * sw)
{
    return lv_bar_get_value(sw) < 100 / 2 ? 0 : 1;
}







const lv_style_t * lv_sw_get_style(const lv_obj_t * sw, lv_sw_style_t type);






uint16_t lv_sw_get_anim_time(const lv_obj_t * sw);
# 69 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/lvgl.h" 2

# 1 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_arc.h" 1
# 34 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_arc.h"
typedef struct
{

    lv_coord_t angle_start;
    lv_coord_t angle_end;
} lv_arc_ext_t;


enum {
    LV_ARC_STYLE_MAIN,
};
typedef uint8_t lv_arc_style_t;
# 57 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_arc.h"
lv_obj_t * lv_arc_create(lv_obj_t * par, const lv_obj_t * copy);
# 73 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_arc.h"
void lv_arc_set_angles(lv_obj_t * arc, uint16_t start, uint16_t end);







void lv_arc_set_style(lv_obj_t * arc, lv_arc_style_t type, const lv_style_t * style);
# 92 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_arc.h"
uint16_t lv_arc_get_angle_start(lv_obj_t * arc);






uint16_t lv_arc_get_angle_end(lv_obj_t * arc);







const lv_style_t * lv_arc_get_style(const lv_obj_t * arc, lv_arc_style_t type);
# 71 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/lvgl.h" 2
# 1 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_preload.h" 1
# 35 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_preload.h"
# 1 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_arc.h" 1
# 36 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_preload.h" 2
# 48 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_preload.h"
enum {
    LV_PRELOAD_TYPE_SPINNING_ARC,
    LV_PRELOAD_TYPE_FILLSPIN_ARC,
    LV_PRELOAD_TYPE_CONSTANT_ARC,
};
typedef uint8_t lv_preload_type_t;




enum {
    LV_PRELOAD_DIR_FORWARD,
    LV_PRELOAD_DIR_BACKWARD,
};
typedef uint8_t lv_preload_dir_t;


typedef struct
{
    lv_arc_ext_t arc;

    lv_anim_value_t arc_length;
    uint16_t time;
    lv_preload_type_t anim_type : 2;
    lv_preload_dir_t anim_dir : 1;
} lv_preload_ext_t;


enum {
    LV_PRELOAD_STYLE_MAIN,
};
typedef uint8_t lv_preload_style_t;
# 92 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_preload.h"
lv_obj_t * lv_preload_create(lv_obj_t * par, const lv_obj_t * copy);
# 103 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_preload.h"
void lv_preload_set_arc_length(lv_obj_t * preload, lv_anim_value_t deg);






void lv_preload_set_spin_time(lv_obj_t * preload, uint16_t time);
# 122 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_preload.h"
void lv_preload_set_style(lv_obj_t * preload, lv_preload_style_t type, const lv_style_t * style);






void lv_preload_set_type(lv_obj_t * preload, lv_preload_type_t type);






void lv_preload_set_dir(lv_obj_t * preload, lv_preload_dir_t dir);
# 146 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_preload.h"
lv_anim_value_t lv_preload_get_arc_length(const lv_obj_t * preload);





uint16_t lv_preload_get_spin_time(const lv_obj_t * preload);







const lv_style_t * lv_preload_get_style(const lv_obj_t * preload, lv_preload_style_t type);






lv_preload_type_t lv_preload_get_type(lv_obj_t * preload);






lv_preload_dir_t lv_preload_get_dir(lv_obj_t * preload);
# 185 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_preload.h"
void lv_preload_spinner_anim(void * ptr, lv_anim_value_t val);
# 72 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/lvgl.h" 2
# 1 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_calendar.h" 1
# 37 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_calendar.h"
typedef struct
{
    uint16_t year;
    int8_t month;
    int8_t day;
} lv_calendar_date_t;


typedef struct
{


    lv_calendar_date_t today;
    lv_calendar_date_t showed_date;
    lv_calendar_date_t * highlighted_dates;

    int8_t btn_pressing;
    uint16_t highlighted_dates_num;
    lv_calendar_date_t pressed_date;
    const char ** day_names;
    const char ** month_names;


    const lv_style_t * style_header;
    const lv_style_t * style_header_pr;
    const lv_style_t * style_day_names;
    const lv_style_t * style_highlighted_days;
    const lv_style_t * style_inactive_days;
    const lv_style_t * style_week_box;
    const lv_style_t * style_today_box;
} lv_calendar_ext_t;


enum {
    LV_CALENDAR_STYLE_BG,
    LV_CALENDAR_STYLE_HEADER,
    LV_CALENDAR_STYLE_HEADER_PR,
    LV_CALENDAR_STYLE_DAY_NAMES,
    LV_CALENDAR_STYLE_HIGHLIGHTED_DAYS,
    LV_CALENDAR_STYLE_INACTIVE_DAYS,
    LV_CALENDAR_STYLE_WEEK_BOX,
    LV_CALENDAR_STYLE_TODAY_BOX,
};
typedef uint8_t lv_calendar_style_t;
# 92 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_calendar.h"
lv_obj_t * lv_calendar_create(lv_obj_t * par, const lv_obj_t * copy);
# 108 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_calendar.h"
void lv_calendar_set_today_date(lv_obj_t * calendar, lv_calendar_date_t * today);







void lv_calendar_set_showed_date(lv_obj_t * calendar, lv_calendar_date_t * showed);
# 125 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_calendar.h"
void lv_calendar_set_highlighted_dates(lv_obj_t * calendar, lv_calendar_date_t highlighted[], uint16_t date_num);
# 134 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_calendar.h"
void lv_calendar_set_day_names(lv_obj_t * calendar, const char ** day_names);
# 143 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_calendar.h"
void lv_calendar_set_month_names(lv_obj_t * calendar, const char ** month_names);







void lv_calendar_set_style(lv_obj_t * calendar, lv_calendar_style_t type, const lv_style_t * style);
# 162 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_calendar.h"
lv_calendar_date_t * lv_calendar_get_today_date(const lv_obj_t * calendar);






lv_calendar_date_t * lv_calendar_get_showed_date(const lv_obj_t * calendar);







lv_calendar_date_t * lv_calendar_get_pressed_date(const lv_obj_t * calendar);






lv_calendar_date_t * lv_calendar_get_highlighted_dates(const lv_obj_t * calendar);






uint16_t lv_calendar_get_highlighted_dates_num(const lv_obj_t * calendar);






const char ** lv_calendar_get_day_names(const lv_obj_t * calendar);






const char ** lv_calendar_get_month_names(const lv_obj_t * calendar);







const lv_style_t * lv_calendar_get_style(const lv_obj_t * calendar, lv_calendar_style_t type);
# 73 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/lvgl.h" 2
# 1 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_spinbox.h" 1
# 30 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_spinbox.h"
# 1 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/../lv_objx/lv_ta.h" 1
# 31 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_spinbox.h" 2
# 42 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_spinbox.h"
typedef struct
{
    lv_ta_ext_t ta;

    int32_t value;
    int32_t range_max;
    int32_t range_min;
    int32_t step;
    uint16_t digit_count : 4;
    uint16_t dec_point_pos : 4;
    uint16_t digit_padding_left : 4;
} lv_spinbox_ext_t;


enum {
    LV_SPINBOX_STYLE_BG,
    LV_SPINBOX_STYLE_SB,
    LV_SPINBOX_STYLE_CURSOR,
};
typedef uint8_t lv_spinbox_style_t;
# 73 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_spinbox.h"
lv_obj_t * lv_spinbox_create(lv_obj_t * par, const lv_obj_t * copy);
# 85 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_spinbox.h"
static inline void lv_spinbox_set_style(lv_obj_t * spinbox, lv_spinbox_style_t type, lv_style_t * style)
{
    lv_ta_set_style(spinbox, type, style);
}






void lv_spinbox_set_value(lv_obj_t * spinbox, int32_t i);
# 104 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_spinbox.h"
void lv_spinbox_set_digit_format(lv_obj_t * spinbox, uint8_t digit_count, uint8_t separator_position);






void lv_spinbox_set_step(lv_obj_t * spinbox, uint32_t step);







void lv_spinbox_set_range(lv_obj_t * spinbox, int32_t range_min, int32_t range_max);






void lv_spinbox_set_padding_left(lv_obj_t * spinbox, uint8_t padding);
# 138 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_spinbox.h"
static inline const lv_style_t * lv_spinbox_get_style(lv_obj_t * spinbox, lv_spinbox_style_t type)
{
    return lv_ta_get_style(spinbox, type);
}






int32_t lv_spinbox_get_value(lv_obj_t * spinbox);
# 158 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_objx/lv_spinbox.h"
void lv_spinbox_step_next(lv_obj_t * spinbox);





void lv_spinbox_step_prev(lv_obj_t * spinbox);





void lv_spinbox_increment(lv_obj_t * spinbox);





void lv_spinbox_decrement(lv_obj_t * spinbox);
# 74 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/lvgl.h" 2

# 1 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/src/lv_draw/lv_img_cache.h" 1
# 76 "../Testing_module/JOYSTICK/../../../lib/lv_bindings/lvgl/lvgl.h" 2
# 9 "../Testing_module/JOYSTICK/mainjoy.c" 2
# 24 "../Testing_module/JOYSTICK/mainjoy.c"
volatile JOYState_TypeDef JoyState = JOY_NONE;



static _Bool button_read(lv_indev_drv_t * indev_drv, lv_indev_data_t * data);
static int8_t button_get_pressed_id(void);





void joy_init(void)
{



    BSP_JOY_Init(JOY_MODE_EXTI);
    do { volatile uint32_t tmpreg; ((((RCC_TypeDef *) (((0x40000000UL) + 0x00020000UL) + 0x1000UL))->APB1ENR1) |= ((0x1UL << (21U)))); tmpreg = ((((RCC_TypeDef *) (((0x40000000UL) + 0x00020000UL) + 0x1000UL))->APB1ENR1) & ((0x1UL << (21U)))); (void)tmpreg; } while(0);
# 50 "../Testing_module/JOYSTICK/mainjoy.c"
}


_Bool button_read(lv_indev_drv_t * indev_drv, lv_indev_data_t * data)
{

     uint8_t last_btn = 0;


    int8_t btn_act = button_get_pressed_id();

    if(btn_act >= 0) {
        data->state = LV_INDEV_STATE_PR;
        last_btn = btn_act;
    } else {
        data->state = LV_INDEV_STATE_REL;
    }


    data->btn_id = last_btn;


    return 0;
}


static int8_t button_get_pressed_id(void)
{
    Mfx_Event();
    if(JoyState == JOY_LEFT)
        return 0;
    else if (JoyState == JOY_RIGHT)
        return 1;
    else
        return -1;

}


void Mfx_Event(void)
{
  uint32_t irqPending;


  JoyState = JOY_NONE;

  irqPending = MFX_IO_Read(((uint16_t) 0x84), ((uint8_t)0x08));


  if(irqPending & 0x01)
  {
    uint32_t JoystickStatus;
    uint32_t statusGpio = BSP_IO_ITGetStatus(((uint32_t)0x00000008) | ((uint32_t)0x00000010) | ((uint32_t)0x00000002) | ((uint32_t)0x00000004) | ((uint32_t)0x00000200) | ((uint32_t)0x00000020));

    JoystickStatus = statusGpio & (((uint32_t)0x00000008) | ((uint32_t)0x00000010) | ((uint32_t)0x00000002) | ((uint32_t)0x00000004));

    if(JoystickStatus != 0)
    {
      if(JoystickStatus == ((uint32_t)0x00000008))
      {
       printf("[DEBUG]\t%s\t%d\t""JOYRIGHT\r\n", __FUNCTION__, 110);
        JoyState = JOY_RIGHT;
      }
      else if(JoystickStatus == ((uint32_t)0x00000010))
      {

       printf("[DEBUG]\t%s\t%d\t""JOYLEFT\r\n", __FUNCTION__, 116);
        JoyState = JOY_LEFT;
      }
      else if(JoystickStatus == ((uint32_t)0x00000002))
      {
        JoyState = JOY_UP;

      }
      else if(JoystickStatus == ((uint32_t)0x00000004))
      {
        JoyState = JOY_DOWN;

      }
      else
      {
        JoyState = JOY_NONE;
      }
    }





    BSP_IO_ITClear(statusGpio);
  }
  irqPending &= ~0x01;
  if(irqPending)
  {
    MFX_IO_Write(((uint16_t) 0x84), ((uint8_t)0x44), irqPending);
  }



  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
}
# 6 "../Testing_module/JOYSTICK/joystick.c" 2






static mp_obj_t mp_joystick_init(void)
{

 joy_init();

 return (((mp_obj_t)&mp_const_none_obj));
}

static mp_obj_t mp_mfx_event(void)
{

 Mfx_Event();

 return (((mp_obj_t)&mp_const_none_obj));
}

static const mp_obj_fun_builtin_fixed_t mp_joystick_init_obj = {{&mp_type_fun_builtin_0}, .fun._0 = mp_joystick_init};
static const mp_obj_fun_builtin_fixed_t mp_joystick_mfx_event_obj = {{&mp_type_fun_builtin_0}, .fun._0 = mp_mfx_event};
static const mp_obj_type_t button_read_type = { { &mp_type_type }, .name = MP_QSTR_button_read, .buffer_p = { .get_buffer = mp_ptr_get_buffer }};static const mp_ptr_t button_read_obj = { { &button_read_type }, &button_read};

static const mp_rom_map_elem_t joystick_globals_table[] = {
 { ((mp_obj_t)((((mp_uint_t)(MP_QSTR___name__)) << 2) | 2)), ((mp_obj_t)((((mp_uint_t)(MP_QSTR_joystick)) << 2) | 2)) },
 { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_init)) << 2) | 2)), (&mp_joystick_init_obj) },
 { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_mfx_event)) << 2) | 2)), (&mp_joystick_mfx_event_obj) },
 { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_read_cb)) << 2) | 2)), (&button_read_obj) },
};

static const mp_obj_dict_t mp_module_joystick_globals = { .base = {&mp_type_dict}, .map = { .all_keys_are_qstrs = 1, .is_fixed = 1, .is_ordered = 1, .used = (sizeof(joystick_globals_table) / sizeof((joystick_globals_table)[0])), .alloc = (sizeof(joystick_globals_table) / sizeof((joystick_globals_table)[0])), .table = (mp_map_elem_t*)(mp_rom_map_elem_t*)joystick_globals_table, }, }


 ;

const mp_obj_module_t joystick_user_cmodule = {
 .base = {&mp_type_module},
 .globals = (mp_obj_dict_t*)&mp_module_joystick_globals,
};

;
# 1 "build-STM32L4R9IDISC/genhdr/moduledefs.h"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "build-STM32L4R9IDISC/genhdr/moduledefs.h"
